# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: onos/provisioner/aspects.proto, onos/provisioner/pipeline.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import AsyncIterator, Optional

import betterproto
import grpclib


@dataclass(eq=False, repr=False)
class DeviceConfig(betterproto.Message):
    """
    DeviceConfig is a topology entity aspect used to specify what pipeline and
    chassis config a device should have applied to it
    """

    pipeline_config_id: str = betterproto.string_field(1)
    chassis_config_id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PipelineConfigState(betterproto.Message):
    """
    PipelineConfigState is a topology entity aspect used to indicate what
    pipeline config a device has presently applied to it
    """

    config_id: str = betterproto.string_field(1)
    cookie: int = betterproto.uint64_field(2)
    updated: datetime = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ChassisConfigState(betterproto.Message):
    """
    ChassisConfigState is a topology entity aspect used to indicate what
    chassis config a device has presently applied to it
    """

    config_id: str = betterproto.string_field(1)
    updated: datetime = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PipelineConfig(betterproto.Message):
    """
    DeviceConfig is a topology entity aspect used to specify what pipeline and
    chassis config a device should have applied to it
    """

    config_id: str = betterproto.string_field(1)
    revision: int = betterproto.uint64_field(2)
    p4_info: bytes = betterproto.bytes_field(3)
    p4_binary: bytes = betterproto.bytes_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddPipelineConfigRequest(betterproto.Message):
    """
    PipelineConfigState is a topology entity aspect used to indicate what
    pipeline config a device has presently applied to it
    """

    config: "PipelineConfig" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddPipelineConfigResponse(betterproto.Message):
    """
    ChassisConfigState is a topology entity aspect used to indicate what
    chassis config a device has presently applied to it
    """

    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeletePipelineConfigRequest(betterproto.Message):
    pipeline_config: "PipelineConfig" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeletePipelineConfigResponse(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetPipelineConfigRequest(betterproto.Message):
    config_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetPipelineConfigResponse(betterproto.Message):
    config: "PipelineConfig" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListPipelineConfigsRequest(betterproto.Message):
    watch: bool = betterproto.bool_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListPipelineConfigsResponse(betterproto.Message):
    config: "PipelineConfig" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


class PipelineConfigServiceStub(betterproto.ServiceStub):
    async def add(
        self, *, config: "PipelineConfig" = None
    ) -> "AddPipelineConfigResponse":

        request = AddPipelineConfigRequest()
        if config is not None:
            request.config = config

        return await self._unary_unary(
            "/onos.provisioner.PipelineConfigService/Add",
            request,
            AddPipelineConfigResponse,
        )

    async def delete(
        self, *, pipeline_config: "PipelineConfig" = None
    ) -> "DeletePipelineConfigResponse":

        request = DeletePipelineConfigRequest()
        if pipeline_config is not None:
            request.pipeline_config = pipeline_config

        return await self._unary_unary(
            "/onos.provisioner.PipelineConfigService/Delete",
            request,
            DeletePipelineConfigResponse,
        )

    async def get(self, *, config_id: str = "") -> "GetPipelineConfigResponse":

        request = GetPipelineConfigRequest()
        request.config_id = config_id

        return await self._unary_unary(
            "/onos.provisioner.PipelineConfigService/Get",
            request,
            GetPipelineConfigResponse,
        )

    async def list(
        self, *, watch: bool = False
    ) -> AsyncIterator["ListPipelineConfigsResponse"]:

        request = ListPipelineConfigsRequest()
        request.watch = watch

        async for response in self._unary_stream(
            "/onos.provisioner.PipelineConfigService/List",
            request,
            ListPipelineConfigsResponse,
        ):
            yield response
