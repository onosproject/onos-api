# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: onos/device-provisioner/admin/admin.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterator

import betterproto
import grpclib


@dataclass(eq=False, repr=False)
class AddPipelineRequest(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AddPipelineResponse(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeletePipelineRequest(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeletePipelineResponse(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetPipelineRequest(betterproto.Message):
    pipelineconfig_id: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetPipelineResponse(betterproto.Message):
    pipelineconfig: "__p4_rt_v1__.PipelineConfig" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListPipelinesRequest(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListPipelinesResponse(betterproto.Message):
    pipelineconfig: "__p4_rt_v1__.PipelineConfig" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class WatchPipelinesRequest(betterproto.Message):
    pipelineconfig_id: str = betterproto.string_field(1)
    noreplay: bool = betterproto.bool_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class WatchPipelinesResponse(betterproto.Message):
    pipelineconfig: "__p4_rt_v1__.PipelineConfig" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


class PipelineConfigServiceStub(betterproto.ServiceStub):
    """PipelineConfigService"""

    async def add_pipeline(self) -> "AddPipelineResponse":
        """AddPipeline registers new pipeline configuration"""

        request = AddPipelineRequest()

        return await self._unary_unary(
            "/onos.deviceprovisioner.admin.PipelineConfigService/AddPipeline",
            request,
            AddPipelineResponse,
        )

    async def delete_pipeline(self) -> "DeletePipelineResponse":
        """DeletePipeline unregisters new pipeline configuration"""

        request = DeletePipelineRequest()

        return await self._unary_unary(
            "/onos.deviceprovisioner.admin.PipelineConfigService/DeletePipeline",
            request,
            DeletePipelineResponse,
        )

    async def get_pipeline(
        self, *, pipelineconfig_id: str = ""
    ) -> "GetPipelineResponse":
        """GetPipeline returns pipeline configuration based on a given ID"""

        request = GetPipelineRequest()
        request.pipelineconfig_id = pipelineconfig_id

        return await self._unary_unary(
            "/onos.deviceprovisioner.admin.PipelineConfigService/GetPipeline",
            request,
            GetPipelineResponse,
        )

    async def list_pipelines(self) -> AsyncIterator["ListPipelinesResponse"]:
        """List returns all registered pipelines"""

        request = ListPipelinesRequest()

        async for response in self._unary_stream(
            "/onos.deviceprovisioner.admin.PipelineConfigService/ListPipelines",
            request,
            ListPipelinesResponse,
        ):
            yield response

    async def watch_pipelines(
        self, *, pipelineconfig_id: str = "", noreplay: bool = False
    ) -> AsyncIterator["WatchPipelinesResponse"]:
        """Watch returns a stream of pipeline change notifications"""

        request = WatchPipelinesRequest()
        request.pipelineconfig_id = pipelineconfig_id
        request.noreplay = noreplay

        async for response in self._unary_stream(
            "/onos.deviceprovisioner.admin.PipelineConfigService/WatchPipelines",
            request,
            WatchPipelinesResponse,
        ):
            yield response


from ...p4rt import v1 as __p4_rt_v1__
