# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: onos/ccc/ccc.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib


class ResourceType(betterproto.Enum):
    """enumerated from e2sm_ccc.asn1:141"""

    RESOURCE_TYPE_PRB_UL = 0
    RESOURCE_TYPE_PRB_DL = 1
    RESOURCE_TYPE_DRB = 2
    RESOURCE_TYPE_RRC = 3


class SchedulerType(betterproto.Enum):
    """enumerated from e2sm_ccc.asn1:143"""

    SCHEDULER_TYPE_ROUND_ROBIN = 0
    SCHEDULER_TYPE_PROPORTIONALLY_FAIR = 1
    SCHEDULER_TYPE_QOS_BASED = 2


@dataclass(eq=False, repr=False)
class Plmnidentity(betterproto.Message):
    """range of Integer from e2sm_common_ies.asn1:444"""

    value: bytes = betterproto.bytes_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Sd(betterproto.Message):
    """range of Integer from e2sm_common_ies.asn1:450"""

    value: bytes = betterproto.bytes_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class SnSsai(betterproto.Message):
    """sequence from e2sm_common_ies.asn1:454"""

    sst: "Sst" = betterproto.message_field(1)
    sd: "Sd" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Sst(betterproto.Message):
    """range of Integer from e2sm_common_ies.asn1:460"""

    value: bytes = betterproto.bytes_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RrmPolicyMember(betterproto.Message):
    """sequence from e2sm_ccc.asn1:161"""

    plmn_id: "Plmnidentity" = betterproto.message_field(1)
    snssai: "SnSsai" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RrmPolicyMemberList(betterproto.Message):
    """sequence from e2sm_ccc.asn1:167"""

    rrm_policy_member: List["RrmPolicyMember"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class OrRmpolicyRatio(betterproto.Message):
    """sequence from e2sm_ccc.asn1:229 {O-RRMPolicyRatio}"""

    resource_type: "ResourceType" = betterproto.enum_field(1)
    scheduler_type: "SchedulerType" = betterproto.enum_field(2)
    rrm_policy_member_list: "RrmPolicyMemberList" = betterproto.message_field(3)
    rrm_policy_max_ratio: int = betterproto.int32_field(4)
    rrm_policy_min_ratio: int = betterproto.int32_field(5)
    rrm_policy_dedicated_ratio: int = betterproto.int32_field(6)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Ack(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    cause: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UpdateSliceRequest(betterproto.Message):
    e2_node_id: str = betterproto.string_field(1)
    rrm_policy_ratio: "OrRmpolicyRatio" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UpdateSliceResponse(betterproto.Message):
    ack: "Ack" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


class CccStub(betterproto.ServiceStub):
    async def update_slice(
        self, *, e2_node_id: str = "", rrm_policy_ratio: "OrRmpolicyRatio" = None
    ) -> "UpdateSliceResponse":
        """Slice management"""

        request = UpdateSliceRequest()
        request.e2_node_id = e2_node_id
        if rrm_policy_ratio is not None:
            request.rrm_policy_ratio = rrm_policy_ratio

        return await self._unary_unary(
            "/onos.ccc.Ccc/UpdateSlice", request, UpdateSliceResponse
        )
