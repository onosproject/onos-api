# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: onos/config/v2/change.proto, onos/config/v2/configuration.proto, onos/config/v2/extensions.proto, onos/config/v2/failure.proto, onos/config/v2/object.proto, onos/config/v2/proposal.proto, onos/config/v2/transaction.proto, onos/config/v2/value.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase


class ValueType(betterproto.Enum):
    """ValueType is the type for a value"""

    EMPTY = 0
    STRING = 1
    INT = 2
    UINT = 3
    BOOL = 4
    DECIMAL = 5
    FLOAT = 6
    BYTES = 7
    LEAFLIST_STRING = 8
    LEAFLIST_INT = 9
    LEAFLIST_UINT = 10
    LEAFLIST_BOOL = 11
    LEAFLIST_DECIMAL = 12
    LEAFLIST_FLOAT = 13
    LEAFLIST_BYTES = 14


class FailureType(betterproto.Enum):
    UNKNOWN = 0
    CANCELED = 1
    NOT_FOUND = 2
    ALREADY_EXISTS = 3
    UNAUTHORIZED = 4
    FORBIDDEN = 5
    CONFLICT = 6
    INVALID = 7
    UNAVAILABLE = 8
    NOT_SUPPORTED = 9
    TIMEOUT = 10
    INTERNAL = 11


class TargetState(betterproto.Enum):
    """TargetState is the state of a Transaction target"""

    TARGET_UPDATE_PENDING = 0
    TARGET_UPDATE_COMPLETE = 1


class TransactionState(betterproto.Enum):
    """TransactionState is the transaction state of a transaction phase"""

    # TRANSACTION_PENDING indicates the transaction is pending
    TRANSACTION_PENDING = 0
    # TRANSACTION_COMPLETE indicates the transaction is complete
    TRANSACTION_COMPLETE = 2
    # TRANSACTION_FAILED indicates the transaction failed
    TRANSACTION_FAILED = 3
    # TRANSACTION_VALIDATING indicates the transaction is in the validating state
    TRANSACTION_VALIDATING = 4
    # TRANSACTION_COMMITTING indicates the transaction is in the committing state
    TRANSACTION_COMMITTING = 5
    # TRANSACTION_APPLYING indicates the transaction is in the applying state
    TRANSACTION_APPLYING = 6


class TransactionEventTransactionEventType(betterproto.Enum):
    TRANSACTION_EVENT_UNKNOWN = 0
    TRANSACTION_CREATED = 1
    TRANSACTION_UPDATED = 2
    TRANSACTION_DELETED = 3
    TRANSACTION_REPLAYED = 4


class ConfigurationStatusState(betterproto.Enum):
    UNKNOWN = 0
    SYNCHRONIZING = 1
    SYNCHRONIZED = 2
    PERSISTED = 3


class ConfigurationEventEventType(betterproto.Enum):
    UNKNOWN = 0
    CREATED = 1
    UPDATED = 2
    DELETED = 3
    REPLAYED = 4


class ProposalInitializePhaseState(betterproto.Enum):
    INITIALIZING = 0
    INITIALIZED = 1


class ProposalValidatePhaseState(betterproto.Enum):
    VALIDATING = 0
    VALIDATED = 1
    FAILED = 2


class ProposalCommitPhaseState(betterproto.Enum):
    COMMITTING = 0
    COMMITTED = 1


class ProposalApplyPhaseState(betterproto.Enum):
    APPLYING = 0
    APPLIED = 1


class ProposalEventEventType(betterproto.Enum):
    UNKNOWN = 0
    CREATED = 1
    UPDATED = 2
    DELETED = 3
    REPLAYED = 4


@dataclass(eq=False, repr=False)
class TypedValue(betterproto.Message):
    """TypedValue is a value represented as a byte array"""

    # 'bytes' is the bytes array
    bytes_: bytes = betterproto.bytes_field(1)
    # 'type' is the value type
    type: "ValueType" = betterproto.enum_field(2)
    # 'type_opts' is a set of type options
    type_opts: List[int] = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class PathValue(betterproto.Message):
    """PathValue is the state of a path/value in the configuration tree"""

    # 'path' is the path to change
    path: str = betterproto.string_field(1)
    # 'value' is the change value
    value: "TypedValue" = betterproto.message_field(2)
    # 'deleted' indicates whether this is a delete
    deleted: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ObjectMeta(betterproto.Message):
    key: str = betterproto.string_field(1)
    version: int = betterproto.uint64_field(2)
    revision: int = betterproto.uint64_field(3)
    created: datetime = betterproto.message_field(4)
    updated: datetime = betterproto.message_field(5)
    deleted: datetime = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class Change(betterproto.Message):
    """Change represents a configuration change to a single target"""

    # 'target_version' is an optional target version to which to apply this
    # change
    target_version: str = betterproto.string_field(2)
    # 'target_type' is an optional target type to which to apply this change
    target_type: str = betterproto.string_field(3)
    # 'values' is a set of change values to apply
    values: Dict[str, "ChangeValue"] = betterproto.map_field(
        4, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class ChangeValue(betterproto.Message):
    """
    ChangeValue represents a change requested for an individual path/value
    """

    # 'value' is the change value
    value: "TypedValue" = betterproto.message_field(1)
    # 'delete' indicates whether this is a delete
    delete: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class Failure(betterproto.Message):
    """Failure transaction failure type and description"""

    type: "FailureType" = betterproto.enum_field(1)
    description: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class TransactionChange(betterproto.Message):
    """TransactionChange  refers to a multi-target transactional change"""

    # 'changes' is a set of changes to apply to targets The list of changes
    # should contain only a single change per target/version pair.
    changes: Dict[str, "Change"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class TransactionRollback(betterproto.Message):
    """TransactionRollback"""

    # 'index' is a monotonically increasing, globally unique index of the change
    index: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class Transaction(betterproto.Message):
    """Transaction refers to a transaction change or transaction rollback"""

    meta: "ObjectMeta" = betterproto.message_field(1)
    # 'id' is the unique identifier of the transaction This field should be set
    # prior to persisting the object.
    id: str = betterproto.string_field(2)
    # 'index' is a monotonically increasing, globally unique index of the change
    # The index is provided by the store, is static and unique for each unique
    # change identifier, and should not be modified by client code.
    index: int = betterproto.uint64_field(3)
    # 'status' is the current lifecycle status of the transaction
    status: "TransactionStatus" = betterproto.message_field(4)
    # 'username' is the name of the user that made the transaction
    username: str = betterproto.string_field(5)
    # atomic determines if a transaction is atomic or not
    atomic: bool = betterproto.bool_field(6)
    change: "TransactionChange" = betterproto.message_field(7, group="transaction")
    rollback: "TransactionRollback" = betterproto.message_field(8, group="transaction")


@dataclass(eq=False, repr=False)
class TransactionStatus(betterproto.Message):
    """TransactionStatus is the status of a Transaction"""

    # revision is the highest revision number that's been reconciled
    revision: int = betterproto.uint64_field(1)
    # 'state' is the state of the transaction This field should only be updated
    # from within onos-config.
    state: "TransactionState" = betterproto.enum_field(2)
    # 'sources' is a set of changes needed to revert back to the source of the
    # transaction This field should only be updated from within onos-config
    targets: Dict[str, "TargetStatus"] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    # failure transaction failure type and description
    failure: "Failure" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class TargetStatus(betterproto.Message):
    """TargetStatus is the status of a Target changed by a Transaction"""

    # 'target_version' is an optional target version to which to apply this
    # change
    target_version: str = betterproto.string_field(1)
    # 'target_type' is an optional target type to which to apply this change
    target_type: str = betterproto.string_field(2)
    # 'prev_values' is the previous set of values for the target
    prev_values: Dict[str, "PathValue"] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    # 'state' is the current state of the target
    state: "TargetState" = betterproto.enum_field(4)
    # failure transaction failure type and description
    failure: "Failure" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class TransactionEvent(betterproto.Message):
    """TransactionEvent transaction store event"""

    type: "TransactionEventTransactionEventType" = betterproto.enum_field(1)
    transaction: "Transaction" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Configuration(betterproto.Message):
    """Configuration represents complete desired target configuration"""

    meta: "ObjectMeta" = betterproto.message_field(1)
    # 'id' is a unique configuration identifier
    id: str = betterproto.string_field(2)
    # 'target_id' is the target to which the desired target configuration applies
    target_id: str = betterproto.string_field(3)
    # 'target_version' is the version to which desired target configuration
    # applies
    target_version: str = betterproto.string_field(4)
    # 'target_type' is an optional target type to which to apply this desired
    # target configuration
    target_type: str = betterproto.string_field(5)
    # 'values' is a map of path/values to set
    values: Dict[str, "PathValue"] = betterproto.map_field(
        6, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    # 'index' is the index of the configuration values
    index: int = betterproto.uint64_field(7)
    # 'ConfigurationStatus' is the current lifecycle status of the configuration
    status: "ConfigurationStatus" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class ConfigurationStatus(betterproto.Message):
    """ConfigurationStatus is the status of a Configuration"""

    # 'state' is the configuration state
    state: "ConfigurationStatusState" = betterproto.enum_field(1)
    # 'term' is the current mastership term for the configuration
    term: int = betterproto.uint64_field(2)
    # 'proposed' is the proposed configuration status
    proposed: "ProposedConfigurationStatus" = betterproto.message_field(3)
    # 'committed' is the committed configuration status
    committed: "CommittedConfigurationStatus" = betterproto.message_field(4)
    # 'applied' is the applied configuration status
    applied: "AppliedConfigurationStatus" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ProposedConfigurationStatus(betterproto.Message):
    index: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CommittedConfigurationStatus(betterproto.Message):
    index: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class AppliedConfigurationStatus(betterproto.Message):
    index: int = betterproto.uint64_field(1)
    term: int = betterproto.uint64_field(2)
    values: Dict[str, "PathValue"] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class ConfigurationEvent(betterproto.Message):
    """ConfigurationEvent configuration store event"""

    # EventType configuration event type
    type: "ConfigurationEventEventType" = betterproto.enum_field(1)
    configuration: "Configuration" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TransactionInfo(betterproto.Message):
    """
    TransactionInfo is an extension providing information about the transaction
    to clients in responses.
    """

    id: str = betterproto.string_field(1)
    index: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class TransactionMode(betterproto.Message):
    """
    TransactionMode is an extension for constraining the execution of a
    transaction for stronger consistency guarantees.
    """

    sync: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class Proposal(betterproto.Message):
    meta: "ObjectMeta" = betterproto.message_field(1)
    # 'id' is the unique identifier of the proposal
    id: str = betterproto.string_field(2)
    # 'target_id' is the proposal's target identifier
    target_id: str = betterproto.string_field(3)
    # 'transaction_id' is the unique identifier of the transaction
    transaction_id: str = betterproto.string_field(4)
    # 'transaction_index' is the unique index of the transaction
    transaction_index: int = betterproto.uint64_field(5)
    change: "ChangeProposal" = betterproto.message_field(6, group="details")
    rollback: "RollbackProposal" = betterproto.message_field(7, group="details")
    # 'status' is the current lifecycle status of the proposal
    status: "ProposalStatus" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class ChangeProposal(betterproto.Message):
    # 'target_version' is an optional target version to which to apply this
    # change
    target_version: str = betterproto.string_field(1)
    # 'target_type' is an optional target type to which to apply this change
    target_type: str = betterproto.string_field(2)
    # 'changes' is the proposed change values
    values: Dict[str, "ChangeValue"] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class RollbackProposal(betterproto.Message):
    # 'rollback_index' is the index of the transaction to roll back
    rollback_index: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class ProposalStatus(betterproto.Message):
    """ProposalStatus is the status of a Proposal"""

    # 'phases' is the proposal phases
    phases: "ProposalPhases" = betterproto.message_field(1)
    # 'prev_index' is a reference to the previous transaction index
    prev_index: int = betterproto.uint64_field(2)
    # 'next_index' is a reference to the next transaction index
    next_index: int = betterproto.uint64_field(3)
    # 'rollback_index' is a reference to the index to which to roll back
    rollback_index: int = betterproto.uint64_field(4)
    # 'rollback_values' is the set of values to use to roll back the proposal
    rollback_values: Dict[str, "ChangeValue"] = betterproto.map_field(
        5, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class ProposalPhases(betterproto.Message):
    # 'initialize' is the proposal initialization phase status
    initialize: "ProposalInitializePhase" = betterproto.message_field(1)
    # 'validate' is the proposal validation phase status
    validate: "ProposalValidatePhase" = betterproto.message_field(2)
    # 'commit' is the proposal commit phase status
    commit: "ProposalCommitPhase" = betterproto.message_field(3)
    # 'apply' is the proposal apply phase status
    apply: "ProposalApplyPhase" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ProposalPhaseStatus(betterproto.Message):
    start: datetime = betterproto.message_field(1)
    end: datetime = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ProposalInitializePhase(betterproto.Message):
    status: "ProposalPhaseStatus" = betterproto.message_field(1)
    state: "ProposalInitializePhaseState" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class ProposalValidatePhase(betterproto.Message):
    status: "ProposalPhaseStatus" = betterproto.message_field(1)
    state: "ProposalValidatePhaseState" = betterproto.enum_field(2)
    failure: "Failure" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ProposalCommitPhase(betterproto.Message):
    status: "ProposalPhaseStatus" = betterproto.message_field(1)
    state: "ProposalCommitPhaseState" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class ProposalApplyPhase(betterproto.Message):
    status: "ProposalPhaseStatus" = betterproto.message_field(1)
    state: "ProposalApplyPhaseState" = betterproto.enum_field(2)
    term: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class ProposalEvent(betterproto.Message):
    """ProposalEvent proposal store event"""

    type: "ProposalEventEventType" = betterproto.enum_field(1)
    proposal: "Proposal" = betterproto.message_field(2)
