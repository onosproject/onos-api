# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: onos/config/v2/types.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase


class Phase(betterproto.Enum):
    """Phase is the phase of a NetworkChange"""

    # CHANGE indicates the change has been requested
    CHANGE = 0
    # ROLLBACK indicates a rollback has been requested for the change
    ROLLBACK = 1


class State(betterproto.Enum):
    """State is the state of a phase"""

    # PENDING indicates the phase is pending
    PENDING = 0
    # COMPLETE indicates the phase is complete
    COMPLETE = 2
    # FAILED indicates the phase failed
    FAILED = 3


class Reason(betterproto.Enum):
    """Reason is a reason for a FAILED state"""

    # NONE indicates no error has occurred
    NONE = 0
    # ERROR indicates an error occurred when applying the change
    ERROR = 1


class ValueType(betterproto.Enum):
    """ValueType is the type for a value"""

    EMPTY = 0
    STRING = 1
    INT = 2
    UINT = 3
    BOOL = 4
    DECIMAL = 5
    FLOAT = 6
    BYTES = 7
    LEAFLIST_STRING = 8
    LEAFLIST_INT = 9
    LEAFLIST_UINT = 10
    LEAFLIST_BOOL = 11
    LEAFLIST_DECIMAL = 12
    LEAFLIST_FLOAT = 13
    LEAFLIST_BYTES = 14


@dataclass(eq=False, repr=False)
class Status(betterproto.Message):
    """Status is the status of a NetworkChange"""

    # 'phase' is the current phase of the
    phase: "Phase" = betterproto.enum_field(1)
    # 'state' is the state of the change within a Phase
    state: "State" = betterproto.enum_field(2)
    # 'reason' is a failure reason
    reason: "Reason" = betterproto.enum_field(3)
    # message is a result message
    message: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class TypedValue(betterproto.Message):
    """TypedValue is a value represented as a byte array"""

    # 'bytes' is the bytes array
    bytes_: bytes = betterproto.bytes_field(1)
    # 'type' is the value type
    type: "ValueType" = betterproto.enum_field(2)
    # 'type_opts' is a set of type options
    type_opts: List[int] = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class PathValue(betterproto.Message):
    """PathValue is an individual Path/Value combination"""

    # 'path' is the path to change
    path: str = betterproto.string_field(1)
    # 'value' is the change value
    value: "TypedValue" = betterproto.message_field(2)
