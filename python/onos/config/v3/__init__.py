# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: onos/config/v3/object.proto, onos/config/v3/value.proto, onos/config/v3/configuration.proto, onos/config/v3/failure.proto, onos/config/v3/transaction.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List

import betterproto


class ValueType(betterproto.Enum):
    EMPTY = 0
    STRING = 1
    INT = 2
    UINT = 3
    BOOL = 4
    DECIMAL = 5
    FLOAT = 6
    BYTES = 7
    LEAFLIST_STRING = 8
    LEAFLIST_INT = 9
    LEAFLIST_UINT = 10
    LEAFLIST_BOOL = 11
    LEAFLIST_DECIMAL = 12
    LEAFLIST_FLOAT = 13
    LEAFLIST_BYTES = 14
    DOUBLE = 15
    LEAFLIST_DOUBLE = 16


class ConfigurationStatusState(betterproto.Enum):
    UNKNOWN = 0
    SYNCHRONIZING = 1
    SYNCHRONIZED = 2
    PERSISTED = 3


class ConfigurationEventEventType(betterproto.Enum):
    UNKNOWN = 0
    CREATED = 1
    UPDATED = 2
    DELETED = 3
    REPLAYED = 4


class FailureType(betterproto.Enum):
    UNKNOWN = 0
    CANCELED = 1
    NOT_FOUND = 2
    ALREADY_EXISTS = 3
    UNAUTHORIZED = 4
    FORBIDDEN = 5
    CONFLICT = 6
    INVALID = 7
    UNAVAILABLE = 8
    NOT_SUPPORTED = 9
    TIMEOUT = 10
    INTERNAL = 11


class TransactionStrategySynchronicity(betterproto.Enum):
    ASYNCHRONOUS = 0
    SYNCHRONOUS = 1


class TransactionStatusPhase(betterproto.Enum):
    CHANGE = 0
    ROLLBACK = 1


class TransactionPhaseStatusState(betterproto.Enum):
    PENDING = 0
    IN_PROGRESS = 1
    COMPLETE = 2
    ABORTED = 3
    CANCELED = 4
    FAILED = 5


class TransactionEventEventType(betterproto.Enum):
    UNKNOWN = 0
    CREATED = 1
    UPDATED = 2
    DELETED = 3
    REPLAYED = 4


@dataclass(eq=False, repr=False)
class ObjectMeta(betterproto.Message):
    key: str = betterproto.string_field(1)
    version: int = betterproto.uint64_field(2)
    revision: int = betterproto.uint64_field(3)
    created: datetime = betterproto.message_field(4)
    updated: datetime = betterproto.message_field(5)
    deleted: datetime = betterproto.message_field(6)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Target(betterproto.Message):
    id: str = betterproto.string_field(1)
    type: str = betterproto.string_field(2)
    version: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class TargetTypeVersion(betterproto.Message):
    type: str = betterproto.string_field(1)
    version: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class TargetVersionOverrides(betterproto.Message):
    """
    TargetVersionOverrides carries optional mappings of targets to their model
    type and version overrides.
    """

    overrides: Dict[str, "TargetTypeVersion"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class TypedValue(betterproto.Message):
    bytes: bytes = betterproto.bytes_field(1)
    type: "ValueType" = betterproto.enum_field(2)
    type_opts: List[int] = betterproto.int32_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PathValues(betterproto.Message):
    values: Dict[str, "PathValue"] = betterproto.map_field(
        4, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PathValue(betterproto.Message):
    path: str = betterproto.string_field(1)
    value: "TypedValue" = betterproto.message_field(2)
    deleted: bool = betterproto.bool_field(3)
    index: int = betterproto.uint64_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ConfigurationId(betterproto.Message):
    target: "Target" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Configuration(betterproto.Message):
    meta: "ObjectMeta" = betterproto.message_field(1)
    id: "ConfigurationId" = betterproto.message_field(2)
    committed: "CommittedConfiguration" = betterproto.message_field(3)
    applied: "AppliedConfiguration" = betterproto.message_field(4)
    status: "ConfigurationStatus" = betterproto.message_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ConfigurationStatus(betterproto.Message):
    state: "ConfigurationStatusState" = betterproto.enum_field(1)
    mastership: "MastershipStatus" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MastershipStatus(betterproto.Message):
    """
    TargetVersionOverrides carries optional mappings of targets to their model
    type and version overrides.
    """

    master: str = betterproto.string_field(2)
    term: int = betterproto.uint64_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CommittedConfiguration(betterproto.Message):
    index: int = betterproto.uint64_field(1)
    ordinal: int = betterproto.uint64_field(2)
    revision: int = betterproto.uint64_field(3)
    target: int = betterproto.uint64_field(4)
    change: int = betterproto.uint64_field(5)
    values: Dict[str, "PathValue"] = betterproto.map_field(
        6, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AppliedConfiguration(betterproto.Message):
    index: int = betterproto.uint64_field(1)
    ordinal: int = betterproto.uint64_field(2)
    revision: int = betterproto.uint64_field(3)
    target: int = betterproto.uint64_field(4)
    term: int = betterproto.uint64_field(5)
    values: Dict[str, "PathValue"] = betterproto.map_field(
        6, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ConfigurationEvent(betterproto.Message):
    type: "ConfigurationEventEventType" = betterproto.enum_field(1)
    configuration: "Configuration" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Failure(betterproto.Message):
    type: "FailureType" = betterproto.enum_field(1)
    description: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class TransactionId(betterproto.Message):
    target: "Target" = betterproto.message_field(1)
    index: int = betterproto.uint64_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class TransactionStrategy(betterproto.Message):
    synchronicity: "TransactionStrategySynchronicity" = betterproto.enum_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Transaction(betterproto.Message):
    meta: "ObjectMeta" = betterproto.message_field(1)
    id: "TransactionId" = betterproto.message_field(2)
    values: Dict[str, "PathValue"] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    status: "TransactionStatus" = betterproto.message_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class TransactionStatus(betterproto.Message):
    """
    TargetVersionOverrides carries optional mappings of targets to their model
    type and version overrides.
    """

    phase: "TransactionStatusPhase" = betterproto.enum_field(1)
    change: "TransactionChangeStatus" = betterproto.message_field(2)
    rollback: "TransactionRollbackStatus" = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class TransactionPhaseStatus(betterproto.Message):
    start: datetime = betterproto.message_field(1)
    end: datetime = betterproto.message_field(2)
    state: "TransactionPhaseStatusState" = betterproto.enum_field(3)
    failure: "Failure" = betterproto.message_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class TransactionChangeStatus(betterproto.Message):
    ordinal: int = betterproto.uint64_field(1)
    commit: "TransactionPhaseStatus" = betterproto.message_field(2)
    apply: "TransactionPhaseStatus" = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class TransactionRollbackStatus(betterproto.Message):
    ordinal: int = betterproto.uint64_field(1)
    commit: "TransactionPhaseStatus" = betterproto.message_field(2)
    apply: "TransactionPhaseStatus" = betterproto.message_field(3)
    index: int = betterproto.uint64_field(4)
    values: Dict[str, "PathValue"] = betterproto.map_field(
        5, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class TransactionEvent(betterproto.Message):
    type: "TransactionEventEventType" = betterproto.enum_field(1)
    transaction: "Transaction" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()
