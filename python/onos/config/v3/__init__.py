# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: onos/config/v3/value.proto, onos/config/v3/object.proto, onos/config/v3/failure.proto, onos/config/v3/transaction.proto, onos/config/v3/configuration.proto, onos/config/v3/admin.proto
# plugin: python-betterproto
import warnings
from dataclasses import dataclass
from datetime import datetime
from typing import AsyncIterable, AsyncIterator, Dict, Iterable, List, Optional, Union

import betterproto
import grpclib


class ValueType(betterproto.Enum):
    """ValueType is the type for a value"""

    EMPTY = 0
    STRING = 1
    INT = 2
    UINT = 3
    BOOL = 4
    DECIMAL = 5
    FLOAT = 6
    BYTES = 7
    LEAFLIST_STRING = 8
    LEAFLIST_INT = 9
    LEAFLIST_UINT = 10
    LEAFLIST_BOOL = 11
    LEAFLIST_DECIMAL = 12
    LEAFLIST_FLOAT = 13
    LEAFLIST_BYTES = 14
    DOUBLE = 15
    LEAFLIST_DOUBLE = 16


class FailureType(betterproto.Enum):
    UNKNOWN = 0
    CANCELED = 1
    NOT_FOUND = 2
    ALREADY_EXISTS = 3
    UNAUTHORIZED = 4
    FORBIDDEN = 5
    CONFLICT = 6
    INVALID = 7
    UNAVAILABLE = 8
    NOT_SUPPORTED = 9
    TIMEOUT = 10
    INTERNAL = 11


class TransactionStrategySynchronicity(betterproto.Enum):
    ASYNCHRONOUS = 0
    SYNCHRONOUS = 1


class TransactionStatusPhase(betterproto.Enum):
    CHANGE = 0
    ROLLBACK = 1


class TransactionPhaseStatusState(betterproto.Enum):
    PENDING = 0
    IN_PROGRESS = 1
    COMPLETE = 2
    ABORTED = 3
    CANCELED = 4
    FAILED = 5


class TransactionEventEventType(betterproto.Enum):
    UNKNOWN = 0
    CREATED = 1
    UPDATED = 2
    DELETED = 3
    REPLAYED = 4


class ConfigurationStatusState(betterproto.Enum):
    UNKNOWN = 0
    SYNCHRONIZING = 1
    SYNCHRONIZED = 2
    PERSISTED = 3


class ConfigurationEventEventType(betterproto.Enum):
    UNKNOWN = 0
    CREATED = 1
    UPDATED = 2
    DELETED = 3
    REPLAYED = 4


@dataclass(eq=False, repr=False)
class TypedValue(betterproto.Message):
    """TypedValue is a value represented as a byte array"""

    # 'bytes' is the bytes array
    bytes: bytes = betterproto.bytes_field(1)
    # 'type' is the value type
    type: "ValueType" = betterproto.enum_field(2)
    # 'type_opts' is a set of type options
    type_opts: List[int] = betterproto.int32_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PathValues(betterproto.Message):
    """PathValues is a set of path/value pairs"""

    # 'values' is a set of change values to apply
    values: Dict[str, "PathValue"] = betterproto.map_field(
        4, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PathValue(betterproto.Message):
    """PathValue is the state of a path/value in the configuration tree"""

    # 'path' is the path to change
    path: str = betterproto.string_field(1)
    # 'value' is the change value
    value: "TypedValue" = betterproto.message_field(2)
    # 'deleted' indicates whether this is a delete
    deleted: bool = betterproto.bool_field(3)
    # index transaction index
    index: int = betterproto.uint64_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ObjectMeta(betterproto.Message):
    """TypedValue is a value represented as a byte array"""

    # 'bytes' is the bytes array
    key: str = betterproto.string_field(1)
    # 'type' is the value type
    version: int = betterproto.uint64_field(2)
    # 'type_opts' is a set of type options
    revision: int = betterproto.uint64_field(3)
    created: datetime = betterproto.message_field(4)
    updated: datetime = betterproto.message_field(5)
    deleted: datetime = betterproto.message_field(6)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Target(betterproto.Message):
    """PathValues is a set of path/value pairs"""

    # 'values' is a set of change values to apply
    id: str = betterproto.string_field(1)
    type: str = betterproto.string_field(2)
    version: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Failure(betterproto.Message):
    """TypedValue is a value represented as a byte array"""

    # 'bytes' is the bytes array
    type: "FailureType" = betterproto.enum_field(1)
    # 'type' is the value type
    description: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class TransactionId(betterproto.Message):
    """TypedValue is a value represented as a byte array"""

    # 'bytes' is the bytes array
    target: "Target" = betterproto.message_field(1)
    # 'type' is the value type
    index: int = betterproto.uint64_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class TransactionStrategy(betterproto.Message):
    """PathValues is a set of path/value pairs"""

    # 'values' is a set of change values to apply
    synchronicity: "TransactionStrategySynchronicity" = betterproto.enum_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Transaction(betterproto.Message):
    """PathValue is the state of a path/value in the configuration tree"""

    # 'path' is the path to change
    meta: "ObjectMeta" = betterproto.message_field(1)
    # 'value' is the change value
    id: "TransactionId" = betterproto.message_field(2)
    # 'deleted' indicates whether this is a delete
    values: Dict[str, "PathValue"] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    # index transaction index
    status: "TransactionStatus" = betterproto.message_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class TransactionStatus(betterproto.Message):
    phase: "TransactionStatusPhase" = betterproto.enum_field(1)
    change: "TransactionChangeStatus" = betterproto.message_field(2)
    rollback: "TransactionRollbackStatus" = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class TransactionPhaseStatus(betterproto.Message):
    start: datetime = betterproto.message_field(1)
    end: datetime = betterproto.message_field(2)
    state: "TransactionPhaseStatusState" = betterproto.enum_field(3)
    failure: "Failure" = betterproto.message_field(4)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class TransactionChangeStatus(betterproto.Message):
    ordinal: int = betterproto.uint64_field(1)
    commit: "TransactionPhaseStatus" = betterproto.message_field(2)
    apply: "TransactionPhaseStatus" = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class TransactionRollbackStatus(betterproto.Message):
    ordinal: int = betterproto.uint64_field(1)
    commit: "TransactionPhaseStatus" = betterproto.message_field(2)
    apply: "TransactionPhaseStatus" = betterproto.message_field(3)
    index: int = betterproto.uint64_field(4)
    values: Dict[str, "PathValue"] = betterproto.map_field(
        5, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class TransactionEvent(betterproto.Message):
    type: "TransactionEventEventType" = betterproto.enum_field(1)
    transaction: "Transaction" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ConfigurationId(betterproto.Message):
    """TypedValue is a value represented as a byte array"""

    # 'bytes' is the bytes array
    target: "Target" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Configuration(betterproto.Message):
    """PathValues is a set of path/value pairs"""

    # 'values' is a set of change values to apply
    meta: "ObjectMeta" = betterproto.message_field(1)
    id: "ConfigurationId" = betterproto.message_field(2)
    committed: "CommittedConfiguration" = betterproto.message_field(3)
    applied: "AppliedConfiguration" = betterproto.message_field(4)
    status: "ConfigurationStatus" = betterproto.message_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ConfigurationStatus(betterproto.Message):
    """PathValue is the state of a path/value in the configuration tree"""

    # 'path' is the path to change
    state: "ConfigurationStatusState" = betterproto.enum_field(1)
    # 'value' is the change value
    mastership: "MastershipStatus" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MastershipStatus(betterproto.Message):
    master: str = betterproto.string_field(2)
    term: int = betterproto.uint64_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CommittedConfiguration(betterproto.Message):
    index: int = betterproto.uint64_field(1)
    ordinal: int = betterproto.uint64_field(2)
    revision: int = betterproto.uint64_field(3)
    target: int = betterproto.uint64_field(4)
    change: int = betterproto.uint64_field(5)
    values: Dict[str, "PathValue"] = betterproto.map_field(
        6, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AppliedConfiguration(betterproto.Message):
    index: int = betterproto.uint64_field(1)
    ordinal: int = betterproto.uint64_field(2)
    revision: int = betterproto.uint64_field(3)
    target: int = betterproto.uint64_field(4)
    term: int = betterproto.uint64_field(5)
    values: Dict[str, "PathValue"] = betterproto.map_field(
        6, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ConfigurationEvent(betterproto.Message):
    type: "ConfigurationEventEventType" = betterproto.enum_field(1)
    configuration: "Configuration" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ReadOnlySubPath(betterproto.Message):
    """TypedValue is a value represented as a byte array"""

    # 'bytes' is the bytes array
    sub_path: str = betterproto.string_field(1)
    # 'type' is the value type
    value_type: "ValueType" = betterproto.enum_field(2)
    # 'type_opts' is a set of type options
    type_opts: List[int] = betterproto.uint64_field(3)
    description: str = betterproto.string_field(4)
    units: str = betterproto.string_field(5)
    is_a_key: bool = betterproto.bool_field(6)
    attr_name: str = betterproto.string_field(7)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ReadOnlyPath(betterproto.Message):
    """PathValues is a set of path/value pairs"""

    # 'values' is a set of change values to apply
    path: str = betterproto.string_field(1)
    sub_path: List["ReadOnlySubPath"] = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ReadWritePath(betterproto.Message):
    """PathValue is the state of a path/value in the configuration tree"""

    # 'path' is the path to change
    path: str = betterproto.string_field(1)
    # 'value' is the change value
    value_type: "ValueType" = betterproto.enum_field(2)
    # 'deleted' indicates whether this is a delete
    units: str = betterproto.string_field(3)
    # index transaction index
    description: str = betterproto.string_field(4)
    mandatory: bool = betterproto.bool_field(5)
    default: str = betterproto.string_field(6)
    range: List[str] = betterproto.string_field(7)
    length: List[str] = betterproto.string_field(8)
    type_opts: List[int] = betterproto.uint64_field(9)
    is_a_key: bool = betterproto.bool_field(10)
    attr_name: str = betterproto.string_field(11)
    defaults: List[str] = betterproto.string_field(12)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.default:
            warnings.warn("ReadWritePath.default is deprecated", DeprecationWarning)


@dataclass(eq=False, repr=False)
class Namespace(betterproto.Message):
    module: str = betterproto.string_field(1)
    prefix: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ModelInfo(betterproto.Message):
    name: str = betterproto.string_field(1)
    version: str = betterproto.string_field(2)
    model_data: List["___gnmi__.ModelData"] = betterproto.message_field(3)
    module: str = betterproto.string_field(4)
    get_state_mode: int = betterproto.uint32_field(5)
    read_only_path: List["ReadOnlyPath"] = betterproto.message_field(7)
    read_write_path: List["ReadWritePath"] = betterproto.message_field(8)
    supported_encodings: List["___gnmi__.Encoding"] = betterproto.enum_field(9)
    namespace_mappings: List["Namespace"] = betterproto.message_field(10)
    southbound_use_prefix: bool = betterproto.bool_field(11)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.module:
            warnings.warn("ModelInfo.module is deprecated", DeprecationWarning)


@dataclass(eq=False, repr=False)
class ModelPlugin(betterproto.Message):
    id: str = betterproto.string_field(1)
    endpoint: str = betterproto.string_field(2)
    info: "ModelInfo" = betterproto.message_field(3)
    status: str = betterproto.string_field(10)
    error: str = betterproto.string_field(11)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListModelsRequest(betterproto.Message):
    verbose: bool = betterproto.bool_field(1)
    model_name: str = betterproto.string_field(2)
    model_version: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RollbackRequest(betterproto.Message):
    transaction_id: "TransactionId" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RollbackResponse(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LeafSelectionQueryRequest(betterproto.Message):
    target: str = betterproto.string_field(1)
    type: str = betterproto.string_field(2)
    version: str = betterproto.string_field(3)
    selection_path: str = betterproto.string_field(4)
    change_context: "___gnmi__.SetRequest" = betterproto.message_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LeafSelectionQueryResponse(betterproto.Message):
    selection: List[str] = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ModelInfoRequest(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ModelInfoResponse(betterproto.Message):
    model_info: "ModelInfo" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ValidateConfigRequest(betterproto.Message):
    json: bytes = betterproto.bytes_field(1)

    def __post_init__(self) -> None:
        warnings.warn("ValidateConfigRequest is deprecated", DeprecationWarning)
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ValidateConfigRequestChunk(betterproto.Message):
    json: bytes = betterproto.bytes_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ValidateConfigChunkRequest(betterproto.Message):
    json: bytes = betterproto.bytes_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ValidateConfigResponse(betterproto.Message):
    valid: bool = betterproto.bool_field(1)
    message: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PathValuesRequest(betterproto.Message):
    path_prefix: str = betterproto.string_field(1)
    json: bytes = betterproto.bytes_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PathValuesResponse(betterproto.Message):
    path_values: List["PathValue"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ValueSelectionRequest(betterproto.Message):
    selection_path: str = betterproto.string_field(1)
    config_json: bytes = betterproto.bytes_field(2)

    def __post_init__(self) -> None:
        warnings.warn("ValueSelectionRequest is deprecated", DeprecationWarning)
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ValueSelectionRequestChunk(betterproto.Message):
    selection_path: str = betterproto.string_field(1)
    config_json: bytes = betterproto.bytes_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ValueSelectionResponse(betterproto.Message):
    selection: List[str] = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetTransactionRequest(betterproto.Message):
    id: "TransactionId" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetTransactionResponse(betterproto.Message):
    transaction: "Transaction" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListTransactionsRequest(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListTransactionsResponse(betterproto.Message):
    transaction: "Transaction" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class WatchTransactionsRequest(betterproto.Message):
    transaction_id: "TransactionId" = betterproto.message_field(1)
    noreplay: bool = betterproto.bool_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class WatchTransactionsResponse(betterproto.Message):
    event: "TransactionEvent" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetConfigurationRequest(betterproto.Message):
    configuration_id: "ConfigurationId" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetConfigurationResponse(betterproto.Message):
    configuration: "Configuration" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListConfigurationsRequest(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListConfigurationsResponse(betterproto.Message):
    configuration: "Configuration" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class WatchConfigurationsRequest(betterproto.Message):
    configuration_id: "ConfigurationId" = betterproto.message_field(1)
    noreplay: bool = betterproto.bool_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class WatchConfigurationsResponse(betterproto.Message):
    event: "ConfigurationEvent" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


class ConfigAdminServiceStub(betterproto.ServiceStub):
    async def list_registered_models(
        self, *, verbose: bool = False, model_name: str = "", model_version: str = ""
    ) -> AsyncIterator["ModelPlugin"]:

        request = ListModelsRequest()
        request.verbose = verbose
        request.model_name = model_name
        request.model_version = model_version

        async for response in self._unary_stream(
            "/onos.config.v3.ConfigAdminService/ListRegisteredModels",
            request,
            ModelPlugin,
        ):
            yield response

    async def rollback_transaction(
        self, *, transaction_id: "TransactionId" = None
    ) -> "RollbackResponse":

        request = RollbackRequest()
        if transaction_id is not None:
            request.transaction_id = transaction_id

        return await self._unary_unary(
            "/onos.config.v3.ConfigAdminService/RollbackTransaction",
            request,
            RollbackResponse,
        )

    async def leaf_selection_query(
        self,
        *,
        target: str = "",
        type: str = "",
        version: str = "",
        selection_path: str = "",
        change_context: "___gnmi__.SetRequest" = None,
    ) -> "LeafSelectionQueryResponse":

        request = LeafSelectionQueryRequest()
        request.target = target
        request.type = type
        request.version = version
        request.selection_path = selection_path
        if change_context is not None:
            request.change_context = change_context

        return await self._unary_unary(
            "/onos.config.v3.ConfigAdminService/LeafSelectionQuery",
            request,
            LeafSelectionQueryResponse,
        )


class ModelPluginServiceStub(betterproto.ServiceStub):
    async def get_model_info(self) -> "ModelInfoResponse":

        request = ModelInfoRequest()

        return await self._unary_unary(
            "/onos.config.v3.ModelPluginService/GetModelInfo",
            request,
            ModelInfoResponse,
        )

    async def validate_config(self, *, json: bytes = b"") -> "ValidateConfigResponse":

        request = ValidateConfigRequest()
        request.json = json

        return await self._unary_unary(
            "/onos.config.v3.ModelPluginService/ValidateConfig",
            request,
            ValidateConfigResponse,
        )

    async def validate_config_chunked(
        self,
        request_iterator: Union[
            AsyncIterable["ValidateConfigRequestChunk"],
            Iterable["ValidateConfigRequestChunk"],
        ],
    ) -> "ValidateConfigResponse":

        return await self._stream_unary(
            "/onos.config.v3.ModelPluginService/ValidateConfigChunked",
            request_iterator,
            ValidateConfigRequestChunk,
            ValidateConfigResponse,
        )

    async def get_path_values(
        self, *, path_prefix: str = "", json: bytes = b""
    ) -> "PathValuesResponse":

        request = PathValuesRequest()
        request.path_prefix = path_prefix
        request.json = json

        return await self._unary_unary(
            "/onos.config.v3.ModelPluginService/GetPathValues",
            request,
            PathValuesResponse,
        )

    async def get_value_selection(
        self, *, selection_path: str = "", config_json: bytes = b""
    ) -> "ValueSelectionResponse":

        request = ValueSelectionRequest()
        request.selection_path = selection_path
        request.config_json = config_json

        return await self._unary_unary(
            "/onos.config.v3.ModelPluginService/GetValueSelection",
            request,
            ValueSelectionResponse,
        )

    async def get_value_selection_chunked(
        self,
        request_iterator: Union[
            AsyncIterable["ValueSelectionRequestChunk"],
            Iterable["ValueSelectionRequestChunk"],
        ],
    ) -> "ValueSelectionResponse":

        return await self._stream_unary(
            "/onos.config.v3.ModelPluginService/GetValueSelectionChunked",
            request_iterator,
            ValueSelectionRequestChunk,
            ValueSelectionResponse,
        )


class TransactionServiceStub(betterproto.ServiceStub):
    async def get_transaction(
        self, *, id: "TransactionId" = None
    ) -> "GetTransactionResponse":

        request = GetTransactionRequest()
        if id is not None:
            request.id = id

        return await self._unary_unary(
            "/onos.config.v3.TransactionService/GetTransaction",
            request,
            GetTransactionResponse,
        )

    async def list_transactions(self) -> AsyncIterator["ListTransactionsResponse"]:

        request = ListTransactionsRequest()

        async for response in self._unary_stream(
            "/onos.config.v3.TransactionService/ListTransactions",
            request,
            ListTransactionsResponse,
        ):
            yield response

    async def watch_transactions(
        self, *, transaction_id: "TransactionId" = None, noreplay: bool = False
    ) -> AsyncIterator["WatchTransactionsResponse"]:

        request = WatchTransactionsRequest()
        if transaction_id is not None:
            request.transaction_id = transaction_id
        request.noreplay = noreplay

        async for response in self._unary_stream(
            "/onos.config.v3.TransactionService/WatchTransactions",
            request,
            WatchTransactionsResponse,
        ):
            yield response


class ConfigurationServiceStub(betterproto.ServiceStub):
    async def get_configuration(
        self, *, configuration_id: "ConfigurationId" = None
    ) -> "GetConfigurationResponse":

        request = GetConfigurationRequest()
        if configuration_id is not None:
            request.configuration_id = configuration_id

        return await self._unary_unary(
            "/onos.config.v3.ConfigurationService/GetConfiguration",
            request,
            GetConfigurationResponse,
        )

    async def list_configurations(self) -> AsyncIterator["ListConfigurationsResponse"]:

        request = ListConfigurationsRequest()

        async for response in self._unary_stream(
            "/onos.config.v3.ConfigurationService/ListConfigurations",
            request,
            ListConfigurationsResponse,
        ):
            yield response

    async def watch_configurations(
        self, *, configuration_id: "ConfigurationId" = None, noreplay: bool = False
    ) -> AsyncIterator["WatchConfigurationsResponse"]:

        request = WatchConfigurationsRequest()
        if configuration_id is not None:
            request.configuration_id = configuration_id
        request.noreplay = noreplay

        async for response in self._unary_stream(
            "/onos.config.v3.ConfigurationService/WatchConfigurations",
            request,
            WatchConfigurationsResponse,
        ):
            yield response


from .... import gnmi as ___gnmi__
