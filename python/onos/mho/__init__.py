# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: onos/mho/mho.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class GetRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class UeList(betterproto.Message):
    ues: List["Ue"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CellList(betterproto.Message):
    cells: List["Cell"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Ue(betterproto.Message):
    ue_id: str = betterproto.string_field(1)
    rrc_state: str = betterproto.string_field(2)
    cgi: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class Cell(betterproto.Message):
    cgi: str = betterproto.string_field(1)
    num_ues: int = betterproto.int64_field(2)
    cumulative_handovers_in: int = betterproto.int64_field(4)
    cumulative_handovers_out: int = betterproto.int64_field(5)


class MhoStub(betterproto.ServiceStub):
    async def get_ues(self) -> "UeList":

        request = GetRequest()

        return await self._unary_unary("/onos.mho.mho/GetUes", request, UeList)

    async def get_cells(self) -> "CellList":

        request = GetRequest()

        return await self._unary_unary("/onos.mho.mho/GetCells", request, CellList)


class MhoBase(ServiceBase):
    async def get_ues(self) -> "UeList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_cells(self) -> "CellList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_ues(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.get_ues(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_cells(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.get_cells(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/onos.mho.mho/GetUes": grpclib.const.Handler(
                self.__rpc_get_ues,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRequest,
                UeList,
            ),
            "/onos.mho.mho/GetCells": grpclib.const.Handler(
                self.__rpc_get_cells,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRequest,
                CellList,
            ),
        }
