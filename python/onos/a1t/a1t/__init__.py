# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: onos/a1t/a1t.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterator, Dict, List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


class Encoding(betterproto.Enum):
    PROTO = 0
    JSON = 1


class ObjectType(betterproto.Enum):
    UNSPECIFIED = 0
    POLICY = 1
    EIJOB = 2
    SUBSCRIPTION = 3


class SubscriptionType(betterproto.Enum):
    POLICY = 0
    EIJOB = 1


@dataclass(eq=False, repr=False)
class CreateRequest(betterproto.Message):
    object: "Object" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateResponse(betterproto.Message):
    object: "Object" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetRequest(betterproto.Message):
    object: "Object" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetResponse(betterproto.Message):
    object: "Object" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListResponse(betterproto.Message):
    objects: List["Object"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UpdateRequest(betterproto.Message):
    object: "Object" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UpdateResponse(betterproto.Message):
    object: "Object" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DeleteRequest(betterproto.Message):
    object: "Object" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DeleteResponse(betterproto.Message):
    object: "Object" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Object(betterproto.Message):
    type: "ObjectType" = betterproto.enum_field(1)
    policy: "Policy" = betterproto.message_field(2, group="obj")
    eijob: "EiJob" = betterproto.message_field(3, group="obj")
    subscription: "Subscription" = betterproto.message_field(4, group="obj")


@dataclass(eq=False, repr=False)
class Policy(betterproto.Message):
    id: str = betterproto.string_field(1)
    typeid: str = betterproto.string_field(2)
    object: bytes = betterproto.bytes_field(3)
    status: "Status" = betterproto.message_field(4)
    encoding: "Encoding" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class EiJob(betterproto.Message):
    id: str = betterproto.string_field(1)
    typeid: str = betterproto.string_field(2)
    object: bytes = betterproto.bytes_field(3)
    status: "Status" = betterproto.message_field(4)
    encoding: "Encoding" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class Status(betterproto.Message):
    ok: bool = betterproto.bool_field(1)
    problem: "StatusProblem" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class StatusProblem(betterproto.Message):
    detail: str = betterproto.string_field(1)
    instance: str = betterproto.string_field(2)
    status: str = betterproto.string_field(3)
    title: str = betterproto.string_field(4)
    type: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class Subscription(betterproto.Message):
    id: str = betterproto.string_field(1)
    type: "SubscriptionType" = betterproto.enum_field(2)
    address: str = betterproto.string_field(3)


class A1TServiceStub(betterproto.ServiceStub):
    async def create(self, *, object: "Object" = None) -> "CreateResponse":

        request = CreateRequest()
        if object is not None:
            request.object = object

        return await self._unary_unary(
            "/onos.a1t.a1t.A1TService/Create", request, CreateResponse
        )

    async def get(self, *, object: "Object" = None) -> "GetResponse":

        request = GetRequest()
        if object is not None:
            request.object = object

        return await self._unary_unary(
            "/onos.a1t.a1t.A1TService/Get", request, GetResponse
        )

    async def update(self, *, object: "Object" = None) -> "UpdateResponse":

        request = UpdateRequest()
        if object is not None:
            request.object = object

        return await self._unary_unary(
            "/onos.a1t.a1t.A1TService/Update", request, UpdateResponse
        )

    async def delete(self, *, object: "Object" = None) -> "DeleteResponse":

        request = DeleteRequest()
        if object is not None:
            request.object = object

        return await self._unary_unary(
            "/onos.a1t.a1t.A1TService/Delete", request, DeleteResponse
        )

    async def list(self, *, object: "Object" = None) -> "ListResponse":

        request = GetRequest()
        if object is not None:
            request.object = object

        return await self._unary_unary(
            "/onos.a1t.a1t.A1TService/List", request, ListResponse
        )

    async def watch(self, *, object: "Object" = None) -> AsyncIterator["GetResponse"]:

        request = GetRequest()
        if object is not None:
            request.object = object

        async for response in self._unary_stream(
            "/onos.a1t.a1t.A1TService/Watch",
            request,
            GetResponse,
        ):
            yield response


class A1TServiceBase(ServiceBase):
    async def create(self, object: "Object") -> "CreateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get(self, object: "Object") -> "GetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update(self, object: "Object") -> "UpdateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete(self, object: "Object") -> "DeleteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list(self, object: "Object") -> "ListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def watch(self, object: "Object") -> AsyncIterator["GetResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "object": request.object,
        }

        response = await self.create(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "object": request.object,
        }

        response = await self.get(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_update(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "object": request.object,
        }

        response = await self.update(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_delete(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "object": request.object,
        }

        response = await self.delete(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_list(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "object": request.object,
        }

        response = await self.list(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_watch(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "object": request.object,
        }

        await self._call_rpc_handler_server_stream(
            self.watch,
            stream,
            request_kwargs,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/onos.a1t.a1t.A1TService/Create": grpclib.const.Handler(
                self.__rpc_create,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateRequest,
                CreateResponse,
            ),
            "/onos.a1t.a1t.A1TService/Get": grpclib.const.Handler(
                self.__rpc_get,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRequest,
                GetResponse,
            ),
            "/onos.a1t.a1t.A1TService/Update": grpclib.const.Handler(
                self.__rpc_update,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateRequest,
                UpdateResponse,
            ),
            "/onos.a1t.a1t.A1TService/Delete": grpclib.const.Handler(
                self.__rpc_delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteRequest,
                DeleteResponse,
            ),
            "/onos.a1t.a1t.A1TService/List": grpclib.const.Handler(
                self.__rpc_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRequest,
                ListResponse,
            ),
            "/onos.a1t.a1t.A1TService/Watch": grpclib.const.Handler(
                self.__rpc_watch,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetRequest,
                GetResponse,
            ),
        }
