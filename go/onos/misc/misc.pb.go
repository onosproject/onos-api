// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/misc/misc.proto

package misc

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GridPosition indicates where on a grid an entity should be located; used for visualization purposes
type GridPosition struct {
	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *GridPosition) Reset()         { *m = GridPosition{} }
func (m *GridPosition) String() string { return proto.CompactTextString(m) }
func (*GridPosition) ProtoMessage()    {}
func (*GridPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea61f6686f6b957c, []int{0}
}
func (m *GridPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GridPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GridPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GridPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GridPosition.Merge(m, src)
}
func (m *GridPosition) XXX_Size() int {
	return m.Size()
}
func (m *GridPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_GridPosition.DiscardUnknown(m)
}

var xxx_messageInfo_GridPosition proto.InternalMessageInfo

func (m *GridPosition) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *GridPosition) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

// Connection contains information about a single gRPC client connection
type Connection struct {
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	Protocol    string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Time        int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *Connection) Reset()         { *m = Connection{} }
func (m *Connection) String() string { return proto.CompactTextString(m) }
func (*Connection) ProtoMessage()    {}
func (*Connection) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea61f6686f6b957c, []int{1}
}
func (m *Connection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Connection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Connection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Connection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Connection.Merge(m, src)
}
func (m *Connection) XXX_Size() int {
	return m.Size()
}
func (m *Connection) XXX_DiscardUnknown() {
	xxx_messageInfo_Connection.DiscardUnknown(m)
}

var xxx_messageInfo_Connection proto.InternalMessageInfo

func (m *Connection) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *Connection) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *Connection) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

// IOStats represents I/O statistics for a single device agent
type IOStats struct {
	InBytes         uint32 `protobuf:"varint,1,opt,name=in_bytes,json=inBytes,proto3" json:"in_bytes,omitempty"`
	InMessages      uint32 `protobuf:"varint,2,opt,name=in_messages,json=inMessages,proto3" json:"in_messages,omitempty"`
	OutBytes        uint32 `protobuf:"varint,3,opt,name=out_bytes,json=outBytes,proto3" json:"out_bytes,omitempty"`
	OutMessages     uint32 `protobuf:"varint,4,opt,name=out_messages,json=outMessages,proto3" json:"out_messages,omitempty"`
	FirstUpdateTime uint64 `protobuf:"varint,5,opt,name=first_update_time,json=firstUpdateTime,proto3" json:"first_update_time,omitempty"`
	LastUpdateTime  uint64 `protobuf:"varint,6,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
}

func (m *IOStats) Reset()         { *m = IOStats{} }
func (m *IOStats) String() string { return proto.CompactTextString(m) }
func (*IOStats) ProtoMessage()    {}
func (*IOStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea61f6686f6b957c, []int{2}
}
func (m *IOStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IOStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IOStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IOStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IOStats.Merge(m, src)
}
func (m *IOStats) XXX_Size() int {
	return m.Size()
}
func (m *IOStats) XXX_DiscardUnknown() {
	xxx_messageInfo_IOStats.DiscardUnknown(m)
}

var xxx_messageInfo_IOStats proto.InternalMessageInfo

func (m *IOStats) GetInBytes() uint32 {
	if m != nil {
		return m.InBytes
	}
	return 0
}

func (m *IOStats) GetInMessages() uint32 {
	if m != nil {
		return m.InMessages
	}
	return 0
}

func (m *IOStats) GetOutBytes() uint32 {
	if m != nil {
		return m.OutBytes
	}
	return 0
}

func (m *IOStats) GetOutMessages() uint32 {
	if m != nil {
		return m.OutMessages
	}
	return 0
}

func (m *IOStats) GetFirstUpdateTime() uint64 {
	if m != nil {
		return m.FirstUpdateTime
	}
	return 0
}

func (m *IOStats) GetLastUpdateTime() uint64 {
	if m != nil {
		return m.LastUpdateTime
	}
	return 0
}

func init() {
	proto.RegisterType((*GridPosition)(nil), "onos.misc.GridPosition")
	proto.RegisterType((*Connection)(nil), "onos.misc.Connection")
	proto.RegisterType((*IOStats)(nil), "onos.misc.IOStats")
}

func init() { proto.RegisterFile("onos/misc/misc.proto", fileDescriptor_ea61f6686f6b957c) }

var fileDescriptor_ea61f6686f6b957c = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0xeb, 0xaf, 0xbf, 0x39, 0x4d, 0x3f, 0xc0, 0x62, 0x08, 0x20, 0x85, 0xb6, 0x53, 0xd4,
	0xa1, 0x0c, 0x5c, 0x01, 0x65, 0x40, 0x0c, 0x08, 0x64, 0x60, 0xb6, 0xd2, 0xc6, 0x45, 0x96, 0x1a,
	0x9f, 0x2a, 0x76, 0xa4, 0xf6, 0x2e, 0xb8, 0x2c, 0xc6, 0x8e, 0x48, 0x2c, 0xa8, 0xbd, 0x11, 0xe4,
	0x93, 0xaa, 0x48, 0x2c, 0x51, 0xde, 0xe7, 0xfd, 0xb1, 0x65, 0x38, 0x45, 0x83, 0xf6, 0x2a, 0xd7,
	0x76, 0x46, 0x9f, 0xf1, 0xb2, 0x40, 0x87, 0x3c, 0xf0, 0x74, 0xec, 0xc1, 0x70, 0x04, 0xe1, 0x5d,
	0xa1, 0xb3, 0x27, 0xb4, 0xda, 0x69, 0x34, 0x3c, 0x04, 0xb6, 0x8a, 0x58, 0x9f, 0x25, 0x4d, 0xc1,
	0x56, 0x5e, 0xad, 0xa3, 0x7f, 0x95, 0x5a, 0x0f, 0x25, 0xc0, 0x2d, 0x1a, 0xa3, 0x66, 0x94, 0x1c,
	0x40, 0x38, 0x2f, 0x30, 0x97, 0x69, 0x96, 0x15, 0xca, 0x5a, 0x2a, 0x05, 0xa2, 0xeb, 0xd9, 0x4d,
	0x85, 0xf8, 0x39, 0x74, 0xe8, 0xc0, 0x19, 0x2e, 0x68, 0x25, 0x10, 0x07, 0xcd, 0x39, 0x34, 0x9c,
	0xce, 0x55, 0x54, 0xef, 0xb3, 0xa4, 0x2e, 0xe8, 0x7f, 0xf8, 0xc5, 0xa0, 0x7d, 0xff, 0xf8, 0xec,
	0x52, 0x67, 0xf9, 0x19, 0x74, 0xb4, 0x91, 0xd3, 0xb5, 0x53, 0xd5, 0x74, 0x4f, 0xb4, 0xb5, 0x99,
	0x78, 0xc9, 0x2f, 0xa1, 0xab, 0x8d, 0xcc, 0x95, 0xb5, 0xe9, 0x9b, 0xb2, 0xb4, 0xdc, 0x13, 0xa0,
	0xcd, 0xc3, 0x9e, 0xf0, 0x0b, 0x08, 0xb0, 0x74, 0xfb, 0x72, 0x9d, 0xec, 0x0e, 0x96, 0xae, 0x6a,
	0x0f, 0x20, 0xf4, 0xe6, 0xa1, 0xde, 0x20, 0xbf, 0x8b, 0xa5, 0x3b, 0xf4, 0x47, 0x70, 0x32, 0xd7,
	0x85, 0x75, 0xb2, 0x5c, 0x66, 0xa9, 0x53, 0x92, 0x2e, 0xda, 0xec, 0xb3, 0xa4, 0x21, 0x8e, 0xc8,
	0x78, 0x25, 0xfe, 0xa2, 0x73, 0xc5, 0x13, 0x38, 0x5e, 0xa4, 0x7f, 0xa2, 0x2d, 0x8a, 0xfe, 0xf7,
	0xfc, 0x37, 0x39, 0x89, 0x3e, 0xb6, 0x31, 0xdb, 0x6c, 0x63, 0xf6, 0xbd, 0x8d, 0xd9, 0xfb, 0x2e,
	0xae, 0x6d, 0x76, 0x71, 0xed, 0x73, 0x17, 0xd7, 0xa6, 0x2d, 0x7a, 0x95, 0xeb, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x0c, 0x75, 0x8f, 0x2d, 0xae, 0x01, 0x00, 0x00,
}

func (m *GridPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GridPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GridPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Y != 0 {
		i = encodeVarintMisc(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x10
	}
	if m.X != 0 {
		i = encodeVarintMisc(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Connection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Connection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Connection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintMisc(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Protocol) > 0 {
		i -= len(m.Protocol)
		copy(dAtA[i:], m.Protocol)
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Protocol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintMisc(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IOStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IOStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IOStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastUpdateTime != 0 {
		i = encodeVarintMisc(dAtA, i, uint64(m.LastUpdateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.FirstUpdateTime != 0 {
		i = encodeVarintMisc(dAtA, i, uint64(m.FirstUpdateTime))
		i--
		dAtA[i] = 0x28
	}
	if m.OutMessages != 0 {
		i = encodeVarintMisc(dAtA, i, uint64(m.OutMessages))
		i--
		dAtA[i] = 0x20
	}
	if m.OutBytes != 0 {
		i = encodeVarintMisc(dAtA, i, uint64(m.OutBytes))
		i--
		dAtA[i] = 0x18
	}
	if m.InMessages != 0 {
		i = encodeVarintMisc(dAtA, i, uint64(m.InMessages))
		i--
		dAtA[i] = 0x10
	}
	if m.InBytes != 0 {
		i = encodeVarintMisc(dAtA, i, uint64(m.InBytes))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMisc(dAtA []byte, offset int, v uint64) int {
	offset -= sovMisc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GridPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovMisc(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovMisc(uint64(m.Y))
	}
	return n
}

func (m *Connection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovMisc(uint64(m.Time))
	}
	return n
}

func (m *IOStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InBytes != 0 {
		n += 1 + sovMisc(uint64(m.InBytes))
	}
	if m.InMessages != 0 {
		n += 1 + sovMisc(uint64(m.InMessages))
	}
	if m.OutBytes != 0 {
		n += 1 + sovMisc(uint64(m.OutBytes))
	}
	if m.OutMessages != 0 {
		n += 1 + sovMisc(uint64(m.OutMessages))
	}
	if m.FirstUpdateTime != 0 {
		n += 1 + sovMisc(uint64(m.FirstUpdateTime))
	}
	if m.LastUpdateTime != 0 {
		n += 1 + sovMisc(uint64(m.LastUpdateTime))
	}
	return n
}

func sovMisc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMisc(x uint64) (n int) {
	return sovMisc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GridPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GridPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GridPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Connection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Connection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Connection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMisc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMisc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IOStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IOStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IOStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InBytes", wireType)
			}
			m.InBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InMessages", wireType)
			}
			m.InMessages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InMessages |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutBytes", wireType)
			}
			m.OutBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutBytes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutMessages", wireType)
			}
			m.OutMessages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutMessages |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstUpdateTime", wireType)
			}
			m.FirstUpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstUpdateTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateTime", wireType)
			}
			m.LastUpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdateTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMisc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMisc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMisc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMisc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMisc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMisc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMisc = fmt.Errorf("proto: unexpected end of group")
)
