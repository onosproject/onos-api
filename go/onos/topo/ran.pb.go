// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/topo/ran.proto

// Package onos.topo defines interfaces for managing network top

package topo

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Geographical location; expected value type of "location" attribute
type Location struct {
	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng float64 `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{0}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Location.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return m.Size()
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Location) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

// Area of coverage; expected value type of "coverage" attribute
type Coverage struct {
	Height   int32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	ArcWidth int32 `protobuf:"varint,2,opt,name=arcWidth,proto3" json:"arcWidth,omitempty"`
	Azimuth  int32 `protobuf:"varint,3,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	Tilt     int32 `protobuf:"varint,4,opt,name=tilt,proto3" json:"tilt,omitempty"`
}

func (m *Coverage) Reset()         { *m = Coverage{} }
func (m *Coverage) String() string { return proto.CompactTextString(m) }
func (*Coverage) ProtoMessage()    {}
func (*Coverage) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{1}
}
func (m *Coverage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Coverage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Coverage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Coverage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coverage.Merge(m, src)
}
func (m *Coverage) XXX_Size() int {
	return m.Size()
}
func (m *Coverage) XXX_DiscardUnknown() {
	xxx_messageInfo_Coverage.DiscardUnknown(m)
}

var xxx_messageInfo_Coverage proto.InternalMessageInfo

func (m *Coverage) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Coverage) GetArcWidth() int32 {
	if m != nil {
		return m.ArcWidth
	}
	return 0
}

func (m *Coverage) GetAzimuth() int32 {
	if m != nil {
		return m.Azimuth
	}
	return 0
}

func (m *Coverage) GetTilt() int32 {
	if m != nil {
		return m.Tilt
	}
	return 0
}

// E2Node persona; expected value type of "e2node" attribute
type E2Node struct {
	ServiceModels map[string]*ServiceModelInfo `protobuf:"bytes,1,rep,name=service_models,json=serviceModels,proto3" json:"service_models,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *E2Node) Reset()         { *m = E2Node{} }
func (m *E2Node) String() string { return proto.CompactTextString(m) }
func (*E2Node) ProtoMessage()    {}
func (*E2Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{2}
}
func (m *E2Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2Node.Merge(m, src)
}
func (m *E2Node) XXX_Size() int {
	return m.Size()
}
func (m *E2Node) XXX_DiscardUnknown() {
	xxx_messageInfo_E2Node.DiscardUnknown(m)
}

var xxx_messageInfo_E2Node proto.InternalMessageInfo

func (m *E2Node) GetServiceModels() map[string]*ServiceModelInfo {
	if m != nil {
		return m.ServiceModels
	}
	return nil
}

// E2Cell persona; expected value type of "e2cell" attribute
type E2Cell struct {
	CID          string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	AntennaCount uint32 `protobuf:"varint,2,opt,name=antennaCount,proto3" json:"antennaCount,omitempty"`
	EARFCN       uint32 `protobuf:"varint,3,opt,name=earfcn,proto3" json:"earfcn,omitempty"`
	CellType     string `protobuf:"bytes,4,opt,name=cell_type,json=cellType,proto3" json:"cell_type,omitempty"`
}

func (m *E2Cell) Reset()         { *m = E2Cell{} }
func (m *E2Cell) String() string { return proto.CompactTextString(m) }
func (*E2Cell) ProtoMessage()    {}
func (*E2Cell) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{3}
}
func (m *E2Cell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2Cell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2Cell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2Cell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2Cell.Merge(m, src)
}
func (m *E2Cell) XXX_Size() int {
	return m.Size()
}
func (m *E2Cell) XXX_DiscardUnknown() {
	xxx_messageInfo_E2Cell.DiscardUnknown(m)
}

var xxx_messageInfo_E2Cell proto.InternalMessageInfo

func (m *E2Cell) GetCID() string {
	if m != nil {
		return m.CID
	}
	return ""
}

func (m *E2Cell) GetAntennaCount() uint32 {
	if m != nil {
		return m.AntennaCount
	}
	return 0
}

func (m *E2Cell) GetEARFCN() uint32 {
	if m != nil {
		return m.EARFCN
	}
	return 0
}

func (m *E2Cell) GetCellType() string {
	if m != nil {
		return m.CellType
	}
	return ""
}

type ServiceModelInfo struct {
	OID          string                `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Name         string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RanFunctions map[string]*types.Any `protobuf:"bytes,3,rep,name=ran_functions,json=ranFunctions,proto3" json:"ran_functions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ServiceModelInfo) Reset()         { *m = ServiceModelInfo{} }
func (m *ServiceModelInfo) String() string { return proto.CompactTextString(m) }
func (*ServiceModelInfo) ProtoMessage()    {}
func (*ServiceModelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{4}
}
func (m *ServiceModelInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceModelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceModelInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceModelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceModelInfo.Merge(m, src)
}
func (m *ServiceModelInfo) XXX_Size() int {
	return m.Size()
}
func (m *ServiceModelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceModelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceModelInfo proto.InternalMessageInfo

func (m *ServiceModelInfo) GetOID() string {
	if m != nil {
		return m.OID
	}
	return ""
}

func (m *ServiceModelInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceModelInfo) GetRanFunctions() map[string]*types.Any {
	if m != nil {
		return m.RanFunctions
	}
	return nil
}

type RCRanFunction struct {
}

func (m *RCRanFunction) Reset()         { *m = RCRanFunction{} }
func (m *RCRanFunction) String() string { return proto.CompactTextString(m) }
func (*RCRanFunction) ProtoMessage()    {}
func (*RCRanFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{5}
}
func (m *RCRanFunction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RCRanFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RCRanFunction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RCRanFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RCRanFunction.Merge(m, src)
}
func (m *RCRanFunction) XXX_Size() int {
	return m.Size()
}
func (m *RCRanFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_RCRanFunction.DiscardUnknown(m)
}

var xxx_messageInfo_RCRanFunction proto.InternalMessageInfo

type KPMRanFunction struct {
	Measurements []*KPMMeasurement `protobuf:"bytes,1,rep,name=measurements,proto3" json:"measurements,omitempty"`
}

func (m *KPMRanFunction) Reset()         { *m = KPMRanFunction{} }
func (m *KPMRanFunction) String() string { return proto.CompactTextString(m) }
func (*KPMRanFunction) ProtoMessage()    {}
func (*KPMRanFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{6}
}
func (m *KPMRanFunction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KPMRanFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KPMRanFunction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KPMRanFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KPMRanFunction.Merge(m, src)
}
func (m *KPMRanFunction) XXX_Size() int {
	return m.Size()
}
func (m *KPMRanFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_KPMRanFunction.DiscardUnknown(m)
}

var xxx_messageInfo_KPMRanFunction proto.InternalMessageInfo

func (m *KPMRanFunction) GetMeasurements() []*KPMMeasurement {
	if m != nil {
		return m.Measurements
	}
	return nil
}

type KPMMeasurement struct {
	ID   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *KPMMeasurement) Reset()         { *m = KPMMeasurement{} }
func (m *KPMMeasurement) String() string { return proto.CompactTextString(m) }
func (*KPMMeasurement) ProtoMessage()    {}
func (*KPMMeasurement) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{7}
}
func (m *KPMMeasurement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KPMMeasurement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KPMMeasurement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KPMMeasurement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KPMMeasurement.Merge(m, src)
}
func (m *KPMMeasurement) XXX_Size() int {
	return m.Size()
}
func (m *KPMMeasurement) XXX_DiscardUnknown() {
	xxx_messageInfo_KPMMeasurement.DiscardUnknown(m)
}

var xxx_messageInfo_KPMMeasurement proto.InternalMessageInfo

func (m *KPMMeasurement) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *KPMMeasurement) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Location)(nil), "onos.topo.Location")
	proto.RegisterType((*Coverage)(nil), "onos.topo.Coverage")
	proto.RegisterType((*E2Node)(nil), "onos.topo.E2Node")
	proto.RegisterMapType((map[string]*ServiceModelInfo)(nil), "onos.topo.E2Node.ServiceModelsEntry")
	proto.RegisterType((*E2Cell)(nil), "onos.topo.E2Cell")
	proto.RegisterType((*ServiceModelInfo)(nil), "onos.topo.ServiceModelInfo")
	proto.RegisterMapType((map[string]*types.Any)(nil), "onos.topo.ServiceModelInfo.RanFunctionsEntry")
	proto.RegisterType((*RCRanFunction)(nil), "onos.topo.RCRanFunction")
	proto.RegisterType((*KPMRanFunction)(nil), "onos.topo.KPMRanFunction")
	proto.RegisterType((*KPMMeasurement)(nil), "onos.topo.KPMMeasurement")
}

func init() { proto.RegisterFile("onos/topo/ran.proto", fileDescriptor_23cc5f935e05bbb6) }

var fileDescriptor_23cc5f935e05bbb6 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xc1, 0x6e, 0xd3, 0x4a,
	0x14, 0xad, 0xe3, 0xd6, 0x4d, 0x6e, 0x9b, 0xbe, 0xbe, 0xa1, 0xaa, 0x9c, 0x54, 0x72, 0x2a, 0x8b,
	0x45, 0x85, 0x84, 0x23, 0xc2, 0x06, 0x21, 0x58, 0x34, 0x6e, 0x2a, 0x45, 0x21, 0x6d, 0x35, 0x80,
	0x58, 0xa1, 0x68, 0xea, 0x4c, 0x1c, 0x0b, 0x67, 0x26, 0xb2, 0xc7, 0x91, 0xcc, 0x17, 0xb0, 0xe4,
	0x63, 0xf8, 0x08, 0x96, 0x5d, 0xb2, 0x8a, 0x90, 0xb3, 0xe5, 0x23, 0xd0, 0x8c, 0x93, 0xe0, 0xd0,
	0x8a, 0xdd, 0x99, 0x73, 0xcf, 0xcc, 0xdc, 0x73, 0xee, 0x85, 0x47, 0x9c, 0xf1, 0xb8, 0x29, 0xf8,
	0x94, 0x37, 0x23, 0xc2, 0x9c, 0x69, 0xc4, 0x05, 0x47, 0x15, 0x49, 0x3a, 0x92, 0xac, 0xd7, 0x7c,
	0xce, 0xfd, 0x90, 0x36, 0x55, 0xe1, 0x36, 0x19, 0x35, 0x09, 0x4b, 0x73, 0x55, 0xfd, 0xc8, 0xe7,
	0x3e, 0x57, 0xb0, 0x29, 0x51, 0xce, 0xda, 0x0e, 0x94, 0xdf, 0x70, 0x8f, 0x88, 0x80, 0x33, 0x74,
	0x08, 0x7a, 0x48, 0x84, 0xa9, 0x9d, 0x6a, 0x67, 0x1a, 0x96, 0x50, 0x31, 0xcc, 0x37, 0x4b, 0x4b,
	0x86, 0xf9, 0x76, 0x08, 0x65, 0x97, 0xcf, 0x68, 0x44, 0x7c, 0x8a, 0x8e, 0xc1, 0x18, 0xd3, 0xc0,
	0x1f, 0xe7, 0x57, 0x76, 0xf0, 0xf2, 0x84, 0xea, 0x50, 0x26, 0x91, 0xf7, 0x21, 0x18, 0x8a, 0xb1,
	0xba, 0xba, 0x83, 0xd7, 0x67, 0x64, 0xc2, 0x2e, 0xf9, 0x1c, 0x4c, 0x12, 0x31, 0x36, 0x75, 0x55,
	0x5a, 0x1d, 0x11, 0x82, 0x6d, 0x11, 0x84, 0xc2, 0xdc, 0x56, 0xb4, 0xc2, 0xf6, 0x37, 0x0d, 0x8c,
	0x4e, 0xeb, 0x8a, 0x0f, 0x29, 0xea, 0xc1, 0x41, 0x4c, 0xa3, 0x59, 0xe0, 0xd1, 0xc1, 0x84, 0x0f,
	0x69, 0x18, 0x9b, 0xda, 0xa9, 0x7e, 0xb6, 0xd7, 0x7a, 0xec, 0xac, 0xdd, 0x3b, 0xb9, 0xd4, 0x79,
	0x9b, 0xeb, 0xfa, 0x4a, 0xd6, 0x61, 0x22, 0x4a, 0x71, 0x35, 0x2e, 0x72, 0xf5, 0x8f, 0x80, 0xee,
	0x8b, 0xa4, 0xdb, 0x4f, 0x34, 0x55, 0x66, 0x2a, 0x58, 0x42, 0xf4, 0x0c, 0x76, 0x66, 0x24, 0x4c,
	0xa8, 0xb2, 0xb1, 0xd7, 0x3a, 0x29, 0xfc, 0x55, 0xbc, 0xdf, 0x65, 0x23, 0x8e, 0x73, 0xe5, 0xcb,
	0xd2, 0x0b, 0xcd, 0xfe, 0xa2, 0xda, 0x76, 0x69, 0x18, 0xa2, 0x1a, 0xe8, 0x5e, 0x30, 0xcc, 0xdf,
	0x6c, 0xef, 0x66, 0xf3, 0x86, 0xee, 0x76, 0x2f, 0xb0, 0xe4, 0x90, 0x0d, 0xfb, 0x84, 0x09, 0xca,
	0x18, 0x71, 0x79, 0xc2, 0x84, 0xfa, 0xa3, 0x8a, 0x37, 0x38, 0x64, 0x83, 0x41, 0x49, 0x34, 0xf2,
	0x98, 0x4a, 0xab, 0xda, 0x86, 0x6c, 0xde, 0x30, 0x3a, 0xe7, 0xf8, 0xd2, 0xbd, 0xc2, 0xcb, 0x0a,
	0x3a, 0x81, 0x8a, 0x47, 0xc3, 0x70, 0x20, 0xd2, 0x29, 0x55, 0xe9, 0x55, 0x70, 0x59, 0x12, 0xef,
	0xd2, 0x29, 0xb5, 0x7f, 0x69, 0x70, 0xf8, 0x77, 0xab, 0xb2, 0x29, 0xbe, 0xd9, 0xd4, 0xb5, 0x6c,
	0x8a, 0x07, 0x43, 0x39, 0x05, 0x46, 0x26, 0xb9, 0xe1, 0x0a, 0x56, 0x18, 0x61, 0xa8, 0x46, 0x84,
	0x0d, 0x46, 0x09, 0xf3, 0xe4, 0x9e, 0xc4, 0xa6, 0xae, 0x92, 0x7f, 0xfa, 0x8f, 0x34, 0x1c, 0x4c,
	0xd8, 0xe5, 0x4a, 0x9f, 0x8f, 0x60, 0x3f, 0x2a, 0x50, 0xf5, 0xf7, 0xf0, 0xff, 0x3d, 0xc9, 0x03,
	0x03, 0x78, 0xb2, 0x39, 0x80, 0x23, 0x27, 0xdf, 0x6f, 0x67, 0xb5, 0xdf, 0xce, 0x39, 0x4b, 0x8b,
	0xc9, 0xff, 0x07, 0x55, 0xec, 0x16, 0x1e, 0xb6, 0xaf, 0xe1, 0xa0, 0x77, 0xd3, 0x2f, 0x30, 0xe8,
	0x35, 0xec, 0x4f, 0x28, 0x89, 0x93, 0x88, 0x4e, 0x28, 0x13, 0xab, 0x35, 0xaa, 0x15, 0xcc, 0xf4,
	0x6e, 0xfa, 0xfd, 0x3f, 0x0a, 0xbc, 0x21, 0xb7, 0x5f, 0xa9, 0x07, 0x0b, 0x75, 0x74, 0x0c, 0xa5,
	0x75, 0x98, 0x46, 0x36, 0x6f, 0x94, 0xba, 0x17, 0xb8, 0xf4, 0x70, 0x94, 0x6d, 0xf3, 0x7b, 0x66,
	0x69, 0x77, 0x99, 0xa5, 0xfd, 0xcc, 0x2c, 0xed, 0xeb, 0xc2, 0xda, 0xba, 0x5b, 0x58, 0x5b, 0x3f,
	0x16, 0xd6, 0xd6, 0xad, 0xa1, 0x2c, 0x3d, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x0f, 0xca,
	0x4c, 0xe2, 0x03, 0x00, 0x00,
}

func (m *Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lng != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lng))))
		i--
		dAtA[i] = 0x11
	}
	if m.Lat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Coverage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coverage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Coverage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tilt != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Tilt))
		i--
		dAtA[i] = 0x20
	}
	if m.Azimuth != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Azimuth))
		i--
		dAtA[i] = 0x18
	}
	if m.ArcWidth != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.ArcWidth))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *E2Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceModels) > 0 {
		for k := range m.ServiceModels {
			v := m.ServiceModels[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRan(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRan(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRan(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *E2Cell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2Cell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2Cell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CellType) > 0 {
		i -= len(m.CellType)
		copy(dAtA[i:], m.CellType)
		i = encodeVarintRan(dAtA, i, uint64(len(m.CellType)))
		i--
		dAtA[i] = 0x22
	}
	if m.EARFCN != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.EARFCN))
		i--
		dAtA[i] = 0x18
	}
	if m.AntennaCount != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.AntennaCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CID) > 0 {
		i -= len(m.CID)
		copy(dAtA[i:], m.CID)
		i = encodeVarintRan(dAtA, i, uint64(len(m.CID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceModelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceModelInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceModelInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RanFunctions) > 0 {
		for k := range m.RanFunctions {
			v := m.RanFunctions[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRan(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRan(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRan(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRan(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OID) > 0 {
		i -= len(m.OID)
		copy(dAtA[i:], m.OID)
		i = encodeVarintRan(dAtA, i, uint64(len(m.OID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RCRanFunction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RCRanFunction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RCRanFunction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *KPMRanFunction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KPMRanFunction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KPMRanFunction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Measurements) > 0 {
		for iNdEx := len(m.Measurements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Measurements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *KPMMeasurement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KPMMeasurement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KPMMeasurement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRan(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRan(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRan(dAtA []byte, offset int, v uint64) int {
	offset -= sovRan(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lat != 0 {
		n += 9
	}
	if m.Lng != 0 {
		n += 9
	}
	return n
}

func (m *Coverage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovRan(uint64(m.Height))
	}
	if m.ArcWidth != 0 {
		n += 1 + sovRan(uint64(m.ArcWidth))
	}
	if m.Azimuth != 0 {
		n += 1 + sovRan(uint64(m.Azimuth))
	}
	if m.Tilt != 0 {
		n += 1 + sovRan(uint64(m.Tilt))
	}
	return n
}

func (m *E2Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ServiceModels) > 0 {
		for k, v := range m.ServiceModels {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRan(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRan(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRan(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *E2Cell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CID)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if m.AntennaCount != 0 {
		n += 1 + sovRan(uint64(m.AntennaCount))
	}
	if m.EARFCN != 0 {
		n += 1 + sovRan(uint64(m.EARFCN))
	}
	l = len(m.CellType)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}

func (m *ServiceModelInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OID)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if len(m.RanFunctions) > 0 {
		for k, v := range m.RanFunctions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRan(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRan(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRan(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RCRanFunction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *KPMRanFunction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Measurements) > 0 {
		for _, e := range m.Measurements {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *KPMMeasurement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}

func sovRan(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRan(x uint64) (n int) {
	return sovRan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lng = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Coverage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coverage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coverage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcWidth", wireType)
			}
			m.ArcWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArcWidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azimuth", wireType)
			}
			m.Azimuth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Azimuth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tilt", wireType)
			}
			m.Tilt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tilt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceModels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceModels == nil {
				m.ServiceModels = make(map[string]*ServiceModelInfo)
			}
			var mapkey string
			var mapvalue *ServiceModelInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRan
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRan
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRan
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRan
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ServiceModelInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRan(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRan
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ServiceModels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2Cell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2Cell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2Cell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntennaCount", wireType)
			}
			m.AntennaCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AntennaCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EARFCN", wireType)
			}
			m.EARFCN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EARFCN |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceModelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceModelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceModelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RanFunctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RanFunctions == nil {
				m.RanFunctions = make(map[string]*types.Any)
			}
			var mapkey string
			var mapvalue *types.Any
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRan
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRan
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRan
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRan
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.Any{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRan(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRan
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RanFunctions[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RCRanFunction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RCRanFunction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RCRanFunction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KPMRanFunction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KPMRanFunction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KPMRanFunction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Measurements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Measurements = append(m.Measurements, &KPMMeasurement{})
			if err := m.Measurements[len(m.Measurements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KPMMeasurement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KPMMeasurement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KPMMeasurement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRan
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRan
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRan
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRan        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRan          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRan = fmt.Errorf("proto: unexpected end of group")
)
