// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/topo/ran.proto

package topo

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TODO: Deprecate! Use language specific constant definitions instead.
// Kinds of RAN entities
type RANEntityKinds int32

const (
	RANEntityKinds_E2NODE RANEntityKinds = 0
	RANEntityKinds_E2CELL RANEntityKinds = 1
	RANEntityKinds_E2T    RANEntityKinds = 3
)

var RANEntityKinds_name = map[int32]string{
	0: "E2NODE",
	1: "E2CELL",
	3: "E2T",
}

var RANEntityKinds_value = map[string]int32{
	"E2NODE": 0,
	"E2CELL": 1,
	"E2T":    3,
}

func (x RANEntityKinds) String() string {
	return proto.EnumName(RANEntityKinds_name, int32(x))
}

func (RANEntityKinds) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{0}
}

// TODO: Deprecate! Use language specific constant definitions instead.
// Kinds of RAN relations
type RANRelationKinds int32

const (
	RANRelationKinds_CONTROLS  RANRelationKinds = 0
	RANRelationKinds_CONTAINS  RANRelationKinds = 1
	RANRelationKinds_NEIGHBORS RANRelationKinds = 2
)

var RANRelationKinds_name = map[int32]string{
	0: "CONTROLS",
	1: "CONTAINS",
	2: "NEIGHBORS",
}

var RANRelationKinds_value = map[string]int32{
	"CONTROLS":  0,
	"CONTAINS":  1,
	"NEIGHBORS": 2,
}

func (x RANRelationKinds) String() string {
	return proto.EnumName(RANRelationKinds_name, int32(x))
}

func (RANRelationKinds) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{1}
}

type CellGlobalIDType int32

const (
	CellGlobalIDType_NRCGI CellGlobalIDType = 0
	CellGlobalIDType_ECGI  CellGlobalIDType = 1
)

var CellGlobalIDType_name = map[int32]string{
	0: "NRCGI",
	1: "ECGI",
}

var CellGlobalIDType_value = map[string]int32{
	"NRCGI": 0,
	"ECGI":  1,
}

func (x CellGlobalIDType) String() string {
	return proto.EnumName(CellGlobalIDType_name, int32(x))
}

func (CellGlobalIDType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{2}
}

// NodeType is for use in encoding node type in topo Entity URI identifier; see section 9.2.6 of ORAN E2AP v02.00 spec
type NodeType int32

const (
	NodeType_NT_NONE   NodeType = 0
	NodeType_NT_GNB    NodeType = 1
	NodeType_NT_EN_GNB NodeType = 2
	NodeType_NT_NG_ENB NodeType = 3
	NodeType_NT_ENB    NodeType = 4
)

var NodeType_name = map[int32]string{
	0: "NT_NONE",
	1: "NT_GNB",
	2: "NT_EN_GNB",
	3: "NT_NG_ENB",
	4: "NT_ENB",
}

var NodeType_value = map[string]int32{
	"NT_NONE":   0,
	"NT_GNB":    1,
	"NT_EN_GNB": 2,
	"NT_NG_ENB": 3,
	"NT_ENB":    4,
}

func (x NodeType) String() string {
	return proto.EnumName(NodeType_name, int32(x))
}

func (NodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{3}
}

// ComponentType is for use in encoding node component type in topo Entity URI identifier; see section 9.2.6 of ORAN E2AP v02.00 spec
type ComponentType int32

const (
	ComponentType_CT_NONE  ComponentType = 0
	ComponentType_CT_CU    ComponentType = 1
	ComponentType_CT_CU_UP ComponentType = 2
	ComponentType_CT_DU    ComponentType = 3
	ComponentType_CT_ENB   ComponentType = 4
)

var ComponentType_name = map[int32]string{
	0: "CT_NONE",
	1: "CT_CU",
	2: "CT_CU_UP",
	3: "CT_DU",
	4: "CT_ENB",
}

var ComponentType_value = map[string]int32{
	"CT_NONE":  0,
	"CT_CU":    1,
	"CT_CU_UP": 2,
	"CT_DU":    3,
	"CT_ENB":   4,
}

func (x ComponentType) String() string {
	return proto.EnumName(ComponentType_name, int32(x))
}

func (ComponentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{4}
}

// Geographical location; expected value type of "location" aspect
type Location struct {
	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng float64 `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{0}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Location.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return m.Size()
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Location) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

// Area of coverage; expected value type of "coverage" aspect
type Coverage struct {
	Height   int32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	ArcWidth int32 `protobuf:"varint,2,opt,name=arc_width,json=arcWidth,proto3" json:"arc_width,omitempty"`
	Azimuth  int32 `protobuf:"varint,3,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	Tilt     int32 `protobuf:"varint,4,opt,name=tilt,proto3" json:"tilt,omitempty"`
}

func (m *Coverage) Reset()         { *m = Coverage{} }
func (m *Coverage) String() string { return proto.CompactTextString(m) }
func (*Coverage) ProtoMessage()    {}
func (*Coverage) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{1}
}
func (m *Coverage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Coverage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Coverage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Coverage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coverage.Merge(m, src)
}
func (m *Coverage) XXX_Size() int {
	return m.Size()
}
func (m *Coverage) XXX_DiscardUnknown() {
	xxx_messageInfo_Coverage.DiscardUnknown(m)
}

var xxx_messageInfo_Coverage proto.InternalMessageInfo

func (m *Coverage) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Coverage) GetArcWidth() int32 {
	if m != nil {
		return m.ArcWidth
	}
	return 0
}

func (m *Coverage) GetAzimuth() int32 {
	if m != nil {
		return m.Azimuth
	}
	return 0
}

func (m *Coverage) GetTilt() int32 {
	if m != nil {
		return m.Tilt
	}
	return 0
}

// E2Node aspect; expected value type of "E2NODE" aspect and expected on entities of "E2NODE" kind
type E2Node struct {
	ServiceModels map[string]*ServiceModelInfo `protobuf:"bytes,1,rep,name=service_models,json=serviceModels,proto3" json:"service_models,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *E2Node) Reset()         { *m = E2Node{} }
func (m *E2Node) String() string { return proto.CompactTextString(m) }
func (*E2Node) ProtoMessage()    {}
func (*E2Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{2}
}
func (m *E2Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2Node.Merge(m, src)
}
func (m *E2Node) XXX_Size() int {
	return m.Size()
}
func (m *E2Node) XXX_DiscardUnknown() {
	xxx_messageInfo_E2Node.DiscardUnknown(m)
}

var xxx_messageInfo_E2Node proto.InternalMessageInfo

func (m *E2Node) GetServiceModels() map[string]*ServiceModelInfo {
	if m != nil {
		return m.ServiceModels
	}
	return nil
}

// Address
type Address struct {
	IP   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{3}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *Address) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// E2T aspect;
type E2Termination struct {
	Addresses []*Address `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *E2Termination) Reset()         { *m = E2Termination{} }
func (m *E2Termination) String() string { return proto.CompactTextString(m) }
func (*E2Termination) ProtoMessage()    {}
func (*E2Termination) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{4}
}
func (m *E2Termination) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2Termination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2Termination.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2Termination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2Termination.Merge(m, src)
}
func (m *E2Termination) XXX_Size() int {
	return m.Size()
}
func (m *E2Termination) XXX_DiscardUnknown() {
	xxx_messageInfo_E2Termination.DiscardUnknown(m)
}

var xxx_messageInfo_E2Termination proto.InternalMessageInfo

func (m *E2Termination) GetAddresses() []*Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type CellGlobalID struct {
	Value string           `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Type  CellGlobalIDType `protobuf:"varint,2,opt,name=type,proto3,enum=onos.topo.CellGlobalIDType" json:"type,omitempty"`
}

func (m *CellGlobalID) Reset()         { *m = CellGlobalID{} }
func (m *CellGlobalID) String() string { return proto.CompactTextString(m) }
func (*CellGlobalID) ProtoMessage()    {}
func (*CellGlobalID) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{5}
}
func (m *CellGlobalID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CellGlobalID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CellGlobalID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CellGlobalID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellGlobalID.Merge(m, src)
}
func (m *CellGlobalID) XXX_Size() int {
	return m.Size()
}
func (m *CellGlobalID) XXX_DiscardUnknown() {
	xxx_messageInfo_CellGlobalID.DiscardUnknown(m)
}

var xxx_messageInfo_CellGlobalID proto.InternalMessageInfo

func (m *CellGlobalID) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CellGlobalID) GetType() CellGlobalIDType {
	if m != nil {
		return m.Type
	}
	return CellGlobalIDType_NRCGI
}

// E2Cell aspect; expected value type of "E2CELL" aspect and expected on entities of "E2CELL" kind
type E2Cell struct {
	CellObjectID string        `protobuf:"bytes,1,opt,name=cell_object_id,json=cellObjectId,proto3" json:"cell_object_id,omitempty"`
	CellGlobalID *CellGlobalID `protobuf:"bytes,2,opt,name=cell_global_id,json=cellGlobalId,proto3" json:"cell_global_id,omitempty"`
	AntennaCount uint32        `protobuf:"varint,3,opt,name=antenna_count,json=antennaCount,proto3" json:"antenna_count,omitempty"`
	EARFCN       uint32        `protobuf:"varint,4,opt,name=earfcn,proto3" json:"earfcn,omitempty"`
	CellType     string        `protobuf:"bytes,5,opt,name=cell_type,json=cellType,proto3" json:"cell_type,omitempty"`
	PCI          uint32        `protobuf:"varint,6,opt,name=pci,proto3" json:"pci,omitempty"`
}

func (m *E2Cell) Reset()         { *m = E2Cell{} }
func (m *E2Cell) String() string { return proto.CompactTextString(m) }
func (*E2Cell) ProtoMessage()    {}
func (*E2Cell) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{6}
}
func (m *E2Cell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2Cell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2Cell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2Cell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2Cell.Merge(m, src)
}
func (m *E2Cell) XXX_Size() int {
	return m.Size()
}
func (m *E2Cell) XXX_DiscardUnknown() {
	xxx_messageInfo_E2Cell.DiscardUnknown(m)
}

var xxx_messageInfo_E2Cell proto.InternalMessageInfo

func (m *E2Cell) GetCellObjectID() string {
	if m != nil {
		return m.CellObjectID
	}
	return ""
}

func (m *E2Cell) GetCellGlobalID() *CellGlobalID {
	if m != nil {
		return m.CellGlobalID
	}
	return nil
}

func (m *E2Cell) GetAntennaCount() uint32 {
	if m != nil {
		return m.AntennaCount
	}
	return 0
}

func (m *E2Cell) GetEARFCN() uint32 {
	if m != nil {
		return m.EARFCN
	}
	return 0
}

func (m *E2Cell) GetCellType() string {
	if m != nil {
		return m.CellType
	}
	return ""
}

func (m *E2Cell) GetPCI() uint32 {
	if m != nil {
		return m.PCI
	}
	return 0
}

type ServiceModelInfo struct {
	OID          string       `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Name         string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RanFunctions []*types.Any `protobuf:"bytes,3,rep,name=ran_functions,json=ranFunctions,proto3" json:"ran_functions,omitempty"`
}

func (m *ServiceModelInfo) Reset()         { *m = ServiceModelInfo{} }
func (m *ServiceModelInfo) String() string { return proto.CompactTextString(m) }
func (*ServiceModelInfo) ProtoMessage()    {}
func (*ServiceModelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{7}
}
func (m *ServiceModelInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceModelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceModelInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceModelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceModelInfo.Merge(m, src)
}
func (m *ServiceModelInfo) XXX_Size() int {
	return m.Size()
}
func (m *ServiceModelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceModelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceModelInfo proto.InternalMessageInfo

func (m *ServiceModelInfo) GetOID() string {
	if m != nil {
		return m.OID
	}
	return ""
}

func (m *ServiceModelInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceModelInfo) GetRanFunctions() []*types.Any {
	if m != nil {
		return m.RanFunctions
	}
	return nil
}

type RCRanFunction struct {
	ID           string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ReportStyles []*RCReportStyle `protobuf:"bytes,2,rep,name=report_styles,json=reportStyles,proto3" json:"report_styles,omitempty"`
}

func (m *RCRanFunction) Reset()         { *m = RCRanFunction{} }
func (m *RCRanFunction) String() string { return proto.CompactTextString(m) }
func (*RCRanFunction) ProtoMessage()    {}
func (*RCRanFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{8}
}
func (m *RCRanFunction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RCRanFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RCRanFunction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RCRanFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RCRanFunction.Merge(m, src)
}
func (m *RCRanFunction) XXX_Size() int {
	return m.Size()
}
func (m *RCRanFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_RCRanFunction.DiscardUnknown(m)
}

var xxx_messageInfo_RCRanFunction proto.InternalMessageInfo

func (m *RCRanFunction) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *RCRanFunction) GetReportStyles() []*RCReportStyle {
	if m != nil {
		return m.ReportStyles
	}
	return nil
}

type MHORanFunction struct {
	ID           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ReportStyles []*MHOReportStyle `protobuf:"bytes,2,rep,name=report_styles,json=reportStyles,proto3" json:"report_styles,omitempty"`
}

func (m *MHORanFunction) Reset()         { *m = MHORanFunction{} }
func (m *MHORanFunction) String() string { return proto.CompactTextString(m) }
func (*MHORanFunction) ProtoMessage()    {}
func (*MHORanFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{9}
}
func (m *MHORanFunction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MHORanFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MHORanFunction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MHORanFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MHORanFunction.Merge(m, src)
}
func (m *MHORanFunction) XXX_Size() int {
	return m.Size()
}
func (m *MHORanFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_MHORanFunction.DiscardUnknown(m)
}

var xxx_messageInfo_MHORanFunction proto.InternalMessageInfo

func (m *MHORanFunction) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *MHORanFunction) GetReportStyles() []*MHOReportStyle {
	if m != nil {
		return m.ReportStyles
	}
	return nil
}

type KPMRanFunction struct {
	ID           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ReportStyles []*KPMReportStyle `protobuf:"bytes,2,rep,name=report_styles,json=reportStyles,proto3" json:"report_styles,omitempty"`
}

func (m *KPMRanFunction) Reset()         { *m = KPMRanFunction{} }
func (m *KPMRanFunction) String() string { return proto.CompactTextString(m) }
func (*KPMRanFunction) ProtoMessage()    {}
func (*KPMRanFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{10}
}
func (m *KPMRanFunction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KPMRanFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KPMRanFunction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KPMRanFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KPMRanFunction.Merge(m, src)
}
func (m *KPMRanFunction) XXX_Size() int {
	return m.Size()
}
func (m *KPMRanFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_KPMRanFunction.DiscardUnknown(m)
}

var xxx_messageInfo_KPMRanFunction proto.InternalMessageInfo

func (m *KPMRanFunction) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *KPMRanFunction) GetReportStyles() []*KPMReportStyle {
	if m != nil {
		return m.ReportStyles
	}
	return nil
}

type RCReportStyle struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *RCReportStyle) Reset()         { *m = RCReportStyle{} }
func (m *RCReportStyle) String() string { return proto.CompactTextString(m) }
func (*RCReportStyle) ProtoMessage()    {}
func (*RCReportStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{11}
}
func (m *RCReportStyle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RCReportStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RCReportStyle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RCReportStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RCReportStyle.Merge(m, src)
}
func (m *RCReportStyle) XXX_Size() int {
	return m.Size()
}
func (m *RCReportStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_RCReportStyle.DiscardUnknown(m)
}

var xxx_messageInfo_RCReportStyle proto.InternalMessageInfo

func (m *RCReportStyle) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RCReportStyle) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type KPMReportStyle struct {
	Name         string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type         int32             `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Measurements []*KPMMeasurement `protobuf:"bytes,3,rep,name=measurements,proto3" json:"measurements,omitempty"`
}

func (m *KPMReportStyle) Reset()         { *m = KPMReportStyle{} }
func (m *KPMReportStyle) String() string { return proto.CompactTextString(m) }
func (*KPMReportStyle) ProtoMessage()    {}
func (*KPMReportStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{12}
}
func (m *KPMReportStyle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KPMReportStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KPMReportStyle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KPMReportStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KPMReportStyle.Merge(m, src)
}
func (m *KPMReportStyle) XXX_Size() int {
	return m.Size()
}
func (m *KPMReportStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_KPMReportStyle.DiscardUnknown(m)
}

var xxx_messageInfo_KPMReportStyle proto.InternalMessageInfo

func (m *KPMReportStyle) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KPMReportStyle) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *KPMReportStyle) GetMeasurements() []*KPMMeasurement {
	if m != nil {
		return m.Measurements
	}
	return nil
}

type MHOReportStyle struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *MHOReportStyle) Reset()         { *m = MHOReportStyle{} }
func (m *MHOReportStyle) String() string { return proto.CompactTextString(m) }
func (*MHOReportStyle) ProtoMessage()    {}
func (*MHOReportStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{13}
}
func (m *MHOReportStyle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MHOReportStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MHOReportStyle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MHOReportStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MHOReportStyle.Merge(m, src)
}
func (m *MHOReportStyle) XXX_Size() int {
	return m.Size()
}
func (m *MHOReportStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_MHOReportStyle.DiscardUnknown(m)
}

var xxx_messageInfo_MHOReportStyle proto.InternalMessageInfo

func (m *MHOReportStyle) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MHOReportStyle) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type KPMMeasurement struct {
	ID   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *KPMMeasurement) Reset()         { *m = KPMMeasurement{} }
func (m *KPMMeasurement) String() string { return proto.CompactTextString(m) }
func (*KPMMeasurement) ProtoMessage()    {}
func (*KPMMeasurement) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{14}
}
func (m *KPMMeasurement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KPMMeasurement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KPMMeasurement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KPMMeasurement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KPMMeasurement.Merge(m, src)
}
func (m *KPMMeasurement) XXX_Size() int {
	return m.Size()
}
func (m *KPMMeasurement) XXX_DiscardUnknown() {
	xxx_messageInfo_KPMMeasurement.DiscardUnknown(m)
}

var xxx_messageInfo_KPMMeasurement proto.InternalMessageInfo

func (m *KPMMeasurement) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *KPMMeasurement) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterEnum("onos.topo.RANEntityKinds", RANEntityKinds_name, RANEntityKinds_value)
	proto.RegisterEnum("onos.topo.RANRelationKinds", RANRelationKinds_name, RANRelationKinds_value)
	proto.RegisterEnum("onos.topo.CellGlobalIDType", CellGlobalIDType_name, CellGlobalIDType_value)
	proto.RegisterEnum("onos.topo.NodeType", NodeType_name, NodeType_value)
	proto.RegisterEnum("onos.topo.ComponentType", ComponentType_name, ComponentType_value)
	proto.RegisterType((*Location)(nil), "onos.topo.Location")
	proto.RegisterType((*Coverage)(nil), "onos.topo.Coverage")
	proto.RegisterType((*E2Node)(nil), "onos.topo.E2Node")
	proto.RegisterMapType((map[string]*ServiceModelInfo)(nil), "onos.topo.E2Node.ServiceModelsEntry")
	proto.RegisterType((*Address)(nil), "onos.topo.Address")
	proto.RegisterType((*E2Termination)(nil), "onos.topo.E2Termination")
	proto.RegisterType((*CellGlobalID)(nil), "onos.topo.CellGlobalID")
	proto.RegisterType((*E2Cell)(nil), "onos.topo.E2Cell")
	proto.RegisterType((*ServiceModelInfo)(nil), "onos.topo.ServiceModelInfo")
	proto.RegisterType((*RCRanFunction)(nil), "onos.topo.RCRanFunction")
	proto.RegisterType((*MHORanFunction)(nil), "onos.topo.MHORanFunction")
	proto.RegisterType((*KPMRanFunction)(nil), "onos.topo.KPMRanFunction")
	proto.RegisterType((*RCReportStyle)(nil), "onos.topo.RCReportStyle")
	proto.RegisterType((*KPMReportStyle)(nil), "onos.topo.KPMReportStyle")
	proto.RegisterType((*MHOReportStyle)(nil), "onos.topo.MHOReportStyle")
	proto.RegisterType((*KPMMeasurement)(nil), "onos.topo.KPMMeasurement")
}

func init() { proto.RegisterFile("onos/topo/ran.proto", fileDescriptor_23cc5f935e05bbb6) }

var fileDescriptor_23cc5f935e05bbb6 = []byte{
	// 961 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x8e, 0x9d, 0x26, 0x4d, 0x4e, 0xe3, 0xca, 0x1a, 0xaa, 0xc5, 0xed, 0x4a, 0xe9, 0xca, 0x20,
	0xb1, 0xea, 0x45, 0xc2, 0x16, 0x01, 0x0b, 0xa2, 0x48, 0x89, 0xe3, 0xcd, 0x46, 0x4d, 0x9c, 0x6a,
	0x92, 0x8a, 0x2b, 0x64, 0xb9, 0xf6, 0x24, 0x31, 0x38, 0x33, 0x91, 0xed, 0x74, 0x15, 0xc4, 0x43,
	0x20, 0x9e, 0x85, 0x87, 0xe0, 0x72, 0x2f, 0xb9, 0xaa, 0x50, 0xfa, 0x22, 0x68, 0x66, 0x9c, 0xc6,
	0x2d, 0x5b, 0x04, 0x68, 0xef, 0xce, 0xf9, 0xe6, 0x3b, 0xdf, 0x99, 0xf3, 0x33, 0x03, 0x1f, 0x30,
	0xca, 0x92, 0x66, 0xca, 0x16, 0xac, 0x19, 0x7b, 0xb4, 0xb1, 0x88, 0x59, 0xca, 0x50, 0x95, 0x83,
	0x0d, 0x0e, 0x1e, 0x1d, 0x4e, 0x19, 0x9b, 0x46, 0xa4, 0x29, 0x0e, 0xae, 0x96, 0x93, 0xa6, 0x47,
	0x57, 0x92, 0x75, 0x74, 0x30, 0x65, 0x53, 0x26, 0xcc, 0x26, 0xb7, 0x24, 0x6a, 0x36, 0xa0, 0xd2,
	0x67, 0xbe, 0x97, 0x86, 0x8c, 0x22, 0x1d, 0x8a, 0x91, 0x97, 0x1a, 0xca, 0x33, 0xe5, 0xb9, 0x82,
	0xb9, 0x29, 0x10, 0x3a, 0x35, 0xd4, 0x0c, 0xa1, 0x53, 0x73, 0x0e, 0x15, 0x8b, 0x5d, 0x93, 0xd8,
	0x9b, 0x12, 0xf4, 0x04, 0xca, 0x33, 0x12, 0x4e, 0x67, 0x32, 0xa4, 0x84, 0x33, 0x0f, 0x3d, 0x85,
	0xaa, 0x17, 0xfb, 0xee, 0x9b, 0x30, 0x48, 0x67, 0x22, 0xb6, 0x84, 0x2b, 0x5e, 0xec, 0x7f, 0xc7,
	0x7d, 0x64, 0xc0, 0xae, 0xf7, 0x53, 0x38, 0x5f, 0xa6, 0x33, 0xa3, 0x28, 0x8e, 0x36, 0x2e, 0x42,
	0xb0, 0x93, 0x86, 0x51, 0x6a, 0xec, 0x08, 0x58, 0xd8, 0xe6, 0x6f, 0x0a, 0x94, 0xed, 0x53, 0x87,
	0x05, 0x04, 0x9d, 0xc3, 0x7e, 0x42, 0xe2, 0xeb, 0xd0, 0x27, 0xee, 0x9c, 0x05, 0x24, 0x4a, 0x0c,
	0xe5, 0x59, 0xf1, 0xf9, 0xde, 0xe9, 0xc7, 0x8d, 0xbb, 0xf2, 0x1b, 0x92, 0xda, 0x18, 0x49, 0xde,
	0x40, 0xd0, 0x6c, 0x9a, 0xc6, 0x2b, 0xac, 0x25, 0x79, 0xec, 0xe8, 0x7b, 0x40, 0x7f, 0x27, 0xf1,
	0x72, 0x7f, 0x24, 0x2b, 0x51, 0x4d, 0x15, 0x73, 0x13, 0xbd, 0x80, 0xd2, 0xb5, 0x17, 0x2d, 0x89,
	0x28, 0x63, 0xef, 0xf4, 0x69, 0x2e, 0x57, 0x3e, 0xbe, 0x47, 0x27, 0x0c, 0x4b, 0xe6, 0xd7, 0xea,
	0x4b, 0xc5, 0xfc, 0x1c, 0x76, 0x5b, 0x41, 0x10, 0x93, 0x24, 0x41, 0x4f, 0x40, 0x0d, 0x17, 0x52,
	0xb2, 0x5d, 0x5e, 0xdf, 0x1c, 0xab, 0xbd, 0x0b, 0xac, 0x86, 0x0b, 0x5e, 0xed, 0x82, 0xc5, 0xa9,
	0x10, 0xd6, 0xb0, 0xb0, 0xcd, 0x16, 0x68, 0xf6, 0xe9, 0x98, 0xc4, 0xf3, 0x90, 0xca, 0x89, 0x7c,
	0x0a, 0x55, 0x4f, 0xea, 0x90, 0x4d, 0xb9, 0x28, 0x77, 0x85, 0x2c, 0x07, 0xde, 0x92, 0xcc, 0x4b,
	0xa8, 0x59, 0x24, 0x8a, 0xba, 0x11, 0xbb, 0xf2, 0xa2, 0x5e, 0x07, 0x1d, 0x6c, 0x0a, 0x90, 0x45,
	0x49, 0x07, 0x35, 0x61, 0x27, 0x5d, 0x2d, 0x64, 0x55, 0xfb, 0xf7, 0xaa, 0xca, 0x07, 0x8f, 0x57,
	0x0b, 0x82, 0x05, 0xd1, 0xfc, 0x55, 0xe5, 0x73, 0xe0, 0x87, 0xe8, 0x0b, 0xd8, 0xf7, 0x49, 0x14,
	0xb9, 0xec, 0xea, 0x07, 0xe2, 0xa7, 0x6e, 0x18, 0x64, 0xc5, 0xe9, 0xeb, 0x9b, 0x63, 0x91, 0x7b,
	0x28, 0x0e, 0x7a, 0x1d, 0x5c, 0xf3, 0xb7, 0x5e, 0x80, 0x86, 0x59, 0xdc, 0x54, 0xa8, 0xf3, 0x38,
	0xd9, 0xd3, 0x0f, 0x1f, 0xc9, 0xbe, 0x15, 0xdc, 0x20, 0x52, 0x30, 0xf3, 0x02, 0xf4, 0x11, 0x68,
	0x1e, 0x4d, 0x09, 0xa5, 0x9e, 0xeb, 0xb3, 0x25, 0x4d, 0xc5, 0x3e, 0x69, 0xb8, 0x96, 0x81, 0x16,
	0xc7, 0x90, 0x09, 0x65, 0xe2, 0xc5, 0x13, 0x9f, 0x8a, 0xb5, 0xd2, 0xda, 0xb0, 0xbe, 0x39, 0x2e,
	0xdb, 0x2d, 0xfc, 0xca, 0x72, 0x70, 0x76, 0xc2, 0xf7, 0x55, 0xdc, 0x4c, 0xb4, 0xa4, 0x24, 0xfa,
	0x54, 0xe1, 0x00, 0xaf, 0x1f, 0x1d, 0x42, 0x71, 0xe1, 0x87, 0x46, 0x59, 0x44, 0xef, 0xae, 0x6f,
	0x8e, 0x8b, 0x17, 0x56, 0x0f, 0x73, 0xcc, 0xfc, 0x19, 0xf4, 0x87, 0x4b, 0xc0, 0xe9, 0xec, 0xae,
	0x25, 0x82, 0x3e, 0xec, 0x75, 0x30, 0xc7, 0xf8, 0xc4, 0xa9, 0x37, 0x97, 0x4d, 0xaf, 0x62, 0x61,
	0xa3, 0xaf, 0x40, 0x8b, 0x3d, 0xea, 0x4e, 0x96, 0xd4, 0xe7, 0x03, 0x4f, 0x8c, 0xa2, 0x18, 0xf2,
	0x41, 0x43, 0xbe, 0xe3, 0xc6, 0xe6, 0x1d, 0x37, 0x5a, 0x74, 0x85, 0x6b, 0xb1, 0x47, 0x5f, 0x6d,
	0x98, 0xe6, 0x04, 0x34, 0x6c, 0xe1, 0x2d, 0x22, 0x36, 0x2d, 0xb8, 0xb7, 0x69, 0x1d, 0xac, 0x86,
	0x01, 0x3a, 0x03, 0x2d, 0x26, 0x7c, 0xbf, 0xdc, 0x24, 0x5d, 0x45, 0x24, 0x31, 0x54, 0x91, 0xc3,
	0xc8, 0xf5, 0x1d, 0x5b, 0x58, 0x30, 0x46, 0x9c, 0x80, 0x6b, 0xf1, 0xd6, 0x49, 0xcc, 0x19, 0xec,
	0x0f, 0x5e, 0x0f, 0xff, 0x4d, 0xa2, 0x6f, 0xdf, 0x9d, 0xe8, 0x30, 0x97, 0x88, 0x2b, 0xfd, 0x53,
	0xa6, 0xf3, 0x8b, 0xc1, 0x7b, 0xca, 0xc4, 0x95, 0x1e, 0xcd, 0xf4, 0xa5, 0xe8, 0xdd, 0x16, 0xb9,
	0x9b, 0x8d, 0x92, 0x9b, 0x0d, 0xca, 0x3d, 0x92, 0x52, 0xf6, 0x0e, 0xde, 0xc8, 0x2b, 0xfe, 0xf7,
	0x48, 0x74, 0x06, 0xb5, 0x39, 0xf1, 0x92, 0x65, 0x4c, 0xe6, 0x84, 0xa6, 0x9b, 0x41, 0x3f, 0xb8,
	0xf1, 0x60, 0xcb, 0xc0, 0xf7, 0xe8, 0xe6, 0x4b, 0x39, 0x85, 0xff, 0x71, 0xe5, 0x6f, 0xc4, 0x95,
	0x73, 0xca, 0x8f, 0x76, 0xf5, 0x1d, 0x0b, 0x7a, 0xf2, 0x02, 0xf6, 0x71, 0xcb, 0xb1, 0x69, 0x1a,
	0xa6, 0xab, 0xf3, 0x90, 0x06, 0x09, 0x02, 0xf1, 0x23, 0x0f, 0x3b, 0xb6, 0x5e, 0x90, 0xb6, 0x65,
	0xf7, 0xfb, 0xba, 0x82, 0x76, 0xa1, 0x68, 0x9f, 0x8e, 0xf5, 0xe2, 0xc9, 0x19, 0xe8, 0xb8, 0xe5,
	0x60, 0x12, 0x89, 0x3f, 0x4c, 0x06, 0xd5, 0xa0, 0x62, 0x0d, 0x9d, 0x31, 0x1e, 0xf6, 0x47, 0x7a,
	0x61, 0xe3, 0xb5, 0x7a, 0xce, 0x48, 0x57, 0x90, 0x06, 0x55, 0xc7, 0xee, 0x75, 0x5f, 0xb7, 0x87,
	0x78, 0xa4, 0xab, 0x27, 0x9f, 0x80, 0xfe, 0xf0, 0x13, 0x42, 0x55, 0x28, 0x39, 0xd8, 0xea, 0xf6,
	0xf4, 0x02, 0xaa, 0xc0, 0x8e, 0xcd, 0x2d, 0xe5, 0x64, 0x00, 0x15, 0xfe, 0xdb, 0x0b, 0xc2, 0x1e,
	0xec, 0x3a, 0x63, 0xd7, 0x19, 0x3a, 0xd9, 0xad, 0x9c, 0xb1, 0xdb, 0x75, 0xda, 0x99, 0xf8, 0xd8,
	0xb5, 0x1d, 0xe1, 0xaa, 0x99, 0xeb, 0x74, 0x5d, 0xdb, 0x69, 0xeb, 0xc5, 0x8c, 0xc9, 0xed, 0x9d,
	0x93, 0x3e, 0x68, 0x16, 0x9b, 0x2f, 0x18, 0x25, 0x34, 0xdd, 0x68, 0x5a, 0x77, 0x9a, 0x55, 0x28,
	0x59, 0x63, 0xd7, 0xba, 0xd4, 0x15, 0x71, 0x7b, 0x6e, 0xba, 0x97, 0x17, 0xba, 0x9a, 0x1d, 0x74,
	0x2e, 0xa5, 0x9a, 0x95, 0xa9, 0xb5, 0x8d, 0xdf, 0xd7, 0x75, 0xe5, 0xed, 0xba, 0xae, 0xfc, 0xb9,
	0xae, 0x2b, 0xbf, 0xdc, 0xd6, 0x0b, 0x6f, 0x6f, 0xeb, 0x85, 0x3f, 0x6e, 0xeb, 0x85, 0xab, 0xb2,
	0x78, 0xd3, 0x9f, 0xfd, 0x15, 0x00, 0x00, 0xff, 0xff, 0x37, 0x78, 0xa9, 0x06, 0xcb, 0x07, 0x00,
	0x00,
}

func (m *Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lng != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lng))))
		i--
		dAtA[i] = 0x11
	}
	if m.Lat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Coverage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coverage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Coverage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tilt != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Tilt))
		i--
		dAtA[i] = 0x20
	}
	if m.Azimuth != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Azimuth))
		i--
		dAtA[i] = 0x18
	}
	if m.ArcWidth != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.ArcWidth))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *E2Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceModels) > 0 {
		for k := range m.ServiceModels {
			v := m.ServiceModels[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRan(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRan(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRan(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IP) > 0 {
		i -= len(m.IP)
		copy(dAtA[i:], m.IP)
		i = encodeVarintRan(dAtA, i, uint64(len(m.IP)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2Termination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2Termination) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2Termination) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Addresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CellGlobalID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellGlobalID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellGlobalID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRan(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2Cell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2Cell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2Cell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PCI != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.PCI))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CellType) > 0 {
		i -= len(m.CellType)
		copy(dAtA[i:], m.CellType)
		i = encodeVarintRan(dAtA, i, uint64(len(m.CellType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EARFCN != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.EARFCN))
		i--
		dAtA[i] = 0x20
	}
	if m.AntennaCount != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.AntennaCount))
		i--
		dAtA[i] = 0x18
	}
	if m.CellGlobalID != nil {
		{
			size, err := m.CellGlobalID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CellObjectID) > 0 {
		i -= len(m.CellObjectID)
		copy(dAtA[i:], m.CellObjectID)
		i = encodeVarintRan(dAtA, i, uint64(len(m.CellObjectID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceModelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceModelInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceModelInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RanFunctions) > 0 {
		for iNdEx := len(m.RanFunctions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RanFunctions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRan(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OID) > 0 {
		i -= len(m.OID)
		copy(dAtA[i:], m.OID)
		i = encodeVarintRan(dAtA, i, uint64(len(m.OID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RCRanFunction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RCRanFunction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RCRanFunction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReportStyles) > 0 {
		for iNdEx := len(m.ReportStyles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReportStyles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRan(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MHORanFunction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MHORanFunction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MHORanFunction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReportStyles) > 0 {
		for iNdEx := len(m.ReportStyles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReportStyles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRan(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KPMRanFunction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KPMRanFunction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KPMRanFunction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReportStyles) > 0 {
		for iNdEx := len(m.ReportStyles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReportStyles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRan(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RCReportStyle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RCReportStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RCReportStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRan(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KPMReportStyle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KPMReportStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KPMReportStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Measurements) > 0 {
		for iNdEx := len(m.Measurements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Measurements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Type != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRan(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MHOReportStyle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MHOReportStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MHOReportStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRan(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KPMMeasurement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KPMMeasurement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KPMMeasurement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRan(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRan(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRan(dAtA []byte, offset int, v uint64) int {
	offset -= sovRan(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lat != 0 {
		n += 9
	}
	if m.Lng != 0 {
		n += 9
	}
	return n
}

func (m *Coverage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovRan(uint64(m.Height))
	}
	if m.ArcWidth != 0 {
		n += 1 + sovRan(uint64(m.ArcWidth))
	}
	if m.Azimuth != 0 {
		n += 1 + sovRan(uint64(m.Azimuth))
	}
	if m.Tilt != 0 {
		n += 1 + sovRan(uint64(m.Tilt))
	}
	return n
}

func (m *E2Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ServiceModels) > 0 {
		for k, v := range m.ServiceModels {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRan(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRan(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRan(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovRan(uint64(m.Port))
	}
	return n
}

func (m *E2Termination) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, e := range m.Addresses {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *CellGlobalID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRan(uint64(m.Type))
	}
	return n
}

func (m *E2Cell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CellObjectID)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if m.CellGlobalID != nil {
		l = m.CellGlobalID.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	if m.AntennaCount != 0 {
		n += 1 + sovRan(uint64(m.AntennaCount))
	}
	if m.EARFCN != 0 {
		n += 1 + sovRan(uint64(m.EARFCN))
	}
	l = len(m.CellType)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if m.PCI != 0 {
		n += 1 + sovRan(uint64(m.PCI))
	}
	return n
}

func (m *ServiceModelInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OID)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if len(m.RanFunctions) > 0 {
		for _, e := range m.RanFunctions {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *RCRanFunction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if len(m.ReportStyles) > 0 {
		for _, e := range m.ReportStyles {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *MHORanFunction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if len(m.ReportStyles) > 0 {
		for _, e := range m.ReportStyles {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *KPMRanFunction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if len(m.ReportStyles) > 0 {
		for _, e := range m.ReportStyles {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *RCReportStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRan(uint64(m.Type))
	}
	return n
}

func (m *KPMReportStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRan(uint64(m.Type))
	}
	if len(m.Measurements) > 0 {
		for _, e := range m.Measurements {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *MHOReportStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRan(uint64(m.Type))
	}
	return n
}

func (m *KPMMeasurement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}

func sovRan(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRan(x uint64) (n int) {
	return sovRan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lng = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Coverage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coverage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coverage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcWidth", wireType)
			}
			m.ArcWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArcWidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azimuth", wireType)
			}
			m.Azimuth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Azimuth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tilt", wireType)
			}
			m.Tilt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tilt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceModels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceModels == nil {
				m.ServiceModels = make(map[string]*ServiceModelInfo)
			}
			var mapkey string
			var mapvalue *ServiceModelInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRan
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRan
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRan
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRan
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ServiceModelInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRan(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRan
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ServiceModels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2Termination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2Termination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2Termination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, &Address{})
			if err := m.Addresses[len(m.Addresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellGlobalID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellGlobalID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellGlobalID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CellGlobalIDType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2Cell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2Cell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2Cell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellObjectID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellObjectID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellGlobalID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CellGlobalID == nil {
				m.CellGlobalID = &CellGlobalID{}
			}
			if err := m.CellGlobalID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntennaCount", wireType)
			}
			m.AntennaCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AntennaCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EARFCN", wireType)
			}
			m.EARFCN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EARFCN |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PCI", wireType)
			}
			m.PCI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PCI |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceModelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceModelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceModelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RanFunctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RanFunctions = append(m.RanFunctions, &types.Any{})
			if err := m.RanFunctions[len(m.RanFunctions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RCRanFunction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RCRanFunction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RCRanFunction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportStyles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportStyles = append(m.ReportStyles, &RCReportStyle{})
			if err := m.ReportStyles[len(m.ReportStyles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MHORanFunction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MHORanFunction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MHORanFunction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportStyles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportStyles = append(m.ReportStyles, &MHOReportStyle{})
			if err := m.ReportStyles[len(m.ReportStyles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KPMRanFunction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KPMRanFunction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KPMRanFunction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportStyles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportStyles = append(m.ReportStyles, &KPMReportStyle{})
			if err := m.ReportStyles[len(m.ReportStyles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RCReportStyle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RCReportStyle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RCReportStyle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KPMReportStyle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KPMReportStyle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KPMReportStyle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Measurements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Measurements = append(m.Measurements, &KPMMeasurement{})
			if err := m.Measurements[len(m.Measurements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MHOReportStyle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MHOReportStyle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MHOReportStyle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KPMMeasurement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KPMMeasurement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KPMMeasurement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRan
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRan
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRan
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRan        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRan          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRan = fmt.Errorf("proto: unexpected end of group")
)
