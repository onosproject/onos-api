// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/topo/ran.proto

package topo

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TODO: Deprecate! Use language specific constant definitions instead.
// Kinds of RAN entities
type RANEntityKinds int32

const (
	RANEntityKinds_E2NODE RANEntityKinds = 0
	RANEntityKinds_E2CELL RANEntityKinds = 1
	RANEntityKinds_E2T    RANEntityKinds = 3
	RANEntityKinds_XAPP   RANEntityKinds = 4
	RANEntityKinds_A1T    RANEntityKinds = 5
)

var RANEntityKinds_name = map[int32]string{
	0: "E2NODE",
	1: "E2CELL",
	3: "E2T",
	4: "XAPP",
	5: "A1T",
}

var RANEntityKinds_value = map[string]int32{
	"E2NODE": 0,
	"E2CELL": 1,
	"E2T":    3,
	"XAPP":   4,
	"A1T":    5,
}

func (x RANEntityKinds) String() string {
	return proto.EnumName(RANEntityKinds_name, int32(x))
}

func (RANEntityKinds) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{0}
}

// TODO: Deprecate! Use language specific constant definitions instead.
// Kinds of RAN relations
type RANRelationKinds int32

const (
	RANRelationKinds_CONTROLS  RANRelationKinds = 0
	RANRelationKinds_CONTAINS  RANRelationKinds = 1
	RANRelationKinds_NEIGHBORS RANRelationKinds = 2
)

var RANRelationKinds_name = map[int32]string{
	0: "CONTROLS",
	1: "CONTAINS",
	2: "NEIGHBORS",
}

var RANRelationKinds_value = map[string]int32{
	"CONTROLS":  0,
	"CONTAINS":  1,
	"NEIGHBORS": 2,
}

func (x RANRelationKinds) String() string {
	return proto.EnumName(RANRelationKinds_name, int32(x))
}

func (RANRelationKinds) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{1}
}

type CellGlobalIDType int32

const (
	CellGlobalIDType_NRCGI CellGlobalIDType = 0
	CellGlobalIDType_ECGI  CellGlobalIDType = 1
)

var CellGlobalIDType_name = map[int32]string{
	0: "NRCGI",
	1: "ECGI",
}

var CellGlobalIDType_value = map[string]int32{
	"NRCGI": 0,
	"ECGI":  1,
}

func (x CellGlobalIDType) String() string {
	return proto.EnumName(CellGlobalIDType_name, int32(x))
}

func (CellGlobalIDType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{2}
}

// NodeType is for use in encoding node type in topo Entity URI identifier; see section 9.2.6 of ORAN E2AP v02.00 spec
type NodeType int32

const (
	NodeType_NT_NONE   NodeType = 0
	NodeType_NT_GNB    NodeType = 1
	NodeType_NT_EN_GNB NodeType = 2
	NodeType_NT_NG_ENB NodeType = 3
	NodeType_NT_ENB    NodeType = 4
)

var NodeType_name = map[int32]string{
	0: "NT_NONE",
	1: "NT_GNB",
	2: "NT_EN_GNB",
	3: "NT_NG_ENB",
	4: "NT_ENB",
}

var NodeType_value = map[string]int32{
	"NT_NONE":   0,
	"NT_GNB":    1,
	"NT_EN_GNB": 2,
	"NT_NG_ENB": 3,
	"NT_ENB":    4,
}

func (x NodeType) String() string {
	return proto.EnumName(NodeType_name, int32(x))
}

func (NodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{3}
}

// ComponentType is for use in encoding node component type in topo Entity URI identifier; see section 9.2.6 of ORAN E2AP v02.00 spec
type ComponentType int32

const (
	ComponentType_CT_NONE  ComponentType = 0
	ComponentType_CT_CU    ComponentType = 1
	ComponentType_CT_CU_UP ComponentType = 2
	ComponentType_CT_DU    ComponentType = 3
	ComponentType_CT_ENB   ComponentType = 4
)

var ComponentType_name = map[int32]string{
	0: "CT_NONE",
	1: "CT_CU",
	2: "CT_CU_UP",
	3: "CT_DU",
	4: "CT_ENB",
}

var ComponentType_value = map[string]int32{
	"CT_NONE":  0,
	"CT_CU":    1,
	"CT_CU_UP": 2,
	"CT_DU":    3,
	"CT_ENB":   4,
}

func (x ComponentType) String() string {
	return proto.EnumName(ComponentType_name, int32(x))
}

func (ComponentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{4}
}

type E2SmRsmCommand int32

const (
	E2SmRsmCommand_E2_SM_RSM_COMMAND_SLICE_CREATE   E2SmRsmCommand = 0
	E2SmRsmCommand_E2_SM_RSM_COMMAND_SLICE_UPDATE   E2SmRsmCommand = 1
	E2SmRsmCommand_E2_SM_RSM_COMMAND_SLICE_DELETE   E2SmRsmCommand = 2
	E2SmRsmCommand_E2_SM_RSM_COMMAND_UE_ASSOCIATE   E2SmRsmCommand = 3
	E2SmRsmCommand_E2_SM_RSM_COMMAND_EVENT_TRIGGERS E2SmRsmCommand = 4
)

var E2SmRsmCommand_name = map[int32]string{
	0: "E2_SM_RSM_COMMAND_SLICE_CREATE",
	1: "E2_SM_RSM_COMMAND_SLICE_UPDATE",
	2: "E2_SM_RSM_COMMAND_SLICE_DELETE",
	3: "E2_SM_RSM_COMMAND_UE_ASSOCIATE",
	4: "E2_SM_RSM_COMMAND_EVENT_TRIGGERS",
}

var E2SmRsmCommand_value = map[string]int32{
	"E2_SM_RSM_COMMAND_SLICE_CREATE":   0,
	"E2_SM_RSM_COMMAND_SLICE_UPDATE":   1,
	"E2_SM_RSM_COMMAND_SLICE_DELETE":   2,
	"E2_SM_RSM_COMMAND_UE_ASSOCIATE":   3,
	"E2_SM_RSM_COMMAND_EVENT_TRIGGERS": 4,
}

func (x E2SmRsmCommand) String() string {
	return proto.EnumName(E2SmRsmCommand_name, int32(x))
}

func (E2SmRsmCommand) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{5}
}

type RSMSlicingType int32

const (
	RSMSlicingType_SLICING_TYPE_STATIC  RSMSlicingType = 0
	RSMSlicingType_SLICING_TYPE_DYNAMIC RSMSlicingType = 1
)

var RSMSlicingType_name = map[int32]string{
	0: "SLICING_TYPE_STATIC",
	1: "SLICING_TYPE_DYNAMIC",
}

var RSMSlicingType_value = map[string]int32{
	"SLICING_TYPE_STATIC":  0,
	"SLICING_TYPE_DYNAMIC": 1,
}

func (x RSMSlicingType) String() string {
	return proto.EnumName(RSMSlicingType_name, int32(x))
}

func (RSMSlicingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{6}
}

type RSMSchedulerType int32

const (
	RSMSchedulerType_SCHEDULER_TYPE_ROUND_ROBIN         RSMSchedulerType = 0
	RSMSchedulerType_SCHEDULER_TYPE_PROPORTIONALLY_FAIR RSMSchedulerType = 1
	RSMSchedulerType_SCHEDULER_TYPE_QOS_BASED           RSMSchedulerType = 2
)

var RSMSchedulerType_name = map[int32]string{
	0: "SCHEDULER_TYPE_ROUND_ROBIN",
	1: "SCHEDULER_TYPE_PROPORTIONALLY_FAIR",
	2: "SCHEDULER_TYPE_QOS_BASED",
}

var RSMSchedulerType_value = map[string]int32{
	"SCHEDULER_TYPE_ROUND_ROBIN":         0,
	"SCHEDULER_TYPE_PROPORTIONALLY_FAIR": 1,
	"SCHEDULER_TYPE_QOS_BASED":           2,
}

func (x RSMSchedulerType) String() string {
	return proto.EnumName(RSMSchedulerType_name, int32(x))
}

func (RSMSchedulerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{7}
}

type RSMSliceType int32

const (
	RSMSliceType_SLICE_TYPE_DL_SLICE RSMSliceType = 0
	RSMSliceType_SLICE_TYPE_UL_SLICE RSMSliceType = 1
)

var RSMSliceType_name = map[int32]string{
	0: "SLICE_TYPE_DL_SLICE",
	1: "SLICE_TYPE_UL_SLICE",
}

var RSMSliceType_value = map[string]int32{
	"SLICE_TYPE_DL_SLICE": 0,
	"SLICE_TYPE_UL_SLICE": 1,
}

func (x RSMSliceType) String() string {
	return proto.EnumName(RSMSliceType_name, int32(x))
}

func (RSMSliceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{8}
}

type UeIdType int32

const (
	UeIdType_UE_ID_TYPE_CU_UE_F1_AP_ID  UeIdType = 0
	UeIdType_UE_ID_TYPE_DU_UE_F1_AP_ID  UeIdType = 1
	UeIdType_UE_ID_TYPE_RAN_UE_NGAP_ID  UeIdType = 2
	UeIdType_UE_ID_TYPE_AMF_UE_NGAP_ID  UeIdType = 3
	UeIdType_UE_ID_TYPE_ENB_UE_S1_AP_ID UeIdType = 4
)

var UeIdType_name = map[int32]string{
	0: "UE_ID_TYPE_CU_UE_F1_AP_ID",
	1: "UE_ID_TYPE_DU_UE_F1_AP_ID",
	2: "UE_ID_TYPE_RAN_UE_NGAP_ID",
	3: "UE_ID_TYPE_AMF_UE_NGAP_ID",
	4: "UE_ID_TYPE_ENB_UE_S1_AP_ID",
}

var UeIdType_value = map[string]int32{
	"UE_ID_TYPE_CU_UE_F1_AP_ID":  0,
	"UE_ID_TYPE_DU_UE_F1_AP_ID":  1,
	"UE_ID_TYPE_RAN_UE_NGAP_ID":  2,
	"UE_ID_TYPE_AMF_UE_NGAP_ID":  3,
	"UE_ID_TYPE_ENB_UE_S1_AP_ID": 4,
}

func (x UeIdType) String() string {
	return proto.EnumName(UeIdType_name, int32(x))
}

func (UeIdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{9}
}

type Interface_Type int32

const (
	Interface_INTERFACE_UNKNOWN Interface_Type = 0
	Interface_INTERFACE_E2T     Interface_Type = 1
	Interface_INTERFACE_E2AP101 Interface_Type = 2
	Interface_INTERFACE_E2AP200 Interface_Type = 3
	Interface_INTERFACE_A1_XAPP Interface_Type = 4
	Interface_INTERFACE_A1AP    Interface_Type = 5
)

var Interface_Type_name = map[int32]string{
	0: "INTERFACE_UNKNOWN",
	1: "INTERFACE_E2T",
	2: "INTERFACE_E2AP101",
	3: "INTERFACE_E2AP200",
	4: "INTERFACE_A1_XAPP",
	5: "INTERFACE_A1AP",
}

var Interface_Type_value = map[string]int32{
	"INTERFACE_UNKNOWN": 0,
	"INTERFACE_E2T":     1,
	"INTERFACE_E2AP101": 2,
	"INTERFACE_E2AP200": 3,
	"INTERFACE_A1_XAPP": 4,
	"INTERFACE_A1AP":    5,
}

func (x Interface_Type) String() string {
	return proto.EnumName(Interface_Type_name, int32(x))
}

func (Interface_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{14, 0}
}

type Location struct {
	// Legacy Geographical location; expected value type of "location" aspect
	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"` // Deprecated: Do not use.
	Lng float64 `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"` // Deprecated: Do not use.
	// Types that are valid to be assigned to Ext:
	//	*Location_Wgs84
	//	*Location_Cartesian
	Ext isLocation_Ext `protobuf_oneof:"ext"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{0}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Location.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return m.Size()
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

type isLocation_Ext interface {
	isLocation_Ext()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Location_Wgs84 struct {
	Wgs84 *Wgs84Location `protobuf:"bytes,3,opt,name=wgs84,proto3,oneof" json:"wgs84,omitempty"`
}
type Location_Cartesian struct {
	Cartesian *CartesianLocation `protobuf:"bytes,4,opt,name=cartesian,proto3,oneof" json:"cartesian,omitempty"`
}

func (*Location_Wgs84) isLocation_Ext()     {}
func (*Location_Cartesian) isLocation_Ext() {}

func (m *Location) GetExt() isLocation_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

// Deprecated: Do not use.
func (m *Location) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

// Deprecated: Do not use.
func (m *Location) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func (m *Location) GetWgs84() *Wgs84Location {
	if x, ok := m.GetExt().(*Location_Wgs84); ok {
		return x.Wgs84
	}
	return nil
}

func (m *Location) GetCartesian() *CartesianLocation {
	if x, ok := m.GetExt().(*Location_Cartesian); ok {
		return x.Cartesian
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Location) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Location_Wgs84)(nil),
		(*Location_Cartesian)(nil),
	}
}

type Wgs84Location struct {
	// Latitude in degrees, between +/- 90.
	LatitudeDeg float64 `protobuf:"fixed64,1,opt,name=latitude_deg,json=latitudeDeg,proto3" json:"latitude_deg,omitempty"`
	// Longitude in degrees, between +/- 180.
	LongitudeDeg float64 `protobuf:"fixed64,2,opt,name=longitude_deg,json=longitudeDeg,proto3" json:"longitude_deg,omitempty"`
	// Altitude in meters, from the surface of the WGS-84 ellipsoid.
	AltitudeM float64 `protobuf:"fixed64,3,opt,name=altitude_m,json=altitudeM,proto3" json:"altitude_m,omitempty"`
}

func (m *Wgs84Location) Reset()         { *m = Wgs84Location{} }
func (m *Wgs84Location) String() string { return proto.CompactTextString(m) }
func (*Wgs84Location) ProtoMessage()    {}
func (*Wgs84Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{1}
}
func (m *Wgs84Location) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Wgs84Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Wgs84Location.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Wgs84Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wgs84Location.Merge(m, src)
}
func (m *Wgs84Location) XXX_Size() int {
	return m.Size()
}
func (m *Wgs84Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Wgs84Location.DiscardUnknown(m)
}

var xxx_messageInfo_Wgs84Location proto.InternalMessageInfo

func (m *Wgs84Location) GetLatitudeDeg() float64 {
	if m != nil {
		return m.LatitudeDeg
	}
	return 0
}

func (m *Wgs84Location) GetLongitudeDeg() float64 {
	if m != nil {
		return m.LongitudeDeg
	}
	return 0
}

func (m *Wgs84Location) GetAltitudeM() float64 {
	if m != nil {
		return m.AltitudeM
	}
	return 0
}

// ECEF-compatible cartesian coordinates.
type CartesianLocation struct {
	// X, Y, and Z coordinates in meters.
	XM float64 `protobuf:"fixed64,1,opt,name=x_m,json=xM,proto3" json:"x_m,omitempty"`
	YM float64 `protobuf:"fixed64,2,opt,name=y_m,json=yM,proto3" json:"y_m,omitempty"`
	ZM float64 `protobuf:"fixed64,3,opt,name=z_m,json=zM,proto3" json:"z_m,omitempty"`
}

func (m *CartesianLocation) Reset()         { *m = CartesianLocation{} }
func (m *CartesianLocation) String() string { return proto.CompactTextString(m) }
func (*CartesianLocation) ProtoMessage()    {}
func (*CartesianLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{2}
}
func (m *CartesianLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CartesianLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CartesianLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CartesianLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CartesianLocation.Merge(m, src)
}
func (m *CartesianLocation) XXX_Size() int {
	return m.Size()
}
func (m *CartesianLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_CartesianLocation.DiscardUnknown(m)
}

var xxx_messageInfo_CartesianLocation proto.InternalMessageInfo

func (m *CartesianLocation) GetXM() float64 {
	if m != nil {
		return m.XM
	}
	return 0
}

func (m *CartesianLocation) GetYM() float64 {
	if m != nil {
		return m.YM
	}
	return 0
}

func (m *CartesianLocation) GetZM() float64 {
	if m != nil {
		return m.ZM
	}
	return 0
}

type AzElOrientation struct {
	// Azimuth angle in degrees.
	AzimuthDeg float64 `protobuf:"fixed64,1,opt,name=azimuth_deg,json=azimuthDeg,proto3" json:"azimuth_deg,omitempty"`
	// Elevation angle in degrees.
	ElevationDeg float64 `protobuf:"fixed64,2,opt,name=elevation_deg,json=elevationDeg,proto3" json:"elevation_deg,omitempty"`
	// Rotation around boresight in degrees.
	RotationDeg float64 `protobuf:"fixed64,3,opt,name=rotation_deg,json=rotationDeg,proto3" json:"rotation_deg,omitempty"`
}

func (m *AzElOrientation) Reset()         { *m = AzElOrientation{} }
func (m *AzElOrientation) String() string { return proto.CompactTextString(m) }
func (*AzElOrientation) ProtoMessage()    {}
func (*AzElOrientation) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{3}
}
func (m *AzElOrientation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzElOrientation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AzElOrientation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AzElOrientation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzElOrientation.Merge(m, src)
}
func (m *AzElOrientation) XXX_Size() int {
	return m.Size()
}
func (m *AzElOrientation) XXX_DiscardUnknown() {
	xxx_messageInfo_AzElOrientation.DiscardUnknown(m)
}

var xxx_messageInfo_AzElOrientation proto.InternalMessageInfo

func (m *AzElOrientation) GetAzimuthDeg() float64 {
	if m != nil {
		return m.AzimuthDeg
	}
	return 0
}

func (m *AzElOrientation) GetElevationDeg() float64 {
	if m != nil {
		return m.ElevationDeg
	}
	return 0
}

func (m *AzElOrientation) GetRotationDeg() float64 {
	if m != nil {
		return m.RotationDeg
	}
	return 0
}

type YprOrientation struct {
	// Yaw angle around z-axis.
	YawDeg float64 `protobuf:"fixed64,1,opt,name=yaw_deg,json=yawDeg,proto3" json:"yaw_deg,omitempty"`
	// Pitch angle around y-axix.
	PitchDeg float64 `protobuf:"fixed64,2,opt,name=pitch_deg,json=pitchDeg,proto3" json:"pitch_deg,omitempty"`
	// Roll angle around x-axis.
	RollDeg float64 `protobuf:"fixed64,3,opt,name=roll_deg,json=rollDeg,proto3" json:"roll_deg,omitempty"`
}

func (m *YprOrientation) Reset()         { *m = YprOrientation{} }
func (m *YprOrientation) String() string { return proto.CompactTextString(m) }
func (*YprOrientation) ProtoMessage()    {}
func (*YprOrientation) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{4}
}
func (m *YprOrientation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YprOrientation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YprOrientation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YprOrientation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YprOrientation.Merge(m, src)
}
func (m *YprOrientation) XXX_Size() int {
	return m.Size()
}
func (m *YprOrientation) XXX_DiscardUnknown() {
	xxx_messageInfo_YprOrientation.DiscardUnknown(m)
}

var xxx_messageInfo_YprOrientation proto.InternalMessageInfo

func (m *YprOrientation) GetYawDeg() float64 {
	if m != nil {
		return m.YawDeg
	}
	return 0
}

func (m *YprOrientation) GetPitchDeg() float64 {
	if m != nil {
		return m.PitchDeg
	}
	return 0
}

func (m *YprOrientation) GetRollDeg() float64 {
	if m != nil {
		return m.RollDeg
	}
	return 0
}

type Orientation struct {
	// Types that are valid to be assigned to Orientation:
	//	*Orientation_Azel
	//	*Orientation_Ypr
	Orientation isOrientation_Orientation `protobuf_oneof:"orientation"`
}

func (m *Orientation) Reset()         { *m = Orientation{} }
func (m *Orientation) String() string { return proto.CompactTextString(m) }
func (*Orientation) ProtoMessage()    {}
func (*Orientation) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{5}
}
func (m *Orientation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Orientation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Orientation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Orientation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Orientation.Merge(m, src)
}
func (m *Orientation) XXX_Size() int {
	return m.Size()
}
func (m *Orientation) XXX_DiscardUnknown() {
	xxx_messageInfo_Orientation.DiscardUnknown(m)
}

var xxx_messageInfo_Orientation proto.InternalMessageInfo

type isOrientation_Orientation interface {
	isOrientation_Orientation()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Orientation_Azel struct {
	Azel *AzElOrientation `protobuf:"bytes,1,opt,name=azel,proto3,oneof" json:"azel,omitempty"`
}
type Orientation_Ypr struct {
	Ypr *YprOrientation `protobuf:"bytes,2,opt,name=ypr,proto3,oneof" json:"ypr,omitempty"`
}

func (*Orientation_Azel) isOrientation_Orientation() {}
func (*Orientation_Ypr) isOrientation_Orientation()  {}

func (m *Orientation) GetOrientation() isOrientation_Orientation {
	if m != nil {
		return m.Orientation
	}
	return nil
}

func (m *Orientation) GetAzel() *AzElOrientation {
	if x, ok := m.GetOrientation().(*Orientation_Azel); ok {
		return x.Azel
	}
	return nil
}

func (m *Orientation) GetYpr() *YprOrientation {
	if x, ok := m.GetOrientation().(*Orientation_Ypr); ok {
		return x.Ypr
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Orientation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Orientation_Azel)(nil),
		(*Orientation_Ypr)(nil),
	}
}

type Waypoint struct {
	Time     *types.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Location *Location        `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (m *Waypoint) Reset()         { *m = Waypoint{} }
func (m *Waypoint) String() string { return proto.CompactTextString(m) }
func (*Waypoint) ProtoMessage()    {}
func (*Waypoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{6}
}
func (m *Waypoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Waypoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Waypoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Waypoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Waypoint.Merge(m, src)
}
func (m *Waypoint) XXX_Size() int {
	return m.Size()
}
func (m *Waypoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Waypoint.DiscardUnknown(m)
}

var xxx_messageInfo_Waypoint proto.InternalMessageInfo

func (m *Waypoint) GetTime() *types.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Waypoint) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

// A set of waypoints that can be interpolated.
type Waypoints struct {
	Waypoint []*Waypoint `protobuf:"bytes,1,rep,name=waypoint,proto3" json:"waypoint,omitempty"`
}

func (m *Waypoints) Reset()         { *m = Waypoints{} }
func (m *Waypoints) String() string { return proto.CompactTextString(m) }
func (*Waypoints) ProtoMessage()    {}
func (*Waypoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{7}
}
func (m *Waypoints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Waypoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Waypoints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Waypoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Waypoints.Merge(m, src)
}
func (m *Waypoints) XXX_Size() int {
	return m.Size()
}
func (m *Waypoints) XXX_DiscardUnknown() {
	xxx_messageInfo_Waypoints.DiscardUnknown(m)
}

var xxx_messageInfo_Waypoints proto.InternalMessageInfo

func (m *Waypoints) GetWaypoint() []*Waypoint {
	if m != nil {
		return m.Waypoint
	}
	return nil
}

// Minimal satellite orbit data, e.g. from a TLE, that can be propagated.
type OrbitData struct {
	Epoch *types.Timestamp `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Orbit inclination in degrees.
	InclinationDeg float64 `protobuf:"fixed64,2,opt,name=inclination_deg,json=inclinationDeg,proto3" json:"inclination_deg,omitempty"`
	// Right ascension of the ascending node in degrees.
	RaanDeg float64 `protobuf:"fixed64,3,opt,name=raan_deg,json=raanDeg,proto3" json:"raan_deg,omitempty"`
	// Orbit eccentricity.
	E float64 `protobuf:"fixed64,4,opt,name=e,proto3" json:"e,omitempty"`
	// Argument of perigee in degrees.
	ArgumentDeg float64 `protobuf:"fixed64,5,opt,name=argument_deg,json=argumentDeg,proto3" json:"argument_deg,omitempty"`
	// Mean anomaly in degrees.
	AnomalyDeg float64 `protobuf:"fixed64,6,opt,name=anomaly_deg,json=anomalyDeg,proto3" json:"anomaly_deg,omitempty"`
	// Mean motion in revolutions per day.
	MeanMotion float64 `protobuf:"fixed64,7,opt,name=mean_motion,json=meanMotion,proto3" json:"mean_motion,omitempty"`
}

func (m *OrbitData) Reset()         { *m = OrbitData{} }
func (m *OrbitData) String() string { return proto.CompactTextString(m) }
func (*OrbitData) ProtoMessage()    {}
func (*OrbitData) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{8}
}
func (m *OrbitData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrbitData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrbitData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrbitData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrbitData.Merge(m, src)
}
func (m *OrbitData) XXX_Size() int {
	return m.Size()
}
func (m *OrbitData) XXX_DiscardUnknown() {
	xxx_messageInfo_OrbitData.DiscardUnknown(m)
}

var xxx_messageInfo_OrbitData proto.InternalMessageInfo

func (m *OrbitData) GetEpoch() *types.Timestamp {
	if m != nil {
		return m.Epoch
	}
	return nil
}

func (m *OrbitData) GetInclinationDeg() float64 {
	if m != nil {
		return m.InclinationDeg
	}
	return 0
}

func (m *OrbitData) GetRaanDeg() float64 {
	if m != nil {
		return m.RaanDeg
	}
	return 0
}

func (m *OrbitData) GetE() float64 {
	if m != nil {
		return m.E
	}
	return 0
}

func (m *OrbitData) GetArgumentDeg() float64 {
	if m != nil {
		return m.ArgumentDeg
	}
	return 0
}

func (m *OrbitData) GetAnomalyDeg() float64 {
	if m != nil {
		return m.AnomalyDeg
	}
	return 0
}

func (m *OrbitData) GetMeanMotion() float64 {
	if m != nil {
		return m.MeanMotion
	}
	return 0
}

type Motion struct {
	// Types that are valid to be assigned to Motion:
	//	*Motion_FixedLocation
	//	*Motion_Waypoints
	//	*Motion_Orbit
	Motion isMotion_Motion `protobuf_oneof:"motion"`
}

func (m *Motion) Reset()         { *m = Motion{} }
func (m *Motion) String() string { return proto.CompactTextString(m) }
func (*Motion) ProtoMessage()    {}
func (*Motion) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{9}
}
func (m *Motion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Motion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Motion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Motion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Motion.Merge(m, src)
}
func (m *Motion) XXX_Size() int {
	return m.Size()
}
func (m *Motion) XXX_DiscardUnknown() {
	xxx_messageInfo_Motion.DiscardUnknown(m)
}

var xxx_messageInfo_Motion proto.InternalMessageInfo

type isMotion_Motion interface {
	isMotion_Motion()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Motion_FixedLocation struct {
	FixedLocation *Location `protobuf:"bytes,1,opt,name=fixed_location,json=fixedLocation,proto3,oneof" json:"fixed_location,omitempty"`
}
type Motion_Waypoints struct {
	Waypoints *Waypoints `protobuf:"bytes,2,opt,name=waypoints,proto3,oneof" json:"waypoints,omitempty"`
}
type Motion_Orbit struct {
	Orbit *OrbitData `protobuf:"bytes,3,opt,name=orbit,proto3,oneof" json:"orbit,omitempty"`
}

func (*Motion_FixedLocation) isMotion_Motion() {}
func (*Motion_Waypoints) isMotion_Motion()     {}
func (*Motion_Orbit) isMotion_Motion()         {}

func (m *Motion) GetMotion() isMotion_Motion {
	if m != nil {
		return m.Motion
	}
	return nil
}

func (m *Motion) GetFixedLocation() *Location {
	if x, ok := m.GetMotion().(*Motion_FixedLocation); ok {
		return x.FixedLocation
	}
	return nil
}

func (m *Motion) GetWaypoints() *Waypoints {
	if x, ok := m.GetMotion().(*Motion_Waypoints); ok {
		return x.Waypoints
	}
	return nil
}

func (m *Motion) GetOrbit() *OrbitData {
	if x, ok := m.GetMotion().(*Motion_Orbit); ok {
		return x.Orbit
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Motion) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Motion_FixedLocation)(nil),
		(*Motion_Waypoints)(nil),
		(*Motion_Orbit)(nil),
	}
}

// Area of coverage; expected value type of "coverage" aspect
type Coverage struct {
	Height   int32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	ArcWidth int32 `protobuf:"varint,2,opt,name=arc_width,json=arcWidth,proto3" json:"arc_width,omitempty"`
	Azimuth  int32 `protobuf:"varint,3,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	Tilt     int32 `protobuf:"varint,4,opt,name=tilt,proto3" json:"tilt,omitempty"`
}

func (m *Coverage) Reset()         { *m = Coverage{} }
func (m *Coverage) String() string { return proto.CompactTextString(m) }
func (*Coverage) ProtoMessage()    {}
func (*Coverage) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{10}
}
func (m *Coverage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Coverage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Coverage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Coverage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coverage.Merge(m, src)
}
func (m *Coverage) XXX_Size() int {
	return m.Size()
}
func (m *Coverage) XXX_DiscardUnknown() {
	xxx_messageInfo_Coverage.DiscardUnknown(m)
}

var xxx_messageInfo_Coverage proto.InternalMessageInfo

func (m *Coverage) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Coverage) GetArcWidth() int32 {
	if m != nil {
		return m.ArcWidth
	}
	return 0
}

func (m *Coverage) GetAzimuth() int32 {
	if m != nil {
		return m.Azimuth
	}
	return 0
}

func (m *Coverage) GetTilt() int32 {
	if m != nil {
		return m.Tilt
	}
	return 0
}

// E2Node aspect; expected value type of "E2NODE" aspect and expected on entities of "E2NODE" kind
type E2Node struct {
	ServiceModels map[string]*ServiceModelInfo `protobuf:"bytes,1,rep,name=service_models,json=serviceModels,proto3" json:"service_models,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *E2Node) Reset()         { *m = E2Node{} }
func (m *E2Node) String() string { return proto.CompactTextString(m) }
func (*E2Node) ProtoMessage()    {}
func (*E2Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{11}
}
func (m *E2Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2Node.Merge(m, src)
}
func (m *E2Node) XXX_Size() int {
	return m.Size()
}
func (m *E2Node) XXX_DiscardUnknown() {
	xxx_messageInfo_E2Node.DiscardUnknown(m)
}

var xxx_messageInfo_E2Node proto.InternalMessageInfo

func (m *E2Node) GetServiceModels() map[string]*ServiceModelInfo {
	if m != nil {
		return m.ServiceModels
	}
	return nil
}

// E2NodeConfig aspect tracks the managed configuration for an E2 node
type E2NodeConfig struct {
	Connections []Interface `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections"`
	Version     uint64      `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *E2NodeConfig) Reset()         { *m = E2NodeConfig{} }
func (m *E2NodeConfig) String() string { return proto.CompactTextString(m) }
func (*E2NodeConfig) ProtoMessage()    {}
func (*E2NodeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{12}
}
func (m *E2NodeConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2NodeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2NodeConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2NodeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2NodeConfig.Merge(m, src)
}
func (m *E2NodeConfig) XXX_Size() int {
	return m.Size()
}
func (m *E2NodeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_E2NodeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_E2NodeConfig proto.InternalMessageInfo

func (m *E2NodeConfig) GetConnections() []Interface {
	if m != nil {
		return m.Connections
	}
	return nil
}

func (m *E2NodeConfig) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

// Lease aspect with an expiration timestamp for RAN entities
type Lease struct {
	Expiration *time.Time `protobuf:"bytes,1,opt,name=expiration,proto3,stdtime" json:"expiration,omitempty"`
}

func (m *Lease) Reset()         { *m = Lease{} }
func (m *Lease) String() string { return proto.CompactTextString(m) }
func (*Lease) ProtoMessage()    {}
func (*Lease) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{13}
}
func (m *Lease) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lease.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lease.Merge(m, src)
}
func (m *Lease) XXX_Size() int {
	return m.Size()
}
func (m *Lease) XXX_DiscardUnknown() {
	xxx_messageInfo_Lease.DiscardUnknown(m)
}

var xxx_messageInfo_Lease proto.InternalMessageInfo

func (m *Lease) GetExpiration() *time.Time {
	if m != nil {
		return m.Expiration
	}
	return nil
}

// Interface determines address and type of an endpoint interface
type Interface struct {
	Type Interface_Type `protobuf:"varint,1,opt,name=type,proto3,enum=onos.topo.Interface_Type" json:"type,omitempty"`
	IP   string         `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port uint32         `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *Interface) Reset()         { *m = Interface{} }
func (m *Interface) String() string { return proto.CompactTextString(m) }
func (*Interface) ProtoMessage()    {}
func (*Interface) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{14}
}
func (m *Interface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Interface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Interface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface.Merge(m, src)
}
func (m *Interface) XXX_Size() int {
	return m.Size()
}
func (m *Interface) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface.DiscardUnknown(m)
}

var xxx_messageInfo_Interface proto.InternalMessageInfo

func (m *Interface) GetType() Interface_Type {
	if m != nil {
		return m.Type
	}
	return Interface_INTERFACE_UNKNOWN
}

func (m *Interface) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *Interface) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// E2TInfo E2T aspect;
type E2TInfo struct {
	Interfaces []*Interface `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (m *E2TInfo) Reset()         { *m = E2TInfo{} }
func (m *E2TInfo) String() string { return proto.CompactTextString(m) }
func (*E2TInfo) ProtoMessage()    {}
func (*E2TInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{15}
}
func (m *E2TInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2TInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2TInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2TInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2TInfo.Merge(m, src)
}
func (m *E2TInfo) XXX_Size() int {
	return m.Size()
}
func (m *E2TInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_E2TInfo.DiscardUnknown(m)
}

var xxx_messageInfo_E2TInfo proto.InternalMessageInfo

func (m *E2TInfo) GetInterfaces() []*Interface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

type XAppInfo struct {
	Interfaces    []*Interface    `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	A1PolicyTypes []*A1PolicyType `protobuf:"bytes,2,rep,name=a1_policy_types,json=a1PolicyTypes,proto3" json:"a1_policy_types,omitempty"`
}

func (m *XAppInfo) Reset()         { *m = XAppInfo{} }
func (m *XAppInfo) String() string { return proto.CompactTextString(m) }
func (*XAppInfo) ProtoMessage()    {}
func (*XAppInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{16}
}
func (m *XAppInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XAppInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XAppInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XAppInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XAppInfo.Merge(m, src)
}
func (m *XAppInfo) XXX_Size() int {
	return m.Size()
}
func (m *XAppInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_XAppInfo.DiscardUnknown(m)
}

var xxx_messageInfo_XAppInfo proto.InternalMessageInfo

func (m *XAppInfo) GetInterfaces() []*Interface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *XAppInfo) GetA1PolicyTypes() []*A1PolicyType {
	if m != nil {
		return m.A1PolicyTypes
	}
	return nil
}

type A1PolicyType struct {
	A1PolicyTypeId    string `protobuf:"bytes,1,opt,name=a1_policy_type_id,json=a1PolicyTypeId,proto3" json:"a1_policy_type_id,omitempty"`
	A1TypeName        string `protobuf:"bytes,2,opt,name=a1_type_name,json=a1TypeName,proto3" json:"a1_type_name,omitempty"`
	A1TypeVersion     string `protobuf:"bytes,3,opt,name=a1_type_version,json=a1TypeVersion,proto3" json:"a1_type_version,omitempty"`
	A1TypeDescription string `protobuf:"bytes,4,opt,name=a1_type_description,json=a1TypeDescription,proto3" json:"a1_type_description,omitempty"`
}

func (m *A1PolicyType) Reset()         { *m = A1PolicyType{} }
func (m *A1PolicyType) String() string { return proto.CompactTextString(m) }
func (*A1PolicyType) ProtoMessage()    {}
func (*A1PolicyType) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{17}
}
func (m *A1PolicyType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *A1PolicyType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_A1PolicyType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *A1PolicyType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_A1PolicyType.Merge(m, src)
}
func (m *A1PolicyType) XXX_Size() int {
	return m.Size()
}
func (m *A1PolicyType) XXX_DiscardUnknown() {
	xxx_messageInfo_A1PolicyType.DiscardUnknown(m)
}

var xxx_messageInfo_A1PolicyType proto.InternalMessageInfo

func (m *A1PolicyType) GetA1PolicyTypeId() string {
	if m != nil {
		return m.A1PolicyTypeId
	}
	return ""
}

func (m *A1PolicyType) GetA1TypeName() string {
	if m != nil {
		return m.A1TypeName
	}
	return ""
}

func (m *A1PolicyType) GetA1TypeVersion() string {
	if m != nil {
		return m.A1TypeVersion
	}
	return ""
}

func (m *A1PolicyType) GetA1TypeDescription() string {
	if m != nil {
		return m.A1TypeDescription
	}
	return ""
}

type A1TInfo struct {
	Interfaces []*Interface `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (m *A1TInfo) Reset()         { *m = A1TInfo{} }
func (m *A1TInfo) String() string { return proto.CompactTextString(m) }
func (*A1TInfo) ProtoMessage()    {}
func (*A1TInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{18}
}
func (m *A1TInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *A1TInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_A1TInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *A1TInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_A1TInfo.Merge(m, src)
}
func (m *A1TInfo) XXX_Size() int {
	return m.Size()
}
func (m *A1TInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_A1TInfo.DiscardUnknown(m)
}

var xxx_messageInfo_A1TInfo proto.InternalMessageInfo

func (m *A1TInfo) GetInterfaces() []*Interface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

type CellGlobalID struct {
	Value string           `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Type  CellGlobalIDType `protobuf:"varint,2,opt,name=type,proto3,enum=onos.topo.CellGlobalIDType" json:"type,omitempty"`
}

func (m *CellGlobalID) Reset()         { *m = CellGlobalID{} }
func (m *CellGlobalID) String() string { return proto.CompactTextString(m) }
func (*CellGlobalID) ProtoMessage()    {}
func (*CellGlobalID) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{19}
}
func (m *CellGlobalID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CellGlobalID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CellGlobalID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CellGlobalID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellGlobalID.Merge(m, src)
}
func (m *CellGlobalID) XXX_Size() int {
	return m.Size()
}
func (m *CellGlobalID) XXX_DiscardUnknown() {
	xxx_messageInfo_CellGlobalID.DiscardUnknown(m)
}

var xxx_messageInfo_CellGlobalID proto.InternalMessageInfo

func (m *CellGlobalID) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CellGlobalID) GetType() CellGlobalIDType {
	if m != nil {
		return m.Type
	}
	return CellGlobalIDType_NRCGI
}

type NeighborCellID struct {
	CellGlobalID *CellGlobalID `protobuf:"bytes,1,opt,name=cell_global_id,json=cellGlobalId,proto3" json:"cell_global_id,omitempty"`
	PlmnID       string        `protobuf:"bytes,2,opt,name=plmn_id,json=plmnId,proto3" json:"plmn_id,omitempty"`
}

func (m *NeighborCellID) Reset()         { *m = NeighborCellID{} }
func (m *NeighborCellID) String() string { return proto.CompactTextString(m) }
func (*NeighborCellID) ProtoMessage()    {}
func (*NeighborCellID) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{20}
}
func (m *NeighborCellID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NeighborCellID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NeighborCellID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NeighborCellID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NeighborCellID.Merge(m, src)
}
func (m *NeighborCellID) XXX_Size() int {
	return m.Size()
}
func (m *NeighborCellID) XXX_DiscardUnknown() {
	xxx_messageInfo_NeighborCellID.DiscardUnknown(m)
}

var xxx_messageInfo_NeighborCellID proto.InternalMessageInfo

func (m *NeighborCellID) GetCellGlobalID() *CellGlobalID {
	if m != nil {
		return m.CellGlobalID
	}
	return nil
}

func (m *NeighborCellID) GetPlmnID() string {
	if m != nil {
		return m.PlmnID
	}
	return ""
}

// E2Cell aspect; expected value type of "E2CELL" aspect and expected on entities of "E2CELL" kind
type E2Cell struct {
	CellObjectID    string            `protobuf:"bytes,1,opt,name=cell_object_id,json=cellObjectId,proto3" json:"cell_object_id,omitempty"`
	CellGlobalID    *CellGlobalID     `protobuf:"bytes,2,opt,name=cell_global_id,json=cellGlobalId,proto3" json:"cell_global_id,omitempty"`
	AntennaCount    uint32            `protobuf:"varint,3,opt,name=antenna_count,json=antennaCount,proto3" json:"antenna_count,omitempty"`
	EARFCN          uint32            `protobuf:"varint,4,opt,name=earfcn,proto3" json:"earfcn,omitempty"`
	CellType        string            `protobuf:"bytes,5,opt,name=cell_type,json=cellType,proto3" json:"cell_type,omitempty"`
	PCI             uint32            `protobuf:"varint,6,opt,name=pci,proto3" json:"pci,omitempty"`
	KpiReports      map[string]uint32 `protobuf:"bytes,7,rep,name=kpi_reports,json=kpiReports,proto3" json:"kpi_reports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NeighborCellIDs []*NeighborCellID `protobuf:"bytes,8,rep,name=neighbor_cell_ids,json=neighborCellIds,proto3" json:"neighbor_cell_ids,omitempty"`
}

func (m *E2Cell) Reset()         { *m = E2Cell{} }
func (m *E2Cell) String() string { return proto.CompactTextString(m) }
func (*E2Cell) ProtoMessage()    {}
func (*E2Cell) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{21}
}
func (m *E2Cell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *E2Cell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_E2Cell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *E2Cell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2Cell.Merge(m, src)
}
func (m *E2Cell) XXX_Size() int {
	return m.Size()
}
func (m *E2Cell) XXX_DiscardUnknown() {
	xxx_messageInfo_E2Cell.DiscardUnknown(m)
}

var xxx_messageInfo_E2Cell proto.InternalMessageInfo

func (m *E2Cell) GetCellObjectID() string {
	if m != nil {
		return m.CellObjectID
	}
	return ""
}

func (m *E2Cell) GetCellGlobalID() *CellGlobalID {
	if m != nil {
		return m.CellGlobalID
	}
	return nil
}

func (m *E2Cell) GetAntennaCount() uint32 {
	if m != nil {
		return m.AntennaCount
	}
	return 0
}

func (m *E2Cell) GetEARFCN() uint32 {
	if m != nil {
		return m.EARFCN
	}
	return 0
}

func (m *E2Cell) GetCellType() string {
	if m != nil {
		return m.CellType
	}
	return ""
}

func (m *E2Cell) GetPCI() uint32 {
	if m != nil {
		return m.PCI
	}
	return 0
}

func (m *E2Cell) GetKpiReports() map[string]uint32 {
	if m != nil {
		return m.KpiReports
	}
	return nil
}

func (m *E2Cell) GetNeighborCellIDs() []*NeighborCellID {
	if m != nil {
		return m.NeighborCellIDs
	}
	return nil
}

type ServiceModelInfo struct {
	OID            string       `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Name           string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RanFunctions   []*types.Any `protobuf:"bytes,3,rep,name=ran_functions,json=ranFunctions,proto3" json:"ran_functions,omitempty"`
	RanFunctionIDs []uint32     `protobuf:"varint,4,rep,packed,name=ranFunctionIDs,proto3" json:"ranFunctionIDs,omitempty"`
}

func (m *ServiceModelInfo) Reset()         { *m = ServiceModelInfo{} }
func (m *ServiceModelInfo) String() string { return proto.CompactTextString(m) }
func (*ServiceModelInfo) ProtoMessage()    {}
func (*ServiceModelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{22}
}
func (m *ServiceModelInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceModelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceModelInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceModelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceModelInfo.Merge(m, src)
}
func (m *ServiceModelInfo) XXX_Size() int {
	return m.Size()
}
func (m *ServiceModelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceModelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceModelInfo proto.InternalMessageInfo

func (m *ServiceModelInfo) GetOID() string {
	if m != nil {
		return m.OID
	}
	return ""
}

func (m *ServiceModelInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceModelInfo) GetRanFunctions() []*types.Any {
	if m != nil {
		return m.RanFunctions
	}
	return nil
}

func (m *ServiceModelInfo) GetRanFunctionIDs() []uint32 {
	if m != nil {
		return m.RanFunctionIDs
	}
	return nil
}

type RCRanFunction struct {
	ID           string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ReportStyles []*RCReportStyle `protobuf:"bytes,2,rep,name=report_styles,json=reportStyles,proto3" json:"report_styles,omitempty"`
}

func (m *RCRanFunction) Reset()         { *m = RCRanFunction{} }
func (m *RCRanFunction) String() string { return proto.CompactTextString(m) }
func (*RCRanFunction) ProtoMessage()    {}
func (*RCRanFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{23}
}
func (m *RCRanFunction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RCRanFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RCRanFunction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RCRanFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RCRanFunction.Merge(m, src)
}
func (m *RCRanFunction) XXX_Size() int {
	return m.Size()
}
func (m *RCRanFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_RCRanFunction.DiscardUnknown(m)
}

var xxx_messageInfo_RCRanFunction proto.InternalMessageInfo

func (m *RCRanFunction) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *RCRanFunction) GetReportStyles() []*RCReportStyle {
	if m != nil {
		return m.ReportStyles
	}
	return nil
}

type MHORanFunction struct {
	ID           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ReportStyles []*MHOReportStyle `protobuf:"bytes,2,rep,name=report_styles,json=reportStyles,proto3" json:"report_styles,omitempty"`
}

func (m *MHORanFunction) Reset()         { *m = MHORanFunction{} }
func (m *MHORanFunction) String() string { return proto.CompactTextString(m) }
func (*MHORanFunction) ProtoMessage()    {}
func (*MHORanFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{24}
}
func (m *MHORanFunction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MHORanFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MHORanFunction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MHORanFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MHORanFunction.Merge(m, src)
}
func (m *MHORanFunction) XXX_Size() int {
	return m.Size()
}
func (m *MHORanFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_MHORanFunction.DiscardUnknown(m)
}

var xxx_messageInfo_MHORanFunction proto.InternalMessageInfo

func (m *MHORanFunction) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *MHORanFunction) GetReportStyles() []*MHOReportStyle {
	if m != nil {
		return m.ReportStyles
	}
	return nil
}

type KPMRanFunction struct {
	ID           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ReportStyles []*KPMReportStyle `protobuf:"bytes,2,rep,name=report_styles,json=reportStyles,proto3" json:"report_styles,omitempty"`
}

func (m *KPMRanFunction) Reset()         { *m = KPMRanFunction{} }
func (m *KPMRanFunction) String() string { return proto.CompactTextString(m) }
func (*KPMRanFunction) ProtoMessage()    {}
func (*KPMRanFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{25}
}
func (m *KPMRanFunction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KPMRanFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KPMRanFunction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KPMRanFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KPMRanFunction.Merge(m, src)
}
func (m *KPMRanFunction) XXX_Size() int {
	return m.Size()
}
func (m *KPMRanFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_KPMRanFunction.DiscardUnknown(m)
}

var xxx_messageInfo_KPMRanFunction proto.InternalMessageInfo

func (m *KPMRanFunction) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *KPMRanFunction) GetReportStyles() []*KPMReportStyle {
	if m != nil {
		return m.ReportStyles
	}
	return nil
}

type RSMRanFunction struct {
	ID                           string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RicSlicingNodeCapabilityList []*RSMNodeSlicingCapabilityItem `protobuf:"bytes,2,rep,name=ric_slicing_node_capability_list,json=ricSlicingNodeCapabilityList,proto3" json:"ric_slicing_node_capability_list,omitempty"`
}

func (m *RSMRanFunction) Reset()         { *m = RSMRanFunction{} }
func (m *RSMRanFunction) String() string { return proto.CompactTextString(m) }
func (*RSMRanFunction) ProtoMessage()    {}
func (*RSMRanFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{26}
}
func (m *RSMRanFunction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RSMRanFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RSMRanFunction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RSMRanFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RSMRanFunction.Merge(m, src)
}
func (m *RSMRanFunction) XXX_Size() int {
	return m.Size()
}
func (m *RSMRanFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_RSMRanFunction.DiscardUnknown(m)
}

var xxx_messageInfo_RSMRanFunction proto.InternalMessageInfo

func (m *RSMRanFunction) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *RSMRanFunction) GetRicSlicingNodeCapabilityList() []*RSMNodeSlicingCapabilityItem {
	if m != nil {
		return m.RicSlicingNodeCapabilityList
	}
	return nil
}

type RSMNodeSlicingCapabilityItem struct {
	MaxNumberOfSlicesDl    int32                            `protobuf:"varint,1,opt,name=max_number_of_slices_dl,json=maxNumberOfSlicesDl,proto3" json:"max_number_of_slices_dl,omitempty"`
	MaxNumberOfSlicesUl    int32                            `protobuf:"varint,2,opt,name=max_number_of_slices_ul,json=maxNumberOfSlicesUl,proto3" json:"max_number_of_slices_ul,omitempty"`
	SlicingType            RSMSlicingType                   `protobuf:"varint,3,opt,name=slicing_type,json=slicingType,proto3,enum=onos.topo.RSMSlicingType" json:"slicing_type,omitempty"`
	MaxNumberOfUesPerSlice int32                            `protobuf:"varint,4,opt,name=max_number_of_ues_per_slice,json=maxNumberOfUesPerSlice,proto3" json:"max_number_of_ues_per_slice,omitempty"`
	SupportedConfig        []*RSMSupportedSlicingConfigItem `protobuf:"bytes,5,rep,name=supported_config,json=supportedConfig,proto3" json:"supported_config,omitempty"`
}

func (m *RSMNodeSlicingCapabilityItem) Reset()         { *m = RSMNodeSlicingCapabilityItem{} }
func (m *RSMNodeSlicingCapabilityItem) String() string { return proto.CompactTextString(m) }
func (*RSMNodeSlicingCapabilityItem) ProtoMessage()    {}
func (*RSMNodeSlicingCapabilityItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{27}
}
func (m *RSMNodeSlicingCapabilityItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RSMNodeSlicingCapabilityItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RSMNodeSlicingCapabilityItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RSMNodeSlicingCapabilityItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RSMNodeSlicingCapabilityItem.Merge(m, src)
}
func (m *RSMNodeSlicingCapabilityItem) XXX_Size() int {
	return m.Size()
}
func (m *RSMNodeSlicingCapabilityItem) XXX_DiscardUnknown() {
	xxx_messageInfo_RSMNodeSlicingCapabilityItem.DiscardUnknown(m)
}

var xxx_messageInfo_RSMNodeSlicingCapabilityItem proto.InternalMessageInfo

func (m *RSMNodeSlicingCapabilityItem) GetMaxNumberOfSlicesDl() int32 {
	if m != nil {
		return m.MaxNumberOfSlicesDl
	}
	return 0
}

func (m *RSMNodeSlicingCapabilityItem) GetMaxNumberOfSlicesUl() int32 {
	if m != nil {
		return m.MaxNumberOfSlicesUl
	}
	return 0
}

func (m *RSMNodeSlicingCapabilityItem) GetSlicingType() RSMSlicingType {
	if m != nil {
		return m.SlicingType
	}
	return RSMSlicingType_SLICING_TYPE_STATIC
}

func (m *RSMNodeSlicingCapabilityItem) GetMaxNumberOfUesPerSlice() int32 {
	if m != nil {
		return m.MaxNumberOfUesPerSlice
	}
	return 0
}

func (m *RSMNodeSlicingCapabilityItem) GetSupportedConfig() []*RSMSupportedSlicingConfigItem {
	if m != nil {
		return m.SupportedConfig
	}
	return nil
}

type RSMSupportedSlicingConfigItem struct {
	SlicingConfigType E2SmRsmCommand `protobuf:"varint,1,opt,name=slicing_config_type,json=slicingConfigType,proto3,enum=onos.topo.E2SmRsmCommand" json:"slicing_config_type,omitempty"`
}

func (m *RSMSupportedSlicingConfigItem) Reset()         { *m = RSMSupportedSlicingConfigItem{} }
func (m *RSMSupportedSlicingConfigItem) String() string { return proto.CompactTextString(m) }
func (*RSMSupportedSlicingConfigItem) ProtoMessage()    {}
func (*RSMSupportedSlicingConfigItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{28}
}
func (m *RSMSupportedSlicingConfigItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RSMSupportedSlicingConfigItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RSMSupportedSlicingConfigItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RSMSupportedSlicingConfigItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RSMSupportedSlicingConfigItem.Merge(m, src)
}
func (m *RSMSupportedSlicingConfigItem) XXX_Size() int {
	return m.Size()
}
func (m *RSMSupportedSlicingConfigItem) XXX_DiscardUnknown() {
	xxx_messageInfo_RSMSupportedSlicingConfigItem.DiscardUnknown(m)
}

var xxx_messageInfo_RSMSupportedSlicingConfigItem proto.InternalMessageInfo

func (m *RSMSupportedSlicingConfigItem) GetSlicingConfigType() E2SmRsmCommand {
	if m != nil {
		return m.SlicingConfigType
	}
	return E2SmRsmCommand_E2_SM_RSM_COMMAND_SLICE_CREATE
}

type RSMSliceItemList struct {
	RsmSliceList []*RSMSlicingItem `protobuf:"bytes,1,rep,name=rsm_slice_list,json=rsmSliceList,proto3" json:"rsm_slice_list,omitempty"`
}

func (m *RSMSliceItemList) Reset()         { *m = RSMSliceItemList{} }
func (m *RSMSliceItemList) String() string { return proto.CompactTextString(m) }
func (*RSMSliceItemList) ProtoMessage()    {}
func (*RSMSliceItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{29}
}
func (m *RSMSliceItemList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RSMSliceItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RSMSliceItemList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RSMSliceItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RSMSliceItemList.Merge(m, src)
}
func (m *RSMSliceItemList) XXX_Size() int {
	return m.Size()
}
func (m *RSMSliceItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_RSMSliceItemList.DiscardUnknown(m)
}

var xxx_messageInfo_RSMSliceItemList proto.InternalMessageInfo

func (m *RSMSliceItemList) GetRsmSliceList() []*RSMSlicingItem {
	if m != nil {
		return m.RsmSliceList
	}
	return nil
}

type RSMSlicingItem struct {
	ID              string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SliceDesc       string              `protobuf:"bytes,2,opt,name=slice_desc,json=sliceDesc,proto3" json:"slice_desc,omitempty"`
	SliceParameters *RSMSliceParameters `protobuf:"bytes,3,opt,name=slice_parameters,json=sliceParameters,proto3" json:"slice_parameters,omitempty"`
	SliceType       RSMSliceType        `protobuf:"varint,4,opt,name=slice_type,json=sliceType,proto3,enum=onos.topo.RSMSliceType" json:"slice_type,omitempty"`
	UeIdList        []*UeIdentity       `protobuf:"bytes,5,rep,name=ue_id_list,json=ueIdList,proto3" json:"ue_id_list,omitempty"`
}

func (m *RSMSlicingItem) Reset()         { *m = RSMSlicingItem{} }
func (m *RSMSlicingItem) String() string { return proto.CompactTextString(m) }
func (*RSMSlicingItem) ProtoMessage()    {}
func (*RSMSlicingItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{30}
}
func (m *RSMSlicingItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RSMSlicingItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RSMSlicingItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RSMSlicingItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RSMSlicingItem.Merge(m, src)
}
func (m *RSMSlicingItem) XXX_Size() int {
	return m.Size()
}
func (m *RSMSlicingItem) XXX_DiscardUnknown() {
	xxx_messageInfo_RSMSlicingItem.DiscardUnknown(m)
}

var xxx_messageInfo_RSMSlicingItem proto.InternalMessageInfo

func (m *RSMSlicingItem) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *RSMSlicingItem) GetSliceDesc() string {
	if m != nil {
		return m.SliceDesc
	}
	return ""
}

func (m *RSMSlicingItem) GetSliceParameters() *RSMSliceParameters {
	if m != nil {
		return m.SliceParameters
	}
	return nil
}

func (m *RSMSlicingItem) GetSliceType() RSMSliceType {
	if m != nil {
		return m.SliceType
	}
	return RSMSliceType_SLICE_TYPE_DL_SLICE
}

func (m *RSMSlicingItem) GetUeIdList() []*UeIdentity {
	if m != nil {
		return m.UeIdList
	}
	return nil
}

type RSMSliceParameters struct {
	SchedulerType RSMSchedulerType `protobuf:"varint,1,opt,name=scheduler_type,json=schedulerType,proto3,enum=onos.topo.RSMSchedulerType" json:"scheduler_type,omitempty"`
	Weight        int32            `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	QosLevel      int32            `protobuf:"varint,3,opt,name=qos_level,json=qosLevel,proto3" json:"qos_level,omitempty"`
}

func (m *RSMSliceParameters) Reset()         { *m = RSMSliceParameters{} }
func (m *RSMSliceParameters) String() string { return proto.CompactTextString(m) }
func (*RSMSliceParameters) ProtoMessage()    {}
func (*RSMSliceParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{31}
}
func (m *RSMSliceParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RSMSliceParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RSMSliceParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RSMSliceParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RSMSliceParameters.Merge(m, src)
}
func (m *RSMSliceParameters) XXX_Size() int {
	return m.Size()
}
func (m *RSMSliceParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_RSMSliceParameters.DiscardUnknown(m)
}

var xxx_messageInfo_RSMSliceParameters proto.InternalMessageInfo

func (m *RSMSliceParameters) GetSchedulerType() RSMSchedulerType {
	if m != nil {
		return m.SchedulerType
	}
	return RSMSchedulerType_SCHEDULER_TYPE_ROUND_ROBIN
}

func (m *RSMSliceParameters) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *RSMSliceParameters) GetQosLevel() int32 {
	if m != nil {
		return m.QosLevel
	}
	return 0
}

type DuUeF1ApID struct {
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *DuUeF1ApID) Reset()         { *m = DuUeF1ApID{} }
func (m *DuUeF1ApID) String() string { return proto.CompactTextString(m) }
func (*DuUeF1ApID) ProtoMessage()    {}
func (*DuUeF1ApID) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{32}
}
func (m *DuUeF1ApID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DuUeF1ApID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DuUeF1ApID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DuUeF1ApID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DuUeF1ApID.Merge(m, src)
}
func (m *DuUeF1ApID) XXX_Size() int {
	return m.Size()
}
func (m *DuUeF1ApID) XXX_DiscardUnknown() {
	xxx_messageInfo_DuUeF1ApID.DiscardUnknown(m)
}

var xxx_messageInfo_DuUeF1ApID proto.InternalMessageInfo

func (m *DuUeF1ApID) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type CuUeF1ApID struct {
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CuUeF1ApID) Reset()         { *m = CuUeF1ApID{} }
func (m *CuUeF1ApID) String() string { return proto.CompactTextString(m) }
func (*CuUeF1ApID) ProtoMessage()    {}
func (*CuUeF1ApID) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{33}
}
func (m *CuUeF1ApID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CuUeF1ApID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CuUeF1ApID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CuUeF1ApID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CuUeF1ApID.Merge(m, src)
}
func (m *CuUeF1ApID) XXX_Size() int {
	return m.Size()
}
func (m *CuUeF1ApID) XXX_DiscardUnknown() {
	xxx_messageInfo_CuUeF1ApID.DiscardUnknown(m)
}

var xxx_messageInfo_CuUeF1ApID proto.InternalMessageInfo

func (m *CuUeF1ApID) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type RanUeNgapID struct {
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *RanUeNgapID) Reset()         { *m = RanUeNgapID{} }
func (m *RanUeNgapID) String() string { return proto.CompactTextString(m) }
func (*RanUeNgapID) ProtoMessage()    {}
func (*RanUeNgapID) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{34}
}
func (m *RanUeNgapID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RanUeNgapID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RanUeNgapID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RanUeNgapID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RanUeNgapID.Merge(m, src)
}
func (m *RanUeNgapID) XXX_Size() int {
	return m.Size()
}
func (m *RanUeNgapID) XXX_DiscardUnknown() {
	xxx_messageInfo_RanUeNgapID.DiscardUnknown(m)
}

var xxx_messageInfo_RanUeNgapID proto.InternalMessageInfo

func (m *RanUeNgapID) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type EnbUeS1ApID struct {
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *EnbUeS1ApID) Reset()         { *m = EnbUeS1ApID{} }
func (m *EnbUeS1ApID) String() string { return proto.CompactTextString(m) }
func (*EnbUeS1ApID) ProtoMessage()    {}
func (*EnbUeS1ApID) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{35}
}
func (m *EnbUeS1ApID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnbUeS1ApID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnbUeS1ApID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnbUeS1ApID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnbUeS1ApID.Merge(m, src)
}
func (m *EnbUeS1ApID) XXX_Size() int {
	return m.Size()
}
func (m *EnbUeS1ApID) XXX_DiscardUnknown() {
	xxx_messageInfo_EnbUeS1ApID.DiscardUnknown(m)
}

var xxx_messageInfo_EnbUeS1ApID proto.InternalMessageInfo

func (m *EnbUeS1ApID) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type AmfUeNgapID struct {
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *AmfUeNgapID) Reset()         { *m = AmfUeNgapID{} }
func (m *AmfUeNgapID) String() string { return proto.CompactTextString(m) }
func (*AmfUeNgapID) ProtoMessage()    {}
func (*AmfUeNgapID) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{36}
}
func (m *AmfUeNgapID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AmfUeNgapID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AmfUeNgapID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AmfUeNgapID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AmfUeNgapID.Merge(m, src)
}
func (m *AmfUeNgapID) XXX_Size() int {
	return m.Size()
}
func (m *AmfUeNgapID) XXX_DiscardUnknown() {
	xxx_messageInfo_AmfUeNgapID.DiscardUnknown(m)
}

var xxx_messageInfo_AmfUeNgapID proto.InternalMessageInfo

func (m *AmfUeNgapID) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type UeIdentity struct {
	DuUeF1apID      *DuUeF1ApID  `protobuf:"bytes,1,opt,name=du_ue_f1ap_id,json=duUeF1apId,proto3" json:"du_ue_f1ap_id,omitempty"`
	CuUeF1apID      *CuUeF1ApID  `protobuf:"bytes,2,opt,name=cu_ue_f1ap_id,json=cuUeF1apId,proto3" json:"cu_ue_f1ap_id,omitempty"`
	RANUeNgapID     *RanUeNgapID `protobuf:"bytes,3,opt,name=ran_ue_ngap_id,json=ranUeNgapId,proto3" json:"ran_ue_ngap_id,omitempty"`
	EnbUeS1apID     *EnbUeS1ApID `protobuf:"bytes,4,opt,name=enb_ue_s1ap_id,json=enbUeS1apId,proto3" json:"enb_ue_s1ap_id,omitempty"`
	AMFUeNgapID     *AmfUeNgapID `protobuf:"bytes,5,opt,name=amf_ue_ngap_id,json=amfUeNgapId,proto3" json:"amf_ue_ngap_id,omitempty"`
	PreferredIDType UeIdType     `protobuf:"varint,6,opt,name=preferred_id_type,json=preferredIdType,proto3,enum=onos.topo.UeIdType" json:"preferred_id_type,omitempty"`
	DrbId           *DrbId       `protobuf:"bytes,7,opt,name=drb_id,json=drbId,proto3" json:"drb_id,omitempty"`
}

func (m *UeIdentity) Reset()         { *m = UeIdentity{} }
func (m *UeIdentity) String() string { return proto.CompactTextString(m) }
func (*UeIdentity) ProtoMessage()    {}
func (*UeIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{37}
}
func (m *UeIdentity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UeIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UeIdentity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UeIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UeIdentity.Merge(m, src)
}
func (m *UeIdentity) XXX_Size() int {
	return m.Size()
}
func (m *UeIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_UeIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_UeIdentity proto.InternalMessageInfo

func (m *UeIdentity) GetDuUeF1apID() *DuUeF1ApID {
	if m != nil {
		return m.DuUeF1apID
	}
	return nil
}

func (m *UeIdentity) GetCuUeF1apID() *CuUeF1ApID {
	if m != nil {
		return m.CuUeF1apID
	}
	return nil
}

func (m *UeIdentity) GetRANUeNgapID() *RanUeNgapID {
	if m != nil {
		return m.RANUeNgapID
	}
	return nil
}

func (m *UeIdentity) GetEnbUeS1apID() *EnbUeS1ApID {
	if m != nil {
		return m.EnbUeS1apID
	}
	return nil
}

func (m *UeIdentity) GetAMFUeNgapID() *AmfUeNgapID {
	if m != nil {
		return m.AMFUeNgapID
	}
	return nil
}

func (m *UeIdentity) GetPreferredIDType() UeIdType {
	if m != nil {
		return m.PreferredIDType
	}
	return UeIdType_UE_ID_TYPE_CU_UE_F1_AP_ID
}

func (m *UeIdentity) GetDrbId() *DrbId {
	if m != nil {
		return m.DrbId
	}
	return nil
}

type DrbId struct {
	// Types that are valid to be assigned to DrbId:
	//	*DrbId_FourGdrbId
	//	*DrbId_FiveGdrbId
	DrbId isDrbId_DrbId `protobuf_oneof:"drb_id"`
}

func (m *DrbId) Reset()         { *m = DrbId{} }
func (m *DrbId) String() string { return proto.CompactTextString(m) }
func (*DrbId) ProtoMessage()    {}
func (*DrbId) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{38}
}
func (m *DrbId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DrbId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DrbId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DrbId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DrbId.Merge(m, src)
}
func (m *DrbId) XXX_Size() int {
	return m.Size()
}
func (m *DrbId) XXX_DiscardUnknown() {
	xxx_messageInfo_DrbId.DiscardUnknown(m)
}

var xxx_messageInfo_DrbId proto.InternalMessageInfo

type isDrbId_DrbId interface {
	isDrbId_DrbId()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DrbId_FourGdrbId struct {
	FourGdrbId *FourGDrbId `protobuf:"bytes,1,opt,name=four_gdrb_id,json=fourGDrbID,proto3,oneof" json:"four_gdrb_id,omitempty"`
}
type DrbId_FiveGdrbId struct {
	FiveGdrbId *FiveGDrbId `protobuf:"bytes,2,opt,name=five_gdrb_id,json=fiveGDrbID,proto3,oneof" json:"five_gdrb_id,omitempty"`
}

func (*DrbId_FourGdrbId) isDrbId_DrbId() {}
func (*DrbId_FiveGdrbId) isDrbId_DrbId() {}

func (m *DrbId) GetDrbId() isDrbId_DrbId {
	if m != nil {
		return m.DrbId
	}
	return nil
}

func (m *DrbId) GetFourGdrbId() *FourGDrbId {
	if x, ok := m.GetDrbId().(*DrbId_FourGdrbId); ok {
		return x.FourGdrbId
	}
	return nil
}

func (m *DrbId) GetFiveGdrbId() *FiveGDrbId {
	if x, ok := m.GetDrbId().(*DrbId_FiveGdrbId); ok {
		return x.FiveGdrbId
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DrbId) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DrbId_FourGdrbId)(nil),
		(*DrbId_FiveGdrbId)(nil),
	}
}

type FiveGDrbId struct {
	Value         int32                     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Qfi           *Qfi                      `protobuf:"bytes,2,opt,name=qfi,proto3" json:"qfi,omitempty"`
	FlowsMapToDrb []*QoSflowLevelParameters `protobuf:"bytes,3,rep,name=flows_map_to_drb,json=flowsMapToDrb,proto3" json:"flows_map_to_drb,omitempty"`
}

func (m *FiveGDrbId) Reset()         { *m = FiveGDrbId{} }
func (m *FiveGDrbId) String() string { return proto.CompactTextString(m) }
func (*FiveGDrbId) ProtoMessage()    {}
func (*FiveGDrbId) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{39}
}
func (m *FiveGDrbId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FiveGDrbId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FiveGDrbId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FiveGDrbId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FiveGDrbId.Merge(m, src)
}
func (m *FiveGDrbId) XXX_Size() int {
	return m.Size()
}
func (m *FiveGDrbId) XXX_DiscardUnknown() {
	xxx_messageInfo_FiveGDrbId.DiscardUnknown(m)
}

var xxx_messageInfo_FiveGDrbId proto.InternalMessageInfo

func (m *FiveGDrbId) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *FiveGDrbId) GetQfi() *Qfi {
	if m != nil {
		return m.Qfi
	}
	return nil
}

func (m *FiveGDrbId) GetFlowsMapToDrb() []*QoSflowLevelParameters {
	if m != nil {
		return m.FlowsMapToDrb
	}
	return nil
}

type Qfi struct {
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Qfi) Reset()         { *m = Qfi{} }
func (m *Qfi) String() string { return proto.CompactTextString(m) }
func (*Qfi) ProtoMessage()    {}
func (*Qfi) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{40}
}
func (m *Qfi) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Qfi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Qfi.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Qfi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Qfi.Merge(m, src)
}
func (m *Qfi) XXX_Size() int {
	return m.Size()
}
func (m *Qfi) XXX_DiscardUnknown() {
	xxx_messageInfo_Qfi.DiscardUnknown(m)
}

var xxx_messageInfo_Qfi proto.InternalMessageInfo

func (m *Qfi) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type QoSflowLevelParameters struct {
	// Types that are valid to be assigned to QosFlowLevelParameters:
	//	*QoSflowLevelParameters_DynamicFiveQi
	//	*QoSflowLevelParameters_NonDynamicFiveQi
	QosFlowLevelParameters isQoSflowLevelParameters_QosFlowLevelParameters `protobuf_oneof:"qos_flow_level_parameters"`
}

func (m *QoSflowLevelParameters) Reset()         { *m = QoSflowLevelParameters{} }
func (m *QoSflowLevelParameters) String() string { return proto.CompactTextString(m) }
func (*QoSflowLevelParameters) ProtoMessage()    {}
func (*QoSflowLevelParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{41}
}
func (m *QoSflowLevelParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QoSflowLevelParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QoSflowLevelParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QoSflowLevelParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QoSflowLevelParameters.Merge(m, src)
}
func (m *QoSflowLevelParameters) XXX_Size() int {
	return m.Size()
}
func (m *QoSflowLevelParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_QoSflowLevelParameters.DiscardUnknown(m)
}

var xxx_messageInfo_QoSflowLevelParameters proto.InternalMessageInfo

type isQoSflowLevelParameters_QosFlowLevelParameters interface {
	isQoSflowLevelParameters_QosFlowLevelParameters()
	MarshalTo([]byte) (int, error)
	Size() int
}

type QoSflowLevelParameters_DynamicFiveQi struct {
	DynamicFiveQi *DynamicFiveQi `protobuf:"bytes,1,opt,name=dynamic_five_qi,json=dynamicFiveQi,proto3,oneof" json:"dynamic_five_qi,omitempty"`
}
type QoSflowLevelParameters_NonDynamicFiveQi struct {
	NonDynamicFiveQi *NonDynamicFiveQi `protobuf:"bytes,2,opt,name=non_dynamic_five_qi,json=nonDynamicFiveQi,proto3,oneof" json:"non_dynamic_five_qi,omitempty"`
}

func (*QoSflowLevelParameters_DynamicFiveQi) isQoSflowLevelParameters_QosFlowLevelParameters()    {}
func (*QoSflowLevelParameters_NonDynamicFiveQi) isQoSflowLevelParameters_QosFlowLevelParameters() {}

func (m *QoSflowLevelParameters) GetQosFlowLevelParameters() isQoSflowLevelParameters_QosFlowLevelParameters {
	if m != nil {
		return m.QosFlowLevelParameters
	}
	return nil
}

func (m *QoSflowLevelParameters) GetDynamicFiveQi() *DynamicFiveQi {
	if x, ok := m.GetQosFlowLevelParameters().(*QoSflowLevelParameters_DynamicFiveQi); ok {
		return x.DynamicFiveQi
	}
	return nil
}

func (m *QoSflowLevelParameters) GetNonDynamicFiveQi() *NonDynamicFiveQi {
	if x, ok := m.GetQosFlowLevelParameters().(*QoSflowLevelParameters_NonDynamicFiveQi); ok {
		return x.NonDynamicFiveQi
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QoSflowLevelParameters) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QoSflowLevelParameters_DynamicFiveQi)(nil),
		(*QoSflowLevelParameters_NonDynamicFiveQi)(nil),
	}
}

type DynamicFiveQi struct {
	PriorityLevel    int32 `protobuf:"varint,1,opt,name=priority_level,json=priorityLevel,proto3" json:"priority_level,omitempty"`
	PacketDelayBudge int32 `protobuf:"varint,2,opt,name=packet_delay_budge,json=packetDelayBudge,proto3" json:"packet_delay_budge,omitempty"`
	PacketErrorRate  int32 `protobuf:"varint,3,opt,name=packet_error_rate,json=packetErrorRate,proto3" json:"packet_error_rate,omitempty"`
}

func (m *DynamicFiveQi) Reset()         { *m = DynamicFiveQi{} }
func (m *DynamicFiveQi) String() string { return proto.CompactTextString(m) }
func (*DynamicFiveQi) ProtoMessage()    {}
func (*DynamicFiveQi) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{42}
}
func (m *DynamicFiveQi) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicFiveQi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynamicFiveQi.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynamicFiveQi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicFiveQi.Merge(m, src)
}
func (m *DynamicFiveQi) XXX_Size() int {
	return m.Size()
}
func (m *DynamicFiveQi) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicFiveQi.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicFiveQi proto.InternalMessageInfo

func (m *DynamicFiveQi) GetPriorityLevel() int32 {
	if m != nil {
		return m.PriorityLevel
	}
	return 0
}

func (m *DynamicFiveQi) GetPacketDelayBudge() int32 {
	if m != nil {
		return m.PacketDelayBudge
	}
	return 0
}

func (m *DynamicFiveQi) GetPacketErrorRate() int32 {
	if m != nil {
		return m.PacketErrorRate
	}
	return 0
}

type NonDynamicFiveQi struct {
	FiveQi *FiveQi `protobuf:"bytes,1,opt,name=five_qi,json=fiveQi,proto3" json:"five_qi,omitempty"`
}

func (m *NonDynamicFiveQi) Reset()         { *m = NonDynamicFiveQi{} }
func (m *NonDynamicFiveQi) String() string { return proto.CompactTextString(m) }
func (*NonDynamicFiveQi) ProtoMessage()    {}
func (*NonDynamicFiveQi) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{43}
}
func (m *NonDynamicFiveQi) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NonDynamicFiveQi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NonDynamicFiveQi.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NonDynamicFiveQi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NonDynamicFiveQi.Merge(m, src)
}
func (m *NonDynamicFiveQi) XXX_Size() int {
	return m.Size()
}
func (m *NonDynamicFiveQi) XXX_DiscardUnknown() {
	xxx_messageInfo_NonDynamicFiveQi.DiscardUnknown(m)
}

var xxx_messageInfo_NonDynamicFiveQi proto.InternalMessageInfo

func (m *NonDynamicFiveQi) GetFiveQi() *FiveQi {
	if m != nil {
		return m.FiveQi
	}
	return nil
}

type FiveQi struct {
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *FiveQi) Reset()         { *m = FiveQi{} }
func (m *FiveQi) String() string { return proto.CompactTextString(m) }
func (*FiveQi) ProtoMessage()    {}
func (*FiveQi) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{44}
}
func (m *FiveQi) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FiveQi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FiveQi.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FiveQi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FiveQi.Merge(m, src)
}
func (m *FiveQi) XXX_Size() int {
	return m.Size()
}
func (m *FiveQi) XXX_DiscardUnknown() {
	xxx_messageInfo_FiveQi.DiscardUnknown(m)
}

var xxx_messageInfo_FiveQi proto.InternalMessageInfo

func (m *FiveQi) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type FourGDrbId struct {
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Qci   *Qci  `protobuf:"bytes,2,opt,name=qci,proto3" json:"qci,omitempty"`
}

func (m *FourGDrbId) Reset()         { *m = FourGDrbId{} }
func (m *FourGDrbId) String() string { return proto.CompactTextString(m) }
func (*FourGDrbId) ProtoMessage()    {}
func (*FourGDrbId) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{45}
}
func (m *FourGDrbId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FourGDrbId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FourGDrbId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FourGDrbId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FourGDrbId.Merge(m, src)
}
func (m *FourGDrbId) XXX_Size() int {
	return m.Size()
}
func (m *FourGDrbId) XXX_DiscardUnknown() {
	xxx_messageInfo_FourGDrbId.DiscardUnknown(m)
}

var xxx_messageInfo_FourGDrbId proto.InternalMessageInfo

func (m *FourGDrbId) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *FourGDrbId) GetQci() *Qci {
	if m != nil {
		return m.Qci
	}
	return nil
}

type Qci struct {
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Qci) Reset()         { *m = Qci{} }
func (m *Qci) String() string { return proto.CompactTextString(m) }
func (*Qci) ProtoMessage()    {}
func (*Qci) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{46}
}
func (m *Qci) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Qci) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Qci.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Qci) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Qci.Merge(m, src)
}
func (m *Qci) XXX_Size() int {
	return m.Size()
}
func (m *Qci) XXX_DiscardUnknown() {
	xxx_messageInfo_Qci.DiscardUnknown(m)
}

var xxx_messageInfo_Qci proto.InternalMessageInfo

func (m *Qci) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type RCReportStyle struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *RCReportStyle) Reset()         { *m = RCReportStyle{} }
func (m *RCReportStyle) String() string { return proto.CompactTextString(m) }
func (*RCReportStyle) ProtoMessage()    {}
func (*RCReportStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{47}
}
func (m *RCReportStyle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RCReportStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RCReportStyle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RCReportStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RCReportStyle.Merge(m, src)
}
func (m *RCReportStyle) XXX_Size() int {
	return m.Size()
}
func (m *RCReportStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_RCReportStyle.DiscardUnknown(m)
}

var xxx_messageInfo_RCReportStyle proto.InternalMessageInfo

func (m *RCReportStyle) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RCReportStyle) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type KPMReportStyle struct {
	Name         string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type         int32             `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Measurements []*KPMMeasurement `protobuf:"bytes,3,rep,name=measurements,proto3" json:"measurements,omitempty"`
}

func (m *KPMReportStyle) Reset()         { *m = KPMReportStyle{} }
func (m *KPMReportStyle) String() string { return proto.CompactTextString(m) }
func (*KPMReportStyle) ProtoMessage()    {}
func (*KPMReportStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{48}
}
func (m *KPMReportStyle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KPMReportStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KPMReportStyle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KPMReportStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KPMReportStyle.Merge(m, src)
}
func (m *KPMReportStyle) XXX_Size() int {
	return m.Size()
}
func (m *KPMReportStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_KPMReportStyle.DiscardUnknown(m)
}

var xxx_messageInfo_KPMReportStyle proto.InternalMessageInfo

func (m *KPMReportStyle) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KPMReportStyle) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *KPMReportStyle) GetMeasurements() []*KPMMeasurement {
	if m != nil {
		return m.Measurements
	}
	return nil
}

type MHOReportStyle struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *MHOReportStyle) Reset()         { *m = MHOReportStyle{} }
func (m *MHOReportStyle) String() string { return proto.CompactTextString(m) }
func (*MHOReportStyle) ProtoMessage()    {}
func (*MHOReportStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{49}
}
func (m *MHOReportStyle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MHOReportStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MHOReportStyle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MHOReportStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MHOReportStyle.Merge(m, src)
}
func (m *MHOReportStyle) XXX_Size() int {
	return m.Size()
}
func (m *MHOReportStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_MHOReportStyle.DiscardUnknown(m)
}

var xxx_messageInfo_MHOReportStyle proto.InternalMessageInfo

func (m *MHOReportStyle) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MHOReportStyle) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type KPMMeasurement struct {
	ID   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *KPMMeasurement) Reset()         { *m = KPMMeasurement{} }
func (m *KPMMeasurement) String() string { return proto.CompactTextString(m) }
func (*KPMMeasurement) ProtoMessage()    {}
func (*KPMMeasurement) Descriptor() ([]byte, []int) {
	return fileDescriptor_23cc5f935e05bbb6, []int{50}
}
func (m *KPMMeasurement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KPMMeasurement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KPMMeasurement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KPMMeasurement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KPMMeasurement.Merge(m, src)
}
func (m *KPMMeasurement) XXX_Size() int {
	return m.Size()
}
func (m *KPMMeasurement) XXX_DiscardUnknown() {
	xxx_messageInfo_KPMMeasurement.DiscardUnknown(m)
}

var xxx_messageInfo_KPMMeasurement proto.InternalMessageInfo

func (m *KPMMeasurement) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *KPMMeasurement) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterEnum("onos.topo.RANEntityKinds", RANEntityKinds_name, RANEntityKinds_value)
	proto.RegisterEnum("onos.topo.RANRelationKinds", RANRelationKinds_name, RANRelationKinds_value)
	proto.RegisterEnum("onos.topo.CellGlobalIDType", CellGlobalIDType_name, CellGlobalIDType_value)
	proto.RegisterEnum("onos.topo.NodeType", NodeType_name, NodeType_value)
	proto.RegisterEnum("onos.topo.ComponentType", ComponentType_name, ComponentType_value)
	proto.RegisterEnum("onos.topo.E2SmRsmCommand", E2SmRsmCommand_name, E2SmRsmCommand_value)
	proto.RegisterEnum("onos.topo.RSMSlicingType", RSMSlicingType_name, RSMSlicingType_value)
	proto.RegisterEnum("onos.topo.RSMSchedulerType", RSMSchedulerType_name, RSMSchedulerType_value)
	proto.RegisterEnum("onos.topo.RSMSliceType", RSMSliceType_name, RSMSliceType_value)
	proto.RegisterEnum("onos.topo.UeIdType", UeIdType_name, UeIdType_value)
	proto.RegisterEnum("onos.topo.Interface_Type", Interface_Type_name, Interface_Type_value)
	proto.RegisterType((*Location)(nil), "onos.topo.Location")
	proto.RegisterType((*Wgs84Location)(nil), "onos.topo.Wgs84Location")
	proto.RegisterType((*CartesianLocation)(nil), "onos.topo.CartesianLocation")
	proto.RegisterType((*AzElOrientation)(nil), "onos.topo.AzElOrientation")
	proto.RegisterType((*YprOrientation)(nil), "onos.topo.YprOrientation")
	proto.RegisterType((*Orientation)(nil), "onos.topo.Orientation")
	proto.RegisterType((*Waypoint)(nil), "onos.topo.Waypoint")
	proto.RegisterType((*Waypoints)(nil), "onos.topo.Waypoints")
	proto.RegisterType((*OrbitData)(nil), "onos.topo.OrbitData")
	proto.RegisterType((*Motion)(nil), "onos.topo.Motion")
	proto.RegisterType((*Coverage)(nil), "onos.topo.Coverage")
	proto.RegisterType((*E2Node)(nil), "onos.topo.E2Node")
	proto.RegisterMapType((map[string]*ServiceModelInfo)(nil), "onos.topo.E2Node.ServiceModelsEntry")
	proto.RegisterType((*E2NodeConfig)(nil), "onos.topo.E2NodeConfig")
	proto.RegisterType((*Lease)(nil), "onos.topo.Lease")
	proto.RegisterType((*Interface)(nil), "onos.topo.Interface")
	proto.RegisterType((*E2TInfo)(nil), "onos.topo.E2TInfo")
	proto.RegisterType((*XAppInfo)(nil), "onos.topo.XAppInfo")
	proto.RegisterType((*A1PolicyType)(nil), "onos.topo.A1PolicyType")
	proto.RegisterType((*A1TInfo)(nil), "onos.topo.A1TInfo")
	proto.RegisterType((*CellGlobalID)(nil), "onos.topo.CellGlobalID")
	proto.RegisterType((*NeighborCellID)(nil), "onos.topo.NeighborCellID")
	proto.RegisterType((*E2Cell)(nil), "onos.topo.E2Cell")
	proto.RegisterMapType((map[string]uint32)(nil), "onos.topo.E2Cell.KpiReportsEntry")
	proto.RegisterType((*ServiceModelInfo)(nil), "onos.topo.ServiceModelInfo")
	proto.RegisterType((*RCRanFunction)(nil), "onos.topo.RCRanFunction")
	proto.RegisterType((*MHORanFunction)(nil), "onos.topo.MHORanFunction")
	proto.RegisterType((*KPMRanFunction)(nil), "onos.topo.KPMRanFunction")
	proto.RegisterType((*RSMRanFunction)(nil), "onos.topo.RSMRanFunction")
	proto.RegisterType((*RSMNodeSlicingCapabilityItem)(nil), "onos.topo.RSMNodeSlicingCapabilityItem")
	proto.RegisterType((*RSMSupportedSlicingConfigItem)(nil), "onos.topo.RSMSupportedSlicingConfigItem")
	proto.RegisterType((*RSMSliceItemList)(nil), "onos.topo.RSMSliceItemList")
	proto.RegisterType((*RSMSlicingItem)(nil), "onos.topo.RSMSlicingItem")
	proto.RegisterType((*RSMSliceParameters)(nil), "onos.topo.RSMSliceParameters")
	proto.RegisterType((*DuUeF1ApID)(nil), "onos.topo.DuUeF1apID")
	proto.RegisterType((*CuUeF1ApID)(nil), "onos.topo.CuUeF1apID")
	proto.RegisterType((*RanUeNgapID)(nil), "onos.topo.RanUeNgapID")
	proto.RegisterType((*EnbUeS1ApID)(nil), "onos.topo.EnbUeS1apID")
	proto.RegisterType((*AmfUeNgapID)(nil), "onos.topo.AmfUeNgapID")
	proto.RegisterType((*UeIdentity)(nil), "onos.topo.UeIdentity")
	proto.RegisterType((*DrbId)(nil), "onos.topo.DrbId")
	proto.RegisterType((*FiveGDrbId)(nil), "onos.topo.FiveGDrbId")
	proto.RegisterType((*Qfi)(nil), "onos.topo.Qfi")
	proto.RegisterType((*QoSflowLevelParameters)(nil), "onos.topo.QoSflowLevelParameters")
	proto.RegisterType((*DynamicFiveQi)(nil), "onos.topo.DynamicFiveQi")
	proto.RegisterType((*NonDynamicFiveQi)(nil), "onos.topo.NonDynamicFiveQi")
	proto.RegisterType((*FiveQi)(nil), "onos.topo.FiveQi")
	proto.RegisterType((*FourGDrbId)(nil), "onos.topo.FourGDrbId")
	proto.RegisterType((*Qci)(nil), "onos.topo.Qci")
	proto.RegisterType((*RCReportStyle)(nil), "onos.topo.RCReportStyle")
	proto.RegisterType((*KPMReportStyle)(nil), "onos.topo.KPMReportStyle")
	proto.RegisterType((*MHOReportStyle)(nil), "onos.topo.MHOReportStyle")
	proto.RegisterType((*KPMMeasurement)(nil), "onos.topo.KPMMeasurement")
}

func init() { proto.RegisterFile("onos/topo/ran.proto", fileDescriptor_23cc5f935e05bbb6) }

var fileDescriptor_23cc5f935e05bbb6 = []byte{
	// 3139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x73, 0x1b, 0xc9,
	0x75, 0xc7, 0xe0, 0x83, 0x04, 0x1f, 0x3e, 0x38, 0x6c, 0xca, 0x12, 0x25, 0xad, 0x48, 0xed, 0xac,
	0xb3, 0xbb, 0x61, 0xd9, 0x94, 0x48, 0x6f, 0x39, 0xeb, 0x44, 0xeb, 0x35, 0x3e, 0x86, 0xe4, 0x44,
	0xc0, 0x00, 0x6a, 0x00, 0x5e, 0x6f, 0xaa, 0x52, 0x53, 0xc3, 0x99, 0x06, 0x34, 0xd6, 0x7c, 0x69,
	0x66, 0x40, 0x11, 0xaa, 0xca, 0xc1, 0x97, 0xa4, 0x7c, 0x48, 0xd5, 0x5e, 0x73, 0x4f, 0xe5, 0x96,
	0x53, 0xf2, 0x37, 0x24, 0x3e, 0xfa, 0x98, 0xca, 0x81, 0x49, 0x71, 0xff, 0x83, 0x54, 0xce, 0xa9,
	0x54, 0x77, 0xcf, 0x00, 0x0d, 0xf0, 0xc3, 0x1b, 0x3b, 0x27, 0xf4, 0x7b, 0xef, 0xf7, 0x3e, 0xfa,
	0xbd, 0xd7, 0xdd, 0x6f, 0x00, 0xdb, 0x81, 0x1f, 0xc4, 0xcf, 0x92, 0x20, 0x0c, 0x9e, 0x45, 0xa6,
	0x7f, 0x10, 0x46, 0x41, 0x12, 0xa0, 0x0d, 0xca, 0x3c, 0xa0, 0xcc, 0x47, 0x0f, 0x27, 0x41, 0x30,
	0x71, 0xc9, 0x33, 0x26, 0x38, 0x9b, 0x8e, 0x9f, 0x99, 0xfe, 0x8c, 0xa3, 0x1e, 0xdd, 0x9b, 0x04,
	0x93, 0x80, 0x2d, 0x9f, 0xd1, 0x55, 0xca, 0xdd, 0x5b, 0x55, 0x48, 0x1c, 0x8f, 0xc4, 0x89, 0xe9,
	0x85, 0x1c, 0xa0, 0xfc, 0xa3, 0x04, 0xe5, 0x4e, 0x60, 0x99, 0x89, 0x13, 0xf8, 0xe8, 0x1e, 0x14,
	0x5c, 0x33, 0xd9, 0x91, 0x9e, 0x4a, 0x9f, 0x4a, 0xcd, 0xfc, 0x8e, 0x84, 0x29, 0xc9, 0xb8, 0xfe,
	0x64, 0x27, 0x2f, 0x70, 0xfd, 0x09, 0x7a, 0x0e, 0xa5, 0x77, 0x93, 0xf8, 0xf3, 0xcf, 0x76, 0x0a,
	0x4f, 0xa5, 0x4f, 0x2b, 0x47, 0x3b, 0x07, 0xf3, 0x28, 0x0f, 0xbe, 0xa2, 0xfc, 0xcc, 0xe8, 0x69,
	0x0e, 0x73, 0x20, 0x7a, 0x01, 0x1b, 0x96, 0x19, 0x25, 0x24, 0x76, 0x4c, 0x7f, 0xa7, 0xc8, 0xb4,
	0x3e, 0x10, 0xb4, 0x5a, 0x99, 0x4c, 0xd0, 0x5c, 0x28, 0x34, 0x4b, 0x50, 0x20, 0x17, 0x89, 0x72,
	0x0e, 0xb5, 0x25, 0xf3, 0xe8, 0x43, 0xa8, 0xba, 0x66, 0xe2, 0x24, 0x53, 0x9b, 0x18, 0x36, 0x99,
	0xf0, 0xe0, 0x71, 0x25, 0xe3, 0xb5, 0xc9, 0x04, 0x7d, 0x04, 0x35, 0x37, 0xf0, 0x27, 0x0b, 0x0c,
	0xdb, 0x0a, 0xae, 0xce, 0x99, 0x14, 0xf4, 0x04, 0xc0, 0x74, 0x53, 0x3b, 0x1e, 0xdb, 0x94, 0x84,
	0x37, 0x32, 0x4e, 0x57, 0x39, 0x86, 0xad, 0x6b, 0x01, 0xa2, 0x4d, 0x28, 0x5c, 0x18, 0x5e, 0xea,
	0x32, 0x7f, 0xd1, 0xa5, 0x8c, 0x99, 0xe1, 0xa5, 0xf6, 0xf3, 0x33, 0xc6, 0x78, 0x3f, 0x37, 0x97,
	0x7f, 0xdf, 0x55, 0xde, 0xc3, 0x66, 0xe3, 0xbd, 0xea, 0xf6, 0x22, 0x87, 0xf8, 0x09, 0xb7, 0xb2,
	0x07, 0x15, 0xf3, 0xbd, 0xe3, 0x4d, 0x93, 0xd7, 0xc2, 0x06, 0x20, 0x65, 0xa5, 0xf1, 0x13, 0x97,
	0x9c, 0x33, 0xb4, 0x18, 0xff, 0x9c, 0x49, 0x41, 0x1f, 0x42, 0x35, 0x0a, 0x92, 0x05, 0x86, 0xbb,
	0xac, 0x64, 0xbc, 0x36, 0x99, 0x28, 0x26, 0xd4, 0xbf, 0x0e, 0x23, 0xd1, 0xf5, 0x03, 0x58, 0x9f,
	0x99, 0xef, 0x04, 0xb7, 0x6b, 0x33, 0xf3, 0x1d, 0xb5, 0xf6, 0x18, 0x36, 0x42, 0x27, 0xb1, 0x5e,
	0x0b, 0xee, 0xca, 0x8c, 0x41, 0x85, 0x0f, 0xa1, 0x1c, 0x05, 0xae, 0x2b, 0xb8, 0x59, 0xa7, 0x34,
	0x75, 0xf1, 0x57, 0x50, 0x11, 0xed, 0x3f, 0x87, 0xa2, 0xf9, 0x9e, 0xb8, 0xcc, 0x78, 0xe5, 0xe8,
	0x91, 0x50, 0xed, 0x95, 0x24, 0x9c, 0xe6, 0x30, 0x43, 0xa2, 0x1f, 0x42, 0x61, 0x16, 0x46, 0xcc,
	0x65, 0xe5, 0xe8, 0xa1, 0xa0, 0xb0, 0x1c, 0xf9, 0x69, 0x0e, 0x53, 0x5c, 0xb3, 0x06, 0x95, 0x60,
	0xc1, 0x55, 0xde, 0x40, 0xf9, 0x2b, 0x73, 0x16, 0x06, 0x8e, 0x9f, 0xa0, 0x03, 0x28, 0xd2, 0x66,
	0x9f, 0xfb, 0xe6, 0x27, 0xe1, 0x20, 0x3b, 0x09, 0x07, 0xc3, 0xec, 0x24, 0x60, 0x86, 0x43, 0xcf,
	0xa0, 0xec, 0xa6, 0x85, 0x4d, 0xdd, 0x6f, 0x0b, 0xee, 0xb3, 0x9a, 0xe3, 0x39, 0x48, 0x79, 0x01,
	0x1b, 0x99, 0xb3, 0x98, 0x6a, 0xbf, 0x4b, 0x89, 0x1d, 0xe9, 0x69, 0x61, 0x45, 0x3b, 0xc3, 0xe1,
	0x39, 0x48, 0xf9, 0x6f, 0x09, 0x36, 0x7a, 0xd1, 0x99, 0x93, 0xb4, 0xcd, 0xc4, 0xa4, 0xa7, 0x89,
	0x84, 0x81, 0xf5, 0xfa, 0x3b, 0x44, 0xcb, 0x81, 0xe8, 0x13, 0xd8, 0x74, 0x7c, 0xcb, 0x75, 0xfc,
	0xd5, 0xb6, 0xa8, 0x0b, 0xec, 0xac, 0x5a, 0xa6, 0xe9, 0x2f, 0x55, 0xcb, 0x34, 0x99, 0xa8, 0x0a,
	0x12, 0x61, 0x27, 0x51, 0xc2, 0x12, 0xa1, 0x1d, 0x64, 0x46, 0x93, 0xa9, 0x47, 0xfc, 0x84, 0x81,
	0x4b, 0xbc, 0x83, 0x32, 0x1e, 0x55, 0xa0, 0xad, 0xea, 0x07, 0x9e, 0xe9, 0xce, 0x18, 0x62, 0x2d,
	0x6d, 0x55, 0xce, 0x4a, 0x01, 0x1e, 0x31, 0x7d, 0xc3, 0x0b, 0x58, 0x1e, 0xd7, 0x39, 0x80, 0xb2,
	0xba, 0x8c, 0xa3, 0xfc, 0xb3, 0x04, 0x6b, 0x7c, 0x89, 0x5e, 0x40, 0x7d, 0xec, 0x5c, 0x10, 0xdb,
	0x98, 0xa7, 0x5d, 0xba, 0x35, 0xed, 0xa7, 0x39, 0x5c, 0x63, 0xe0, 0xf9, 0xd9, 0xfb, 0x0c, 0x36,
	0xb2, 0x5c, 0xc6, 0x69, 0xbd, 0xee, 0xdd, 0x90, 0xf1, 0x98, 0xde, 0x22, 0x73, 0x20, 0xfa, 0x01,
	0x94, 0x02, 0x9a, 0xf4, 0xf4, 0xd6, 0x12, 0x35, 0xe6, 0xc5, 0xa0, 0x37, 0x16, 0x03, 0x35, 0xcb,
	0xb0, 0xc6, 0x37, 0xa2, 0x78, 0x50, 0x6e, 0x05, 0xe7, 0x24, 0x32, 0x27, 0x04, 0xdd, 0x87, 0xb5,
	0xd7, 0xc4, 0x99, 0xbc, 0xe6, 0x17, 0x65, 0x09, 0xa7, 0x14, 0x3d, 0x33, 0x66, 0x64, 0x19, 0xef,
	0x1c, 0x3b, 0x79, 0xcd, 0x22, 0x2a, 0xe1, 0xb2, 0x19, 0x59, 0x5f, 0x51, 0x1a, 0xed, 0xc0, 0x7a,
	0x7a, 0xa2, 0x99, 0xeb, 0x12, 0xce, 0x48, 0x84, 0x68, 0x9f, 0xba, 0x09, 0xab, 0x43, 0x09, 0xb3,
	0x35, 0xcb, 0x92, 0x7a, 0xa4, 0x07, 0x36, 0x41, 0x2f, 0xa1, 0x1e, 0x93, 0xe8, 0xdc, 0xb1, 0x88,
	0xe1, 0x05, 0x36, 0x71, 0xe3, 0xb4, 0xbd, 0xbe, 0x2f, 0x84, 0xce, 0xa1, 0x07, 0x03, 0x8e, 0xeb,
	0x32, 0x98, 0xea, 0x27, 0xd1, 0x0c, 0xd7, 0x62, 0x91, 0xf7, 0xe8, 0x2f, 0x01, 0x5d, 0x07, 0x21,
	0x19, 0x0a, 0x6f, 0xc8, 0x8c, 0xed, 0x66, 0x03, 0xd3, 0x25, 0x3a, 0x84, 0xd2, 0xb9, 0xe9, 0x4e,
	0x49, 0x9a, 0xd8, 0xc7, 0x82, 0x2f, 0x51, 0x5f, 0xf3, 0xc7, 0x01, 0xe6, 0xc8, 0x3f, 0xcd, 0x7f,
	0x2e, 0x29, 0x63, 0xa8, 0xf2, 0x50, 0x5a, 0x81, 0x3f, 0x76, 0x26, 0xe8, 0x05, 0x54, 0xac, 0xc0,
	0xf7, 0x89, 0x45, 0x73, 0x98, 0x05, 0x2e, 0xe6, 0x5c, 0xf3, 0x13, 0x12, 0x8d, 0x4d, 0x8b, 0x34,
	0x8b, 0xbf, 0xb9, 0xdc, 0xcb, 0x61, 0x11, 0x4e, 0x53, 0x76, 0x4e, 0xa2, 0x38, 0x3b, 0x8f, 0x45,
	0x9c, 0x91, 0x8a, 0x06, 0xa5, 0x0e, 0x31, 0x63, 0x82, 0x7e, 0x06, 0x40, 0x2e, 0x42, 0x27, 0x12,
	0xdb, 0xe7, 0x8e, 0xb3, 0xd3, 0x2c, 0x7e, 0xf3, 0x1f, 0x7b, 0x12, 0x16, 0x74, 0x94, 0xff, 0x92,
	0x60, 0x63, 0x1e, 0x05, 0xfa, 0x21, 0x14, 0x93, 0x59, 0xc8, 0xef, 0x8c, 0xfa, 0xd2, 0xf5, 0x33,
	0xc7, 0x1c, 0x0c, 0x67, 0x21, 0xc1, 0x0c, 0x86, 0xee, 0x43, 0xde, 0x09, 0x59, 0x70, 0x1b, 0xcd,
	0xb5, 0xab, 0xcb, 0xbd, 0xbc, 0xd6, 0xc7, 0x79, 0x27, 0xa4, 0x25, 0x0d, 0x83, 0x88, 0x37, 0x59,
	0x0d, 0xb3, 0xb5, 0xf2, 0x6b, 0x09, 0x8a, 0x54, 0x15, 0x7d, 0x0f, 0xb6, 0x34, 0x7d, 0xa8, 0xe2,
	0xe3, 0x46, 0x4b, 0x35, 0x46, 0xfa, 0x4b, 0xbd, 0xf7, 0x95, 0x2e, 0xe7, 0xd0, 0x16, 0xd4, 0x16,
	0x6c, 0xf5, 0x68, 0x28, 0x4b, 0xcb, 0x48, 0xf5, 0xa8, 0xd1, 0x3f, 0x7c, 0x7e, 0x28, 0xe7, 0xaf,
	0xb3, 0x8f, 0x9e, 0x3f, 0x97, 0x0b, 0xcb, 0xec, 0xc6, 0xa1, 0xf1, 0x8b, 0x46, 0xbf, 0x2f, 0x17,
	0x11, 0x82, 0xba, 0xc8, 0x6e, 0xf4, 0xe5, 0x92, 0xf2, 0x25, 0xac, 0xab, 0x47, 0x43, 0x5a, 0x3d,
	0xf4, 0x19, 0x80, 0x93, 0x6d, 0xed, 0xce, 0x0a, 0x61, 0x01, 0xa7, 0xfc, 0x4a, 0x82, 0xf2, 0x2f,
	0x1a, 0x61, 0xf8, 0xfb, 0x9b, 0x40, 0x5f, 0xc2, 0xa6, 0x79, 0x68, 0x84, 0x81, 0xeb, 0x58, 0x33,
	0x83, 0x66, 0x93, 0x9e, 0x62, 0xaa, 0xfa, 0x40, 0x7c, 0x25, 0x0e, 0xfb, 0x0c, 0xc0, 0x72, 0x5e,
	0x33, 0x05, 0x2a, 0x56, 0xfe, 0x49, 0x82, 0xaa, 0x28, 0x47, 0x7f, 0x0c, 0x5b, 0xcb, 0x16, 0x0d,
	0xc7, 0x4e, 0x9b, 0xba, 0x2e, 0xaa, 0x6a, 0x36, 0x7a, 0x0a, 0x55, 0xf3, 0x90, 0x63, 0x7c, 0xd3,
	0xe3, 0x6d, 0xbe, 0x81, 0xc1, 0x3c, 0xa4, 0x72, 0xdd, 0xf4, 0x08, 0xfa, 0x98, 0x85, 0xc7, 0x10,
	0x59, 0x13, 0x16, 0x18, 0xa8, 0xc6, 0x41, 0x3f, 0xe7, 0x4c, 0x74, 0x00, 0xdb, 0x19, 0xce, 0x26,
	0xb1, 0x15, 0x39, 0x21, 0x6b, 0xc5, 0x22, 0xc3, 0x6e, 0x71, 0x6c, 0x7b, 0x21, 0xa0, 0xa9, 0x6f,
	0x1c, 0xfe, 0x21, 0xa9, 0x1f, 0x41, 0xb5, 0x45, 0x5c, 0xf7, 0xc4, 0x0d, 0xce, 0x4c, 0x57, 0x6b,
	0xa3, 0x7b, 0xd9, 0x51, 0xe5, 0x3b, 0xe5, 0x04, 0x7a, 0x96, 0x36, 0x72, 0x9e, 0x35, 0xb2, 0x78,
	0x7e, 0x45, 0xe5, 0x45, 0x2b, 0x2b, 0x7f, 0x2d, 0x41, 0x5d, 0xa7, 0xf7, 0xd8, 0x59, 0x10, 0x51,
	0x88, 0xd6, 0x46, 0x3d, 0xa8, 0x5b, 0xc4, 0x75, 0x8d, 0x09, 0x43, 0x67, 0xc9, 0x5c, 0x2e, 0x90,
	0x68, 0xad, 0x29, 0x5f, 0x5d, 0xee, 0x2d, 0x05, 0x87, 0xab, 0xd6, 0x82, 0xb2, 0xd1, 0x47, 0xb0,
	0x1e, 0xba, 0x9e, 0x4f, 0x2d, 0xf1, 0x33, 0x03, 0x57, 0x97, 0x7b, 0x6b, 0x7d, 0xd7, 0xf3, 0xb5,
	0x36, 0x5e, 0xa3, 0x22, 0xcd, 0x56, 0x7e, 0x55, 0xa4, 0x57, 0x1f, 0xb5, 0x82, 0x7e, 0x9c, 0x06,
	0x10, 0x9c, 0xfd, 0x92, 0x58, 0xc9, 0xbc, 0x9a, 0x0b, 0x3f, 0x3d, 0x26, 0xc8, 0xfc, 0xa4, 0x94,
	0x7d, 0x43, 0xe0, 0xf9, 0x3f, 0x34, 0xf0, 0x9a, 0xe9, 0x27, 0xc4, 0xf7, 0x4d, 0xc3, 0x0a, 0xa6,
	0x7e, 0x76, 0xb0, 0xab, 0x29, 0xb3, 0x45, 0x79, 0x48, 0x81, 0x35, 0x62, 0x46, 0x63, 0x8b, 0x17,
	0xbf, 0xc6, 0x37, 0xa7, 0x36, 0xf0, 0x71, 0x4b, 0xc7, 0xa9, 0x84, 0x3e, 0x11, 0x2c, 0x32, 0x56,
	0x9b, 0x12, 0x2b, 0x58, 0x99, 0x32, 0x58, 0xff, 0x3e, 0x84, 0x42, 0x68, 0x39, 0xec, 0x51, 0xad,
	0x35, 0xd7, 0xaf, 0x2e, 0xf7, 0x0a, 0xfd, 0x96, 0x86, 0x29, 0x0f, 0x61, 0xa8, 0xbc, 0x09, 0x1d,
	0x23, 0x22, 0xf4, 0x2a, 0x89, 0x77, 0xd6, 0x59, 0xaf, 0x7c, 0xb8, 0xf4, 0x02, 0xd0, 0xf0, 0x0f,
	0x5e, 0x86, 0x0e, 0xe6, 0x18, 0x76, 0xb3, 0x37, 0xeb, 0x57, 0x97, 0x7b, 0xb0, 0x60, 0x62, 0x78,
	0x33, 0x5f, 0xa3, 0xbf, 0x80, 0x2d, 0x3f, 0x2d, 0xb8, 0xc1, 0x82, 0x72, 0xec, 0x78, 0xa7, 0xcc,
	0x2c, 0x8b, 0x17, 0xdf, 0x72, 0x53, 0x34, 0xb7, 0xaf, 0x2e, 0xf7, 0x36, 0x97, 0x79, 0x31, 0xde,
	0xf4, 0x45, 0x86, 0x1d, 0x3f, 0xfa, 0x02, 0x36, 0x57, 0x42, 0xb9, 0xe1, 0x91, 0xb9, 0x27, 0x3e,
	0x32, 0x35, 0xf1, 0x1d, 0xf9, 0x7b, 0x09, 0xe4, 0xd5, 0x77, 0x86, 0xa6, 0x27, 0x98, 0xb7, 0x00,
	0x4b, 0x4f, 0x4f, 0x6b, 0x63, 0xca, 0xa3, 0xf7, 0xad, 0x70, 0x8c, 0xd9, 0x1a, 0xfd, 0x04, 0x6a,
	0x91, 0xe9, 0x1b, 0xe3, 0xa9, 0x9f, 0xbe, 0x3e, 0x85, 0xf4, 0x80, 0xad, 0xbe, 0x0e, 0x0d, 0x7f,
	0x86, 0xab, 0x91, 0xe9, 0x1f, 0x67, 0x48, 0xf4, 0x31, 0xd4, 0x05, 0x5a, 0x6b, 0xc7, 0x3b, 0xc5,
	0xa7, 0x85, 0x4f, 0x6b, 0x78, 0x85, 0xab, 0x8c, 0xa1, 0x86, 0x5b, 0x78, 0xc1, 0x63, 0xef, 0x41,
	0x16, 0x21, 0x7f, 0x0f, 0xda, 0x38, 0xef, 0xd8, 0xe8, 0x0b, 0xa8, 0xf1, 0xd2, 0x19, 0x71, 0x32,
	0x73, 0xe7, 0x37, 0x9d, 0xf8, 0xcd, 0x84, 0x5b, 0x3c, 0x5b, 0x03, 0x0a, 0xc0, 0xd5, 0x68, 0x41,
	0xc4, 0xca, 0x6b, 0xa8, 0x77, 0x4f, 0x7b, 0xdf, 0xc5, 0xd1, 0x4f, 0x6f, 0x76, 0x24, 0xd6, 0x93,
	0x5a, 0xba, 0xcb, 0xd3, 0xcb, 0x7e, 0xf7, 0xff, 0xc9, 0x13, 0xb5, 0x74, 0xab, 0xa7, 0xbf, 0x93,
	0xa0, 0x8e, 0x07, 0xdf, 0xc9, 0x55, 0x00, 0x4f, 0x23, 0xc7, 0x32, 0x62, 0xd7, 0xb1, 0x1c, 0x7f,
	0x62, 0xf8, 0x81, 0x4d, 0x0c, 0xcb, 0x0c, 0xcd, 0x33, 0xc7, 0x75, 0x92, 0x99, 0xe1, 0x3a, 0x71,
	0x92, 0x7a, 0xff, 0x44, 0x4c, 0xe8, 0xa0, 0x4b, 0x27, 0x91, 0x01, 0xd7, 0x6a, 0xcd, 0xf1, 0x5a,
	0x42, 0x3c, 0xfc, 0x41, 0xe4, 0x58, 0xa9, 0x84, 0x8d, 0x2b, 0x73, 0x69, 0xc7, 0x89, 0x13, 0xe5,
	0xdf, 0xf3, 0xf0, 0xc1, 0x5d, 0xea, 0xe8, 0x33, 0x78, 0xe0, 0x99, 0x17, 0x86, 0x3f, 0xf5, 0xce,
	0x48, 0x64, 0x04, 0x63, 0x16, 0x1b, 0x89, 0x0d, 0xdb, 0x4d, 0x47, 0xc2, 0x6d, 0xcf, 0xbc, 0xd0,
	0x99, 0xb4, 0x37, 0x1e, 0x30, 0x59, 0xdb, 0xbd, 0x55, 0x6b, 0xea, 0xa6, 0xd3, 0xe2, 0x75, 0xad,
	0x91, 0x8b, 0x5e, 0x40, 0x35, 0xdb, 0x39, 0xbb, 0x35, 0x0a, 0xd7, 0x46, 0x13, 0x3c, 0xe8, 0xa6,
	0x61, 0xb2, 0xfb, 0xbc, 0x12, 0x2f, 0x08, 0xf4, 0x67, 0xf0, 0x78, 0xd9, 0xe7, 0x94, 0xc4, 0x46,
	0x48, 0x22, 0xee, 0x3b, 0x9d, 0x39, 0xef, 0x0b, 0x7e, 0x47, 0x24, 0xee, 0x93, 0x88, 0x79, 0x47,
	0x03, 0x90, 0xe3, 0x69, 0x48, 0x8b, 0x46, 0x6c, 0xc3, 0x62, 0x23, 0xdd, 0x4e, 0x89, 0x25, 0xfa,
	0xd3, 0x15, 0xf7, 0x19, 0x2a, 0x4b, 0x17, 0xc3, 0xb2, 0x4c, 0x6f, 0xce, 0x2d, 0x70, 0xa6, 0xf2,
	0x4b, 0x78, 0x72, 0xa7, 0x06, 0xd2, 0x60, 0x3b, 0xdb, 0x30, 0xf7, 0x69, 0xdc, 0x32, 0x92, 0xa9,
	0x47, 0x03, 0x0f, 0xc7, 0x5e, 0x2b, 0xf0, 0x3c, 0xd3, 0xb7, 0xf1, 0x56, 0x2c, 0x9a, 0xa2, 0xbb,
	0x57, 0x06, 0x20, 0xa7, 0xc9, 0x21, 0xd4, 0x34, 0x2d, 0x2e, 0xfa, 0x12, 0xea, 0x51, 0xec, 0xf1,
	0xfd, 0xf3, 0xde, 0x91, 0xae, 0x75, 0xee, 0x22, 0xa3, 0x6c, 0x0f, 0xd5, 0x28, 0xf6, 0x98, 0x11,
	0xd6, 0x1d, 0xff, 0xc3, 0x3b, 0x57, 0x00, 0xdc, 0xda, 0xb9, 0x4f, 0x00, 0xb8, 0x1f, 0x3a, 0x1a,
	0xa4, 0xb7, 0xd3, 0x06, 0xe3, 0xd0, 0x91, 0x00, 0x9d, 0x82, 0xcc, 0xc5, 0xa1, 0x19, 0x99, 0x1e,
	0x49, 0x48, 0x14, 0xa7, 0xdf, 0x25, 0x4f, 0xae, 0x07, 0x43, 0xfa, 0x73, 0x10, 0xde, 0x8c, 0x97,
	0x19, 0xe8, 0xc7, 0x99, 0x23, 0x96, 0xaa, 0x22, 0x4b, 0xd5, 0x83, 0x1b, 0x6c, 0xb0, 0x06, 0xe1,
	0x11, 0xb0, 0xf6, 0xf8, 0x11, 0xc0, 0x94, 0x8e, 0x49, 0x3c, 0x11, 0xbc, 0xb6, 0xdf, 0x13, 0xf4,
	0x46, 0x44, 0xb3, 0x89, 0x9f, 0x38, 0xc9, 0x0c, 0x97, 0xa7, 0x44, 0xb3, 0x59, 0x02, 0xfe, 0x56,
	0x02, 0x74, 0x3d, 0x28, 0xd4, 0x84, 0x7a, 0x6c, 0xbd, 0x26, 0xf6, 0xd4, 0x25, 0x91, 0x58, 0xb2,
	0xc7, 0x2b, 0x71, 0x64, 0x18, 0x3e, 0xd3, 0xc5, 0x22, 0x49, 0x3f, 0xad, 0xde, 0xf1, 0x4f, 0x2b,
	0x7e, 0x22, 0x52, 0x8a, 0xbe, 0x9b, 0x6f, 0x83, 0xd8, 0x70, 0xc9, 0x39, 0x71, 0xd3, 0xef, 0xa7,
	0xf2, 0xdb, 0x20, 0xee, 0x50, 0x5a, 0x51, 0x00, 0xda, 0xd3, 0x11, 0x39, 0x3e, 0x34, 0xc3, 0xd5,
	0x79, 0xa8, 0x90, 0xbe, 0x2a, 0x14, 0xd3, 0xfa, 0x5d, 0x98, 0x8f, 0xa0, 0x82, 0x4d, 0x7f, 0x44,
	0xf4, 0xc9, 0xdd, 0x20, 0xd5, 0x3f, 0x1b, 0x91, 0xc1, 0x0d, 0x96, 0x4a, 0x02, 0xa8, 0xe1, 0x8d,
	0x7f, 0x87, 0xa5, 0x5f, 0x17, 0x01, 0x16, 0xf9, 0x45, 0xa7, 0x50, 0xb3, 0xa7, 0xc6, 0x94, 0x18,
	0xe3, 0x43, 0x33, 0x5c, 0x0c, 0x5b, 0x62, 0x35, 0x16, 0xbb, 0xe4, 0x0f, 0xfb, 0x82, 0xc6, 0x60,
	0x67, 0x6b, 0x9b, 0x5a, 0xb2, 0x96, 0x2c, 0xe5, 0xaf, 0x59, 0x6a, 0xad, 0x58, 0x6a, 0x09, 0x96,
	0xac, 0x85, 0xa5, 0x0e, 0x7b, 0x08, 0xa9, 0x29, 0x7f, 0xc2, 0x4d, 0xf1, 0xf6, 0xbc, 0x2f, 0x96,
	0x74, 0x91, 0xb2, 0xe6, 0xe6, 0xd5, 0xe5, 0x5e, 0x05, 0x37, 0xf4, 0x8c, 0x81, 0x2b, 0xd1, 0x5c,
	0xca, 0xac, 0x11, 0xff, 0x8c, 0x5a, 0x8b, 0xd3, 0xc0, 0x8a, 0xd7, 0xac, 0x09, 0xb9, 0xe5, 0xd6,
	0x04, 0x06, 0xae, 0x90, 0x39, 0xc1, 0xac, 0x99, 0xde, 0x58, 0x8c, 0xad, 0x74, 0xcd, 0x9a, 0x50,
	0x04, 0x6e, 0xad, 0xd1, 0x3d, 0x5e, 0xc4, 0x66, 0xce, 0xa5, 0x36, 0x1a, 0xc2, 0x56, 0x18, 0x91,
	0x31, 0x89, 0x22, 0x62, 0xd3, 0xf3, 0xc0, 0xfa, 0x77, 0x8d, 0xf5, 0xef, 0xf6, 0xca, 0x79, 0xa0,
	0x8d, 0xca, 0xc7, 0xa0, 0x7e, 0xa6, 0x91, 0x4e, 0xd2, 0x9b, 0x73, 0x13, 0x1c, 0x85, 0x3e, 0x81,
	0x35, 0x3b, 0x3a, 0xa3, 0xb1, 0xad, 0xb3, 0xd8, 0x64, 0xb1, 0x98, 0xd1, 0x99, 0x66, 0xe3, 0x92,
	0x4d, 0x7f, 0x94, 0xbf, 0x91, 0xa0, 0xc4, 0x18, 0xe8, 0x27, 0x50, 0x1d, 0x07, 0xd3, 0xc8, 0x98,
	0xa4, 0x8a, 0xd7, 0xbb, 0xe0, 0x38, 0x98, 0x46, 0x27, 0x0c, 0x7c, 0x9a, 0xc3, 0x30, 0xce, 0xa8,
	0x36, 0x53, 0x75, 0xce, 0xc9, 0x5c, 0xf5, 0x7a, 0xd9, 0x8f, 0x9d, 0x73, 0x22, 0xa8, 0x66, 0x54,
	0xbb, 0x59, 0xce, 0x02, 0x55, 0xbe, 0x91, 0x00, 0x16, 0xb0, 0x9b, 0xfb, 0x1b, 0x3d, 0x85, 0xc2,
	0xdb, 0xb1, 0x93, 0x3a, 0xa8, 0x0b, 0x0e, 0x5e, 0x8d, 0x1d, 0x4c, 0x45, 0xe8, 0xcf, 0x41, 0x1e,
	0xbb, 0xc1, 0xbb, 0xd8, 0xf0, 0xcc, 0xd0, 0x48, 0x02, 0xc3, 0x8e, 0xce, 0xd2, 0x01, 0x4c, 0x9c,
	0x5a, 0x5f, 0x05, 0x03, 0x8a, 0x62, 0xc7, 0x58, 0xb8, 0xde, 0x6a, 0x4c, 0xb5, 0x6b, 0x86, 0xc3,
	0xa0, 0x1d, 0x9d, 0x29, 0x8f, 0xa1, 0xf0, 0x6a, 0xec, 0xdc, 0x72, 0xd4, 0xfe, 0x55, 0x82, 0xfb,
	0x37, 0x9b, 0x41, 0x4d, 0xd8, 0xb4, 0x67, 0xbe, 0xe9, 0x39, 0x96, 0xc1, 0xf2, 0xf2, 0xd6, 0x49,
	0xb3, 0x29, 0xce, 0x5d, 0x6d, 0x8e, 0xa0, 0x5b, 0x7e, 0xe5, 0x9c, 0xe6, 0x70, 0xcd, 0x16, 0x19,
	0xa8, 0x03, 0xdb, 0x7e, 0xe0, 0x1b, 0xab, 0x76, 0xae, 0xff, 0x2d, 0xa2, 0x07, 0xfe, 0xaa, 0x29,
	0xd9, 0x5f, 0xe1, 0x35, 0x1f, 0xc3, 0x43, 0x7a, 0x8d, 0xd1, 0x60, 0xf9, 0x5d, 0x26, 0xdc, 0xfc,
	0x34, 0xf3, 0xb5, 0x25, 0x38, 0xfa, 0x23, 0xa8, 0x87, 0x91, 0x13, 0x44, 0x6c, 0xca, 0x61, 0x57,
	0x1f, 0xdf, 0x7a, 0x2d, 0xe3, 0xb2, 0x1d, 0xa3, 0x1f, 0x00, 0x0a, 0x4d, 0xeb, 0x0d, 0x49, 0x0c,
	0x9b, 0xb8, 0xe6, 0xcc, 0x38, 0x9b, 0xda, 0x13, 0x92, 0x5e, 0xa0, 0x32, 0x97, 0xb4, 0xa9, 0xa0,
	0x49, 0xf9, 0x68, 0x1f, 0xb6, 0x52, 0x34, 0x89, 0xa2, 0x20, 0x32, 0x22, 0x33, 0x21, 0xe9, 0x95,
	0xba, 0xc9, 0x05, 0x2a, 0xe5, 0x63, 0x33, 0x21, 0xca, 0x4f, 0x41, 0x5e, 0xdd, 0x17, 0xda, 0x87,
	0xf5, 0xe5, 0x6c, 0x6e, 0xad, 0x34, 0xd8, 0x2b, 0x07, 0xaf, 0x8d, 0xd9, 0xaf, 0xb2, 0x0b, 0x6b,
	0xa9, 0xd6, 0xcd, 0xc5, 0x6b, 0x03, 0x2c, 0xba, 0xf9, 0x8e, 0x5e, 0xb3, 0x6e, 0xec, 0x35, 0x8b,
	0xf6, 0x9a, 0xe5, 0xb0, 0xfe, 0xb0, 0x6e, 0x73, 0xf1, 0x27, 0x6c, 0x46, 0x5f, 0x4c, 0x9e, 0xf3,
	0x6f, 0x05, 0x49, 0xf8, 0x56, 0x40, 0xc2, 0xd7, 0x72, 0x29, 0xfd, 0x20, 0x7e, 0xc7, 0x47, 0xe1,
	0xff, 0xbb, 0x26, 0xfa, 0x02, 0xaa, 0x1e, 0x31, 0xe3, 0x69, 0x44, 0x3c, 0xe2, 0x27, 0xd9, 0x87,
	0xc7, 0xca, 0x64, 0xdc, 0x5d, 0x20, 0xf0, 0x12, 0x5c, 0xf9, 0x9c, 0x4f, 0xfb, 0xbf, 0x47, 0xc8,
	0x2f, 0x58, 0xc8, 0x82, 0xe5, 0x5b, 0x07, 0x93, 0x1b, 0x3e, 0x98, 0xf6, 0xdb, 0x50, 0xc7, 0x0d,
	0x5d, 0x65, 0xaf, 0xd1, 0x4b, 0xc7, 0xb7, 0x63, 0x04, 0xec, 0x4f, 0xc8, 0x5e, 0x5b, 0x95, 0x73,
	0x7c, 0xdd, 0x52, 0x3b, 0x1d, 0x59, 0x42, 0xeb, 0x50, 0x50, 0x8f, 0x86, 0x72, 0x01, 0x95, 0xa1,
	0x98, 0xfe, 0xcb, 0xb4, 0x0e, 0x85, 0xc6, 0xe1, 0x50, 0x2e, 0xed, 0x7f, 0x01, 0x32, 0x6e, 0xe8,
	0x98, 0xb8, 0xec, 0xef, 0x35, 0x6e, 0xa7, 0x0a, 0xe5, 0x56, 0x4f, 0x1f, 0xe2, 0x5e, 0x67, 0x20,
	0xe7, 0x32, 0xaa, 0xa1, 0xe9, 0x03, 0x59, 0x42, 0x35, 0xd8, 0xd0, 0x55, 0xed, 0xe4, 0xb4, 0xd9,
	0xc3, 0x03, 0x39, 0xbf, 0xff, 0x09, 0xc8, 0xab, 0x7f, 0x50, 0xa0, 0x0d, 0x28, 0xe9, 0xb8, 0x75,
	0xa2, 0xc9, 0x39, 0xea, 0x50, 0xa5, 0x2b, 0x69, 0xbf, 0x0b, 0x65, 0x3a, 0x9f, 0x33, 0x40, 0x05,
	0xd6, 0xf5, 0xa1, 0xa1, 0xf7, 0xf4, 0x34, 0x50, 0x7d, 0x68, 0x9c, 0xe8, 0xcd, 0xd4, 0xf8, 0xd0,
	0x50, 0x75, 0x46, 0xe6, 0x53, 0x52, 0x3f, 0x31, 0x54, 0xbd, 0x29, 0x17, 0x52, 0x24, 0x5d, 0x17,
	0xf7, 0x3b, 0x50, 0x6b, 0x05, 0x5e, 0x18, 0xf8, 0xc4, 0x4f, 0x32, 0x9b, 0xad, 0xb9, 0xcd, 0x0d,
	0x28, 0xb5, 0x86, 0x46, 0x6b, 0x24, 0x4b, 0x2c, 0x7a, 0xba, 0x34, 0x46, 0x7d, 0x39, 0x9f, 0x0a,
	0xda, 0x23, 0x6e, 0xad, 0x95, 0x59, 0xfb, 0x17, 0x09, 0xea, 0xcb, 0xd3, 0x29, 0x52, 0x60, 0x57,
	0x3d, 0x32, 0x06, 0x5d, 0x03, 0x0f, 0xba, 0x46, 0xab, 0xd7, 0xed, 0x36, 0xf4, 0xb6, 0x31, 0xe8,
	0x68, 0x2d, 0xd5, 0x68, 0x61, 0xb5, 0x31, 0xa4, 0x6e, 0xee, 0xc0, 0x8c, 0xfa, 0x6d, 0x8a, 0x91,
	0xee, 0xc2, 0xb4, 0xd5, 0x8e, 0x3a, 0x54, 0xe5, 0xfc, 0xcd, 0x98, 0x91, 0x6a, 0x34, 0x06, 0x83,
	0x5e, 0x4b, 0xa3, 0x76, 0x0a, 0xe8, 0xfb, 0xf0, 0xf4, 0x3a, 0x46, 0xfd, 0xb9, 0xaa, 0x0f, 0x8d,
	0x21, 0xd6, 0x4e, 0x4e, 0x54, 0x3c, 0x90, 0x8b, 0xfb, 0x2d, 0x71, 0xd4, 0x65, 0x79, 0x79, 0x00,
	0xdb, 0xd4, 0x9b, 0xa6, 0x9f, 0x18, 0xc3, 0xaf, 0xfb, 0xaa, 0x31, 0x18, 0x36, 0x86, 0x5a, 0x4b,
	0xce, 0xa1, 0x1d, 0xb8, 0xb7, 0x24, 0x68, 0x7f, 0xad, 0x37, 0xba, 0x5a, 0x4b, 0x96, 0xf6, 0x2f,
	0xf8, 0x14, 0xbe, 0x34, 0xe8, 0xed, 0xc2, 0xa3, 0x41, 0xeb, 0x54, 0x6d, 0x8f, 0x3a, 0x2a, 0xe6,
	0x78, 0xdc, 0x1b, 0xe9, 0x6d, 0x03, 0xf7, 0x9a, 0x9a, 0x2e, 0xe7, 0xd0, 0xc7, 0xa0, 0xac, 0xc8,
	0xfb, 0xb8, 0xd7, 0xef, 0xe1, 0xa1, 0xd6, 0xd3, 0x1b, 0x9d, 0xce, 0xd7, 0xc6, 0x71, 0x43, 0xc3,
	0xb2, 0x84, 0x3e, 0x80, 0x9d, 0x15, 0xdc, 0xab, 0xde, 0xc0, 0x68, 0x36, 0x06, 0x6a, 0x5b, 0xce,
	0xef, 0xff, 0x0c, 0xaa, 0xe2, 0xe4, 0x9b, 0x05, 0xaf, 0xa6, 0x11, 0x76, 0x78, 0xe2, 0xe4, 0xdc,
	0x8a, 0x60, 0x94, 0x09, 0xa4, 0xfd, 0x7f, 0x90, 0xa0, 0x9c, 0x3d, 0xfa, 0xe8, 0x09, 0x3c, 0x1c,
	0xa9, 0x86, 0xd6, 0xe6, 0x28, 0xda, 0x03, 0xaa, 0x71, 0x7c, 0x68, 0x34, 0xfa, 0x86, 0xd6, 0x96,
	0x73, 0x2b, 0xe2, 0xf6, 0xb2, 0x58, 0x5a, 0x11, 0xe3, 0x86, 0x4e, 0xe5, 0xfa, 0x09, 0x17, 0xe7,
	0x57, 0xc4, 0x8d, 0xee, 0xb1, 0x28, 0x2e, 0xd0, 0x84, 0x09, 0x62, 0x55, 0x6f, 0x52, 0xf1, 0x20,
	0xb3, 0x5e, 0x6c, 0xee, 0xfc, 0xe6, 0x6a, 0x57, 0xfa, 0xed, 0xd5, 0xae, 0xf4, 0x9f, 0x57, 0xbb,
	0xd2, 0x37, 0xdf, 0xee, 0xe6, 0x7e, 0xfb, 0xed, 0x6e, 0xee, 0xdf, 0xbe, 0xdd, 0xcd, 0x9d, 0xad,
	0xb1, 0x7f, 0x3a, 0x7e, 0xf4, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x02, 0x49, 0xfd, 0x65, 0x5c,
	0x1e, 0x00, 0x00,
}

func (m *Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ext != nil {
		{
			size := m.Ext.Size()
			i -= size
			if _, err := m.Ext.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Lng != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lng))))
		i--
		dAtA[i] = 0x11
	}
	if m.Lat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Location_Wgs84) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location_Wgs84) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Wgs84 != nil {
		{
			size, err := m.Wgs84.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Location_Cartesian) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location_Cartesian) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Cartesian != nil {
		{
			size, err := m.Cartesian.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Wgs84Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Wgs84Location) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Wgs84Location) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AltitudeM != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AltitudeM))))
		i--
		dAtA[i] = 0x19
	}
	if m.LongitudeDeg != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LongitudeDeg))))
		i--
		dAtA[i] = 0x11
	}
	if m.LatitudeDeg != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LatitudeDeg))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *CartesianLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CartesianLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CartesianLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ZM != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ZM))))
		i--
		dAtA[i] = 0x19
	}
	if m.YM != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.YM))))
		i--
		dAtA[i] = 0x11
	}
	if m.XM != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.XM))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *AzElOrientation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzElOrientation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzElOrientation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RotationDeg != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RotationDeg))))
		i--
		dAtA[i] = 0x19
	}
	if m.ElevationDeg != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ElevationDeg))))
		i--
		dAtA[i] = 0x11
	}
	if m.AzimuthDeg != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AzimuthDeg))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *YprOrientation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YprOrientation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YprOrientation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RollDeg != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RollDeg))))
		i--
		dAtA[i] = 0x19
	}
	if m.PitchDeg != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PitchDeg))))
		i--
		dAtA[i] = 0x11
	}
	if m.YawDeg != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.YawDeg))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Orientation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Orientation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Orientation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Orientation != nil {
		{
			size := m.Orientation.Size()
			i -= size
			if _, err := m.Orientation.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Orientation_Azel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Orientation_Azel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Azel != nil {
		{
			size, err := m.Azel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Orientation_Ypr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Orientation_Ypr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ypr != nil {
		{
			size, err := m.Ypr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Waypoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Waypoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Waypoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Time != nil {
		{
			size, err := m.Time.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Waypoints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Waypoints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Waypoints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Waypoint) > 0 {
		for iNdEx := len(m.Waypoint) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Waypoint[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OrbitData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrbitData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrbitData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MeanMotion != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MeanMotion))))
		i--
		dAtA[i] = 0x39
	}
	if m.AnomalyDeg != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AnomalyDeg))))
		i--
		dAtA[i] = 0x31
	}
	if m.ArgumentDeg != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ArgumentDeg))))
		i--
		dAtA[i] = 0x29
	}
	if m.E != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.E))))
		i--
		dAtA[i] = 0x21
	}
	if m.RaanDeg != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RaanDeg))))
		i--
		dAtA[i] = 0x19
	}
	if m.InclinationDeg != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.InclinationDeg))))
		i--
		dAtA[i] = 0x11
	}
	if m.Epoch != nil {
		{
			size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Motion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Motion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Motion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Motion != nil {
		{
			size := m.Motion.Size()
			i -= size
			if _, err := m.Motion.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Motion_FixedLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Motion_FixedLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FixedLocation != nil {
		{
			size, err := m.FixedLocation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Motion_Waypoints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Motion_Waypoints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Waypoints != nil {
		{
			size, err := m.Waypoints.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Motion_Orbit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Motion_Orbit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Orbit != nil {
		{
			size, err := m.Orbit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Coverage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coverage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Coverage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tilt != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Tilt))
		i--
		dAtA[i] = 0x20
	}
	if m.Azimuth != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Azimuth))
		i--
		dAtA[i] = 0x18
	}
	if m.ArcWidth != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.ArcWidth))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *E2Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceModels) > 0 {
		for k := range m.ServiceModels {
			v := m.ServiceModels[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRan(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRan(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRan(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *E2NodeConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2NodeConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2NodeConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Connections) > 0 {
		for iNdEx := len(m.Connections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Connections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Lease) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lease) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Lease) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiration != nil {
		n12, err12 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Expiration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Expiration):])
		if err12 != nil {
			return 0, err12
		}
		i -= n12
		i = encodeVarintRan(dAtA, i, uint64(n12))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Interface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x18
	}
	if len(m.IP) > 0 {
		i -= len(m.IP)
		copy(dAtA[i:], m.IP)
		i = encodeVarintRan(dAtA, i, uint64(len(m.IP)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *E2TInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2TInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2TInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for iNdEx := len(m.Interfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *XAppInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XAppInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XAppInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.A1PolicyTypes) > 0 {
		for iNdEx := len(m.A1PolicyTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.A1PolicyTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Interfaces) > 0 {
		for iNdEx := len(m.Interfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *A1PolicyType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *A1PolicyType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *A1PolicyType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.A1TypeDescription) > 0 {
		i -= len(m.A1TypeDescription)
		copy(dAtA[i:], m.A1TypeDescription)
		i = encodeVarintRan(dAtA, i, uint64(len(m.A1TypeDescription)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.A1TypeVersion) > 0 {
		i -= len(m.A1TypeVersion)
		copy(dAtA[i:], m.A1TypeVersion)
		i = encodeVarintRan(dAtA, i, uint64(len(m.A1TypeVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.A1TypeName) > 0 {
		i -= len(m.A1TypeName)
		copy(dAtA[i:], m.A1TypeName)
		i = encodeVarintRan(dAtA, i, uint64(len(m.A1TypeName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.A1PolicyTypeId) > 0 {
		i -= len(m.A1PolicyTypeId)
		copy(dAtA[i:], m.A1PolicyTypeId)
		i = encodeVarintRan(dAtA, i, uint64(len(m.A1PolicyTypeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *A1TInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *A1TInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *A1TInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for iNdEx := len(m.Interfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Interfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CellGlobalID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellGlobalID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellGlobalID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRan(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NeighborCellID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NeighborCellID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NeighborCellID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlmnID) > 0 {
		i -= len(m.PlmnID)
		copy(dAtA[i:], m.PlmnID)
		i = encodeVarintRan(dAtA, i, uint64(len(m.PlmnID)))
		i--
		dAtA[i] = 0x12
	}
	if m.CellGlobalID != nil {
		{
			size, err := m.CellGlobalID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *E2Cell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *E2Cell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *E2Cell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NeighborCellIDs) > 0 {
		for iNdEx := len(m.NeighborCellIDs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NeighborCellIDs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.KpiReports) > 0 {
		for k := range m.KpiReports {
			v := m.KpiReports[k]
			baseI := i
			i = encodeVarintRan(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRan(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRan(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.PCI != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.PCI))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CellType) > 0 {
		i -= len(m.CellType)
		copy(dAtA[i:], m.CellType)
		i = encodeVarintRan(dAtA, i, uint64(len(m.CellType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EARFCN != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.EARFCN))
		i--
		dAtA[i] = 0x20
	}
	if m.AntennaCount != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.AntennaCount))
		i--
		dAtA[i] = 0x18
	}
	if m.CellGlobalID != nil {
		{
			size, err := m.CellGlobalID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CellObjectID) > 0 {
		i -= len(m.CellObjectID)
		copy(dAtA[i:], m.CellObjectID)
		i = encodeVarintRan(dAtA, i, uint64(len(m.CellObjectID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceModelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceModelInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceModelInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RanFunctionIDs) > 0 {
		dAtA16 := make([]byte, len(m.RanFunctionIDs)*10)
		var j15 int
		for _, num := range m.RanFunctionIDs {
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintRan(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RanFunctions) > 0 {
		for iNdEx := len(m.RanFunctions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RanFunctions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRan(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OID) > 0 {
		i -= len(m.OID)
		copy(dAtA[i:], m.OID)
		i = encodeVarintRan(dAtA, i, uint64(len(m.OID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RCRanFunction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RCRanFunction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RCRanFunction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReportStyles) > 0 {
		for iNdEx := len(m.ReportStyles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReportStyles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRan(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MHORanFunction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MHORanFunction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MHORanFunction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReportStyles) > 0 {
		for iNdEx := len(m.ReportStyles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReportStyles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRan(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KPMRanFunction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KPMRanFunction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KPMRanFunction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReportStyles) > 0 {
		for iNdEx := len(m.ReportStyles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReportStyles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRan(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RSMRanFunction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RSMRanFunction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RSMRanFunction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RicSlicingNodeCapabilityList) > 0 {
		for iNdEx := len(m.RicSlicingNodeCapabilityList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RicSlicingNodeCapabilityList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRan(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RSMNodeSlicingCapabilityItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RSMNodeSlicingCapabilityItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RSMNodeSlicingCapabilityItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupportedConfig) > 0 {
		for iNdEx := len(m.SupportedConfig) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SupportedConfig[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.MaxNumberOfUesPerSlice != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.MaxNumberOfUesPerSlice))
		i--
		dAtA[i] = 0x20
	}
	if m.SlicingType != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.SlicingType))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxNumberOfSlicesUl != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.MaxNumberOfSlicesUl))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxNumberOfSlicesDl != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.MaxNumberOfSlicesDl))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RSMSupportedSlicingConfigItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RSMSupportedSlicingConfigItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RSMSupportedSlicingConfigItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SlicingConfigType != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.SlicingConfigType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RSMSliceItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RSMSliceItemList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RSMSliceItemList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RsmSliceList) > 0 {
		for iNdEx := len(m.RsmSliceList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RsmSliceList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RSMSlicingItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RSMSlicingItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RSMSlicingItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UeIdList) > 0 {
		for iNdEx := len(m.UeIdList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UeIdList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.SliceType != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.SliceType))
		i--
		dAtA[i] = 0x20
	}
	if m.SliceParameters != nil {
		{
			size, err := m.SliceParameters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SliceDesc) > 0 {
		i -= len(m.SliceDesc)
		copy(dAtA[i:], m.SliceDesc)
		i = encodeVarintRan(dAtA, i, uint64(len(m.SliceDesc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRan(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RSMSliceParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RSMSliceParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RSMSliceParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QosLevel != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.QosLevel))
		i--
		dAtA[i] = 0x18
	}
	if m.Weight != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	if m.SchedulerType != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.SchedulerType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DuUeF1ApID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DuUeF1ApID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DuUeF1ApID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CuUeF1ApID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CuUeF1ApID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CuUeF1ApID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RanUeNgapID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RanUeNgapID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RanUeNgapID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EnbUeS1ApID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnbUeS1ApID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnbUeS1ApID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AmfUeNgapID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AmfUeNgapID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AmfUeNgapID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UeIdentity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UeIdentity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UeIdentity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DrbId != nil {
		{
			size, err := m.DrbId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.PreferredIDType != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.PreferredIDType))
		i--
		dAtA[i] = 0x30
	}
	if m.AMFUeNgapID != nil {
		{
			size, err := m.AMFUeNgapID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.EnbUeS1apID != nil {
		{
			size, err := m.EnbUeS1apID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.RANUeNgapID != nil {
		{
			size, err := m.RANUeNgapID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CuUeF1apID != nil {
		{
			size, err := m.CuUeF1apID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DuUeF1apID != nil {
		{
			size, err := m.DuUeF1apID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DrbId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrbId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DrbId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DrbId != nil {
		{
			size := m.DrbId.Size()
			i -= size
			if _, err := m.DrbId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DrbId_FourGdrbId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DrbId_FourGdrbId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FourGdrbId != nil {
		{
			size, err := m.FourGdrbId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *DrbId_FiveGdrbId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DrbId_FiveGdrbId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FiveGdrbId != nil {
		{
			size, err := m.FiveGdrbId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *FiveGDrbId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FiveGDrbId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FiveGDrbId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FlowsMapToDrb) > 0 {
		for iNdEx := len(m.FlowsMapToDrb) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FlowsMapToDrb[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Qfi != nil {
		{
			size, err := m.Qfi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Value != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Qfi) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Qfi) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Qfi) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QoSflowLevelParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QoSflowLevelParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QoSflowLevelParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QosFlowLevelParameters != nil {
		{
			size := m.QosFlowLevelParameters.Size()
			i -= size
			if _, err := m.QosFlowLevelParameters.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *QoSflowLevelParameters_DynamicFiveQi) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QoSflowLevelParameters_DynamicFiveQi) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DynamicFiveQi != nil {
		{
			size, err := m.DynamicFiveQi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *QoSflowLevelParameters_NonDynamicFiveQi) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QoSflowLevelParameters_NonDynamicFiveQi) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NonDynamicFiveQi != nil {
		{
			size, err := m.NonDynamicFiveQi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DynamicFiveQi) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicFiveQi) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynamicFiveQi) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PacketErrorRate != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.PacketErrorRate))
		i--
		dAtA[i] = 0x18
	}
	if m.PacketDelayBudge != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.PacketDelayBudge))
		i--
		dAtA[i] = 0x10
	}
	if m.PriorityLevel != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.PriorityLevel))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NonDynamicFiveQi) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NonDynamicFiveQi) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NonDynamicFiveQi) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FiveQi != nil {
		{
			size, err := m.FiveQi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FiveQi) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FiveQi) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FiveQi) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FourGDrbId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FourGDrbId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FourGDrbId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Qci != nil {
		{
			size, err := m.Qci.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRan(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Value != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Qci) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Qci) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Qci) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RCReportStyle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RCReportStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RCReportStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRan(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KPMReportStyle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KPMReportStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KPMReportStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Measurements) > 0 {
		for iNdEx := len(m.Measurements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Measurements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Type != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRan(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MHOReportStyle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MHOReportStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MHOReportStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintRan(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRan(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KPMMeasurement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KPMMeasurement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KPMMeasurement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRan(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintRan(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRan(dAtA []byte, offset int, v uint64) int {
	offset -= sovRan(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lat != 0 {
		n += 9
	}
	if m.Lng != 0 {
		n += 9
	}
	if m.Ext != nil {
		n += m.Ext.Size()
	}
	return n
}

func (m *Location_Wgs84) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wgs84 != nil {
		l = m.Wgs84.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}
func (m *Location_Cartesian) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cartesian != nil {
		l = m.Cartesian.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}
func (m *Wgs84Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatitudeDeg != 0 {
		n += 9
	}
	if m.LongitudeDeg != 0 {
		n += 9
	}
	if m.AltitudeM != 0 {
		n += 9
	}
	return n
}

func (m *CartesianLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XM != 0 {
		n += 9
	}
	if m.YM != 0 {
		n += 9
	}
	if m.ZM != 0 {
		n += 9
	}
	return n
}

func (m *AzElOrientation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AzimuthDeg != 0 {
		n += 9
	}
	if m.ElevationDeg != 0 {
		n += 9
	}
	if m.RotationDeg != 0 {
		n += 9
	}
	return n
}

func (m *YprOrientation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.YawDeg != 0 {
		n += 9
	}
	if m.PitchDeg != 0 {
		n += 9
	}
	if m.RollDeg != 0 {
		n += 9
	}
	return n
}

func (m *Orientation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Orientation != nil {
		n += m.Orientation.Size()
	}
	return n
}

func (m *Orientation_Azel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Azel != nil {
		l = m.Azel.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}
func (m *Orientation_Ypr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ypr != nil {
		l = m.Ypr.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}
func (m *Waypoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}

func (m *Waypoints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Waypoint) > 0 {
		for _, e := range m.Waypoint {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *OrbitData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != nil {
		l = m.Epoch.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	if m.InclinationDeg != 0 {
		n += 9
	}
	if m.RaanDeg != 0 {
		n += 9
	}
	if m.E != 0 {
		n += 9
	}
	if m.ArgumentDeg != 0 {
		n += 9
	}
	if m.AnomalyDeg != 0 {
		n += 9
	}
	if m.MeanMotion != 0 {
		n += 9
	}
	return n
}

func (m *Motion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Motion != nil {
		n += m.Motion.Size()
	}
	return n
}

func (m *Motion_FixedLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FixedLocation != nil {
		l = m.FixedLocation.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}
func (m *Motion_Waypoints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Waypoints != nil {
		l = m.Waypoints.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}
func (m *Motion_Orbit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Orbit != nil {
		l = m.Orbit.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}
func (m *Coverage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovRan(uint64(m.Height))
	}
	if m.ArcWidth != 0 {
		n += 1 + sovRan(uint64(m.ArcWidth))
	}
	if m.Azimuth != 0 {
		n += 1 + sovRan(uint64(m.Azimuth))
	}
	if m.Tilt != 0 {
		n += 1 + sovRan(uint64(m.Tilt))
	}
	return n
}

func (m *E2Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ServiceModels) > 0 {
		for k, v := range m.ServiceModels {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRan(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRan(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRan(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *E2NodeConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Connections) > 0 {
		for _, e := range m.Connections {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	if m.Version != 0 {
		n += 1 + sovRan(uint64(m.Version))
	}
	return n
}

func (m *Lease) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Expiration != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Expiration)
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}

func (m *Interface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRan(uint64(m.Type))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovRan(uint64(m.Port))
	}
	return n
}

func (m *E2TInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *XAppInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	if len(m.A1PolicyTypes) > 0 {
		for _, e := range m.A1PolicyTypes {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *A1PolicyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.A1PolicyTypeId)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	l = len(m.A1TypeName)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	l = len(m.A1TypeVersion)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	l = len(m.A1TypeDescription)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}

func (m *A1TInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *CellGlobalID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRan(uint64(m.Type))
	}
	return n
}

func (m *NeighborCellID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CellGlobalID != nil {
		l = m.CellGlobalID.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	l = len(m.PlmnID)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}

func (m *E2Cell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CellObjectID)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if m.CellGlobalID != nil {
		l = m.CellGlobalID.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	if m.AntennaCount != 0 {
		n += 1 + sovRan(uint64(m.AntennaCount))
	}
	if m.EARFCN != 0 {
		n += 1 + sovRan(uint64(m.EARFCN))
	}
	l = len(m.CellType)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if m.PCI != 0 {
		n += 1 + sovRan(uint64(m.PCI))
	}
	if len(m.KpiReports) > 0 {
		for k, v := range m.KpiReports {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRan(uint64(len(k))) + 1 + sovRan(uint64(v))
			n += mapEntrySize + 1 + sovRan(uint64(mapEntrySize))
		}
	}
	if len(m.NeighborCellIDs) > 0 {
		for _, e := range m.NeighborCellIDs {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *ServiceModelInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OID)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if len(m.RanFunctions) > 0 {
		for _, e := range m.RanFunctions {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	if len(m.RanFunctionIDs) > 0 {
		l = 0
		for _, e := range m.RanFunctionIDs {
			l += sovRan(uint64(e))
		}
		n += 1 + sovRan(uint64(l)) + l
	}
	return n
}

func (m *RCRanFunction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if len(m.ReportStyles) > 0 {
		for _, e := range m.ReportStyles {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *MHORanFunction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if len(m.ReportStyles) > 0 {
		for _, e := range m.ReportStyles {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *KPMRanFunction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if len(m.ReportStyles) > 0 {
		for _, e := range m.ReportStyles {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *RSMRanFunction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if len(m.RicSlicingNodeCapabilityList) > 0 {
		for _, e := range m.RicSlicingNodeCapabilityList {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *RSMNodeSlicingCapabilityItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxNumberOfSlicesDl != 0 {
		n += 1 + sovRan(uint64(m.MaxNumberOfSlicesDl))
	}
	if m.MaxNumberOfSlicesUl != 0 {
		n += 1 + sovRan(uint64(m.MaxNumberOfSlicesUl))
	}
	if m.SlicingType != 0 {
		n += 1 + sovRan(uint64(m.SlicingType))
	}
	if m.MaxNumberOfUesPerSlice != 0 {
		n += 1 + sovRan(uint64(m.MaxNumberOfUesPerSlice))
	}
	if len(m.SupportedConfig) > 0 {
		for _, e := range m.SupportedConfig {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *RSMSupportedSlicingConfigItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlicingConfigType != 0 {
		n += 1 + sovRan(uint64(m.SlicingConfigType))
	}
	return n
}

func (m *RSMSliceItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RsmSliceList) > 0 {
		for _, e := range m.RsmSliceList {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *RSMSlicingItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	l = len(m.SliceDesc)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if m.SliceParameters != nil {
		l = m.SliceParameters.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	if m.SliceType != 0 {
		n += 1 + sovRan(uint64(m.SliceType))
	}
	if len(m.UeIdList) > 0 {
		for _, e := range m.UeIdList {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *RSMSliceParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchedulerType != 0 {
		n += 1 + sovRan(uint64(m.SchedulerType))
	}
	if m.Weight != 0 {
		n += 1 + sovRan(uint64(m.Weight))
	}
	if m.QosLevel != 0 {
		n += 1 + sovRan(uint64(m.QosLevel))
	}
	return n
}

func (m *DuUeF1ApID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovRan(uint64(m.Value))
	}
	return n
}

func (m *CuUeF1ApID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovRan(uint64(m.Value))
	}
	return n
}

func (m *RanUeNgapID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovRan(uint64(m.Value))
	}
	return n
}

func (m *EnbUeS1ApID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovRan(uint64(m.Value))
	}
	return n
}

func (m *AmfUeNgapID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovRan(uint64(m.Value))
	}
	return n
}

func (m *UeIdentity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DuUeF1apID != nil {
		l = m.DuUeF1apID.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	if m.CuUeF1apID != nil {
		l = m.CuUeF1apID.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	if m.RANUeNgapID != nil {
		l = m.RANUeNgapID.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	if m.EnbUeS1apID != nil {
		l = m.EnbUeS1apID.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	if m.AMFUeNgapID != nil {
		l = m.AMFUeNgapID.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	if m.PreferredIDType != 0 {
		n += 1 + sovRan(uint64(m.PreferredIDType))
	}
	if m.DrbId != nil {
		l = m.DrbId.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}

func (m *DrbId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DrbId != nil {
		n += m.DrbId.Size()
	}
	return n
}

func (m *DrbId_FourGdrbId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FourGdrbId != nil {
		l = m.FourGdrbId.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}
func (m *DrbId_FiveGdrbId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FiveGdrbId != nil {
		l = m.FiveGdrbId.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}
func (m *FiveGDrbId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovRan(uint64(m.Value))
	}
	if m.Qfi != nil {
		l = m.Qfi.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	if len(m.FlowsMapToDrb) > 0 {
		for _, e := range m.FlowsMapToDrb {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *Qfi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovRan(uint64(m.Value))
	}
	return n
}

func (m *QoSflowLevelParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QosFlowLevelParameters != nil {
		n += m.QosFlowLevelParameters.Size()
	}
	return n
}

func (m *QoSflowLevelParameters_DynamicFiveQi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DynamicFiveQi != nil {
		l = m.DynamicFiveQi.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}
func (m *QoSflowLevelParameters_NonDynamicFiveQi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NonDynamicFiveQi != nil {
		l = m.NonDynamicFiveQi.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}
func (m *DynamicFiveQi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PriorityLevel != 0 {
		n += 1 + sovRan(uint64(m.PriorityLevel))
	}
	if m.PacketDelayBudge != 0 {
		n += 1 + sovRan(uint64(m.PacketDelayBudge))
	}
	if m.PacketErrorRate != 0 {
		n += 1 + sovRan(uint64(m.PacketErrorRate))
	}
	return n
}

func (m *NonDynamicFiveQi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FiveQi != nil {
		l = m.FiveQi.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}

func (m *FiveQi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovRan(uint64(m.Value))
	}
	return n
}

func (m *FourGDrbId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovRan(uint64(m.Value))
	}
	if m.Qci != nil {
		l = m.Qci.Size()
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}

func (m *Qci) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovRan(uint64(m.Value))
	}
	return n
}

func (m *RCReportStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRan(uint64(m.Type))
	}
	return n
}

func (m *KPMReportStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRan(uint64(m.Type))
	}
	if len(m.Measurements) > 0 {
		for _, e := range m.Measurements {
			l = e.Size()
			n += 1 + l + sovRan(uint64(l))
		}
	}
	return n
}

func (m *MHOReportStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRan(uint64(m.Type))
	}
	return n
}

func (m *KPMMeasurement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRan(uint64(l))
	}
	return n
}

func sovRan(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRan(x uint64) (n int) {
	return sovRan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lng = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wgs84", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Wgs84Location{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ext = &Location_Wgs84{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cartesian", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CartesianLocation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ext = &Location_Cartesian{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Wgs84Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wgs84Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wgs84Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatitudeDeg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LatitudeDeg = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongitudeDeg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LongitudeDeg = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AltitudeM", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AltitudeM = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CartesianLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CartesianLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CartesianLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field XM", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.XM = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field YM", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.YM = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZM", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ZM = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzElOrientation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzElOrientation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzElOrientation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzimuthDeg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AzimuthDeg = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElevationDeg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ElevationDeg = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RotationDeg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RotationDeg = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YprOrientation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YprOrientation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YprOrientation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field YawDeg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.YawDeg = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PitchDeg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PitchDeg = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollDeg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RollDeg = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Orientation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Orientation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Orientation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AzElOrientation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Orientation = &Orientation_Azel{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ypr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &YprOrientation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Orientation = &Orientation_Ypr{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Waypoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Waypoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Waypoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &types.Timestamp{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Waypoints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Waypoints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Waypoints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waypoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Waypoint = append(m.Waypoint, &Waypoint{})
			if err := m.Waypoint[len(m.Waypoint)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrbitData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrbitData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrbitData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Epoch == nil {
				m.Epoch = &types.Timestamp{}
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field InclinationDeg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.InclinationDeg = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaanDeg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RaanDeg = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.E = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArgumentDeg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ArgumentDeg = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnomalyDeg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AnomalyDeg = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeanMotion", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MeanMotion = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Motion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Motion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Motion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Location{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Motion = &Motion_FixedLocation{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waypoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Waypoints{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Motion = &Motion_Waypoints{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orbit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OrbitData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Motion = &Motion_Orbit{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Coverage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coverage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coverage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcWidth", wireType)
			}
			m.ArcWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArcWidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azimuth", wireType)
			}
			m.Azimuth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Azimuth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tilt", wireType)
			}
			m.Tilt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tilt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceModels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceModels == nil {
				m.ServiceModels = make(map[string]*ServiceModelInfo)
			}
			var mapkey string
			var mapvalue *ServiceModelInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRan
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRan
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRan
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRan
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ServiceModelInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRan(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRan
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ServiceModels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2NodeConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2NodeConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2NodeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Connections = append(m.Connections, Interface{})
			if err := m.Connections[len(m.Connections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Lease) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lease: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lease: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiration == nil {
				m.Expiration = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Expiration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Interface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Interface_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2TInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2TInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2TInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, &Interface{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XAppInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XAppInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XAppInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, &Interface{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A1PolicyTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A1PolicyTypes = append(m.A1PolicyTypes, &A1PolicyType{})
			if err := m.A1PolicyTypes[len(m.A1PolicyTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *A1PolicyType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: A1PolicyType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: A1PolicyType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A1PolicyTypeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A1PolicyTypeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A1TypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A1TypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A1TypeVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A1TypeVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A1TypeDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A1TypeDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *A1TInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: A1TInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: A1TInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, &Interface{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellGlobalID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellGlobalID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellGlobalID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CellGlobalIDType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NeighborCellID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NeighborCellID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NeighborCellID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellGlobalID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CellGlobalID == nil {
				m.CellGlobalID = &CellGlobalID{}
			}
			if err := m.CellGlobalID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlmnID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlmnID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *E2Cell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: E2Cell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: E2Cell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellObjectID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellObjectID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellGlobalID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CellGlobalID == nil {
				m.CellGlobalID = &CellGlobalID{}
			}
			if err := m.CellGlobalID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntennaCount", wireType)
			}
			m.AntennaCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AntennaCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EARFCN", wireType)
			}
			m.EARFCN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EARFCN |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PCI", wireType)
			}
			m.PCI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PCI |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KpiReports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KpiReports == nil {
				m.KpiReports = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRan
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRan
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRan(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRan
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.KpiReports[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeighborCellIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NeighborCellIDs = append(m.NeighborCellIDs, &NeighborCellID{})
			if err := m.NeighborCellIDs[len(m.NeighborCellIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceModelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceModelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceModelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RanFunctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RanFunctions = append(m.RanFunctions, &types.Any{})
			if err := m.RanFunctions[len(m.RanFunctions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RanFunctionIDs = append(m.RanFunctionIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRan
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRan
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RanFunctionIDs) == 0 {
					m.RanFunctionIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RanFunctionIDs = append(m.RanFunctionIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RanFunctionIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RCRanFunction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RCRanFunction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RCRanFunction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportStyles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportStyles = append(m.ReportStyles, &RCReportStyle{})
			if err := m.ReportStyles[len(m.ReportStyles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MHORanFunction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MHORanFunction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MHORanFunction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportStyles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportStyles = append(m.ReportStyles, &MHOReportStyle{})
			if err := m.ReportStyles[len(m.ReportStyles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KPMRanFunction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KPMRanFunction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KPMRanFunction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportStyles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportStyles = append(m.ReportStyles, &KPMReportStyle{})
			if err := m.ReportStyles[len(m.ReportStyles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RSMRanFunction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RSMRanFunction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RSMRanFunction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RicSlicingNodeCapabilityList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RicSlicingNodeCapabilityList = append(m.RicSlicingNodeCapabilityList, &RSMNodeSlicingCapabilityItem{})
			if err := m.RicSlicingNodeCapabilityList[len(m.RicSlicingNodeCapabilityList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RSMNodeSlicingCapabilityItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RSMNodeSlicingCapabilityItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RSMNodeSlicingCapabilityItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumberOfSlicesDl", wireType)
			}
			m.MaxNumberOfSlicesDl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumberOfSlicesDl |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumberOfSlicesUl", wireType)
			}
			m.MaxNumberOfSlicesUl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumberOfSlicesUl |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlicingType", wireType)
			}
			m.SlicingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlicingType |= RSMSlicingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumberOfUesPerSlice", wireType)
			}
			m.MaxNumberOfUesPerSlice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumberOfUesPerSlice |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedConfig = append(m.SupportedConfig, &RSMSupportedSlicingConfigItem{})
			if err := m.SupportedConfig[len(m.SupportedConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RSMSupportedSlicingConfigItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RSMSupportedSlicingConfigItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RSMSupportedSlicingConfigItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlicingConfigType", wireType)
			}
			m.SlicingConfigType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlicingConfigType |= E2SmRsmCommand(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RSMSliceItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RSMSliceItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RSMSliceItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsmSliceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RsmSliceList = append(m.RsmSliceList, &RSMSlicingItem{})
			if err := m.RsmSliceList[len(m.RsmSliceList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RSMSlicingItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RSMSlicingItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RSMSlicingItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SliceParameters == nil {
				m.SliceParameters = &RSMSliceParameters{}
			}
			if err := m.SliceParameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceType", wireType)
			}
			m.SliceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SliceType |= RSMSliceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UeIdList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UeIdList = append(m.UeIdList, &UeIdentity{})
			if err := m.UeIdList[len(m.UeIdList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RSMSliceParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RSMSliceParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RSMSliceParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerType", wireType)
			}
			m.SchedulerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchedulerType |= RSMSchedulerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QosLevel", wireType)
			}
			m.QosLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QosLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DuUeF1ApID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DuUeF1apID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DuUeF1apID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CuUeF1ApID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CuUeF1apID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CuUeF1apID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RanUeNgapID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RanUeNgapID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RanUeNgapID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnbUeS1ApID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnbUeS1apID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnbUeS1apID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AmfUeNgapID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AmfUeNgapID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AmfUeNgapID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UeIdentity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UeIdentity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UeIdentity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DuUeF1apID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DuUeF1apID == nil {
				m.DuUeF1apID = &DuUeF1ApID{}
			}
			if err := m.DuUeF1apID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CuUeF1apID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CuUeF1apID == nil {
				m.CuUeF1apID = &CuUeF1ApID{}
			}
			if err := m.CuUeF1apID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RANUeNgapID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RANUeNgapID == nil {
				m.RANUeNgapID = &RanUeNgapID{}
			}
			if err := m.RANUeNgapID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnbUeS1apID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnbUeS1apID == nil {
				m.EnbUeS1apID = &EnbUeS1ApID{}
			}
			if err := m.EnbUeS1apID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AMFUeNgapID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AMFUeNgapID == nil {
				m.AMFUeNgapID = &AmfUeNgapID{}
			}
			if err := m.AMFUeNgapID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredIDType", wireType)
			}
			m.PreferredIDType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreferredIDType |= UeIdType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrbId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DrbId == nil {
				m.DrbId = &DrbId{}
			}
			if err := m.DrbId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DrbId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrbId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrbId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FourGdrbId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FourGDrbId{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DrbId = &DrbId_FourGdrbId{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FiveGdrbId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FiveGDrbId{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DrbId = &DrbId_FiveGdrbId{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FiveGDrbId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FiveGDrbId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FiveGDrbId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qfi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Qfi == nil {
				m.Qfi = &Qfi{}
			}
			if err := m.Qfi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowsMapToDrb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowsMapToDrb = append(m.FlowsMapToDrb, &QoSflowLevelParameters{})
			if err := m.FlowsMapToDrb[len(m.FlowsMapToDrb)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Qfi) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Qfi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Qfi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QoSflowLevelParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QoSflowLevelParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QoSflowLevelParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicFiveQi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DynamicFiveQi{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.QosFlowLevelParameters = &QoSflowLevelParameters_DynamicFiveQi{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonDynamicFiveQi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NonDynamicFiveQi{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.QosFlowLevelParameters = &QoSflowLevelParameters_NonDynamicFiveQi{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicFiveQi) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicFiveQi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicFiveQi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityLevel", wireType)
			}
			m.PriorityLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriorityLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketDelayBudge", wireType)
			}
			m.PacketDelayBudge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketDelayBudge |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketErrorRate", wireType)
			}
			m.PacketErrorRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketErrorRate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NonDynamicFiveQi) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NonDynamicFiveQi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NonDynamicFiveQi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FiveQi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FiveQi == nil {
				m.FiveQi = &FiveQi{}
			}
			if err := m.FiveQi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FiveQi) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FiveQi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FiveQi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FourGDrbId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FourGDrbId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FourGDrbId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qci", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Qci == nil {
				m.Qci = &Qci{}
			}
			if err := m.Qci.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Qci) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Qci: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Qci: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RCReportStyle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RCReportStyle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RCReportStyle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KPMReportStyle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KPMReportStyle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KPMReportStyle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Measurements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Measurements = append(m.Measurements, &KPMMeasurement{})
			if err := m.Measurements[len(m.Measurements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MHOReportStyle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MHOReportStyle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MHOReportStyle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KPMMeasurement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KPMMeasurement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KPMMeasurement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRan
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRan
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRan
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRan        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRan          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRan = fmt.Errorf("proto: unexpected end of group")
)
