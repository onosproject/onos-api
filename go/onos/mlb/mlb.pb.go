// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/mlb/mlb.proto

package mlb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetMlbParamRequest struct {
}

func (m *GetMlbParamRequest) Reset()         { *m = GetMlbParamRequest{} }
func (m *GetMlbParamRequest) String() string { return proto.CompactTextString(m) }
func (*GetMlbParamRequest) ProtoMessage()    {}
func (*GetMlbParamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57063becf4251579, []int{0}
}
func (m *GetMlbParamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMlbParamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMlbParamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMlbParamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMlbParamRequest.Merge(m, src)
}
func (m *GetMlbParamRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMlbParamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMlbParamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMlbParamRequest proto.InternalMessageInfo

type GetMlbParamResponse struct {
	Interval          int32 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	OverloadThreshold int32 `protobuf:"varint,2,opt,name=overload_threshold,json=overloadThreshold,proto3" json:"overload_threshold,omitempty"`
	TargetThreshold   int32 `protobuf:"varint,3,opt,name=target_threshold,json=targetThreshold,proto3" json:"target_threshold,omitempty"`
	DeltaOcn          int32 `protobuf:"varint,4,opt,name=delta_ocn,json=deltaOcn,proto3" json:"delta_ocn,omitempty"`
}

func (m *GetMlbParamResponse) Reset()         { *m = GetMlbParamResponse{} }
func (m *GetMlbParamResponse) String() string { return proto.CompactTextString(m) }
func (*GetMlbParamResponse) ProtoMessage()    {}
func (*GetMlbParamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57063becf4251579, []int{1}
}
func (m *GetMlbParamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMlbParamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMlbParamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMlbParamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMlbParamResponse.Merge(m, src)
}
func (m *GetMlbParamResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMlbParamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMlbParamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMlbParamResponse proto.InternalMessageInfo

func (m *GetMlbParamResponse) GetInterval() int32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *GetMlbParamResponse) GetOverloadThreshold() int32 {
	if m != nil {
		return m.OverloadThreshold
	}
	return 0
}

func (m *GetMlbParamResponse) GetTargetThreshold() int32 {
	if m != nil {
		return m.TargetThreshold
	}
	return 0
}

func (m *GetMlbParamResponse) GetDeltaOcn() int32 {
	if m != nil {
		return m.DeltaOcn
	}
	return 0
}

type SetMlbParamRequest struct {
	Interval          int32 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	OverloadThreshold int32 `protobuf:"varint,2,opt,name=overload_threshold,json=overloadThreshold,proto3" json:"overload_threshold,omitempty"`
	TargetThreshold   int32 `protobuf:"varint,3,opt,name=target_threshold,json=targetThreshold,proto3" json:"target_threshold,omitempty"`
	DeltaOcn          int32 `protobuf:"varint,4,opt,name=delta_ocn,json=deltaOcn,proto3" json:"delta_ocn,omitempty"`
}

func (m *SetMlbParamRequest) Reset()         { *m = SetMlbParamRequest{} }
func (m *SetMlbParamRequest) String() string { return proto.CompactTextString(m) }
func (*SetMlbParamRequest) ProtoMessage()    {}
func (*SetMlbParamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57063becf4251579, []int{2}
}
func (m *SetMlbParamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetMlbParamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetMlbParamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetMlbParamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMlbParamRequest.Merge(m, src)
}
func (m *SetMlbParamRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetMlbParamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMlbParamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetMlbParamRequest proto.InternalMessageInfo

func (m *SetMlbParamRequest) GetInterval() int32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *SetMlbParamRequest) GetOverloadThreshold() int32 {
	if m != nil {
		return m.OverloadThreshold
	}
	return 0
}

func (m *SetMlbParamRequest) GetTargetThreshold() int32 {
	if m != nil {
		return m.TargetThreshold
	}
	return 0
}

func (m *SetMlbParamRequest) GetDeltaOcn() int32 {
	if m != nil {
		return m.DeltaOcn
	}
	return 0
}

type SetMlbParamResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *SetMlbParamResponse) Reset()         { *m = SetMlbParamResponse{} }
func (m *SetMlbParamResponse) String() string { return proto.CompactTextString(m) }
func (*SetMlbParamResponse) ProtoMessage()    {}
func (*SetMlbParamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57063becf4251579, []int{3}
}
func (m *SetMlbParamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetMlbParamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetMlbParamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetMlbParamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMlbParamResponse.Merge(m, src)
}
func (m *SetMlbParamResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetMlbParamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMlbParamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetMlbParamResponse proto.InternalMessageInfo

func (m *SetMlbParamResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type GetOcnRequest struct {
}

func (m *GetOcnRequest) Reset()         { *m = GetOcnRequest{} }
func (m *GetOcnRequest) String() string { return proto.CompactTextString(m) }
func (*GetOcnRequest) ProtoMessage()    {}
func (*GetOcnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_57063becf4251579, []int{4}
}
func (m *GetOcnRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOcnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOcnRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOcnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOcnRequest.Merge(m, src)
}
func (m *GetOcnRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOcnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOcnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOcnRequest proto.InternalMessageInfo

type GetOcnResponse struct {
	OcnMap map[string]*OcnRecord `protobuf:"bytes,1,rep,name=ocn_map,json=ocnMap,proto3" json:"ocn_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GetOcnResponse) Reset()         { *m = GetOcnResponse{} }
func (m *GetOcnResponse) String() string { return proto.CompactTextString(m) }
func (*GetOcnResponse) ProtoMessage()    {}
func (*GetOcnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57063becf4251579, []int{5}
}
func (m *GetOcnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOcnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOcnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOcnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOcnResponse.Merge(m, src)
}
func (m *GetOcnResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOcnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOcnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOcnResponse proto.InternalMessageInfo

func (m *GetOcnResponse) GetOcnMap() map[string]*OcnRecord {
	if m != nil {
		return m.OcnMap
	}
	return nil
}

type OcnRecord struct {
	OcnRecord map[string]int32 `protobuf:"bytes,1,rep,name=ocn_record,json=ocnRecord,proto3" json:"ocn_record,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *OcnRecord) Reset()         { *m = OcnRecord{} }
func (m *OcnRecord) String() string { return proto.CompactTextString(m) }
func (*OcnRecord) ProtoMessage()    {}
func (*OcnRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_57063becf4251579, []int{6}
}
func (m *OcnRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OcnRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OcnRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OcnRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OcnRecord.Merge(m, src)
}
func (m *OcnRecord) XXX_Size() int {
	return m.Size()
}
func (m *OcnRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_OcnRecord.DiscardUnknown(m)
}

var xxx_messageInfo_OcnRecord proto.InternalMessageInfo

func (m *OcnRecord) GetOcnRecord() map[string]int32 {
	if m != nil {
		return m.OcnRecord
	}
	return nil
}

type OcnIDs struct {
}

func (m *OcnIDs) Reset()         { *m = OcnIDs{} }
func (m *OcnIDs) String() string { return proto.CompactTextString(m) }
func (*OcnIDs) ProtoMessage()    {}
func (*OcnIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_57063becf4251579, []int{7}
}
func (m *OcnIDs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OcnIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OcnIDs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OcnIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OcnIDs.Merge(m, src)
}
func (m *OcnIDs) XXX_Size() int {
	return m.Size()
}
func (m *OcnIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_OcnIDs.DiscardUnknown(m)
}

var xxx_messageInfo_OcnIDs proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetMlbParamRequest)(nil), "onos.mlb.GetMlbParamRequest")
	proto.RegisterType((*GetMlbParamResponse)(nil), "onos.mlb.GetMlbParamResponse")
	proto.RegisterType((*SetMlbParamRequest)(nil), "onos.mlb.SetMlbParamRequest")
	proto.RegisterType((*SetMlbParamResponse)(nil), "onos.mlb.SetMlbParamResponse")
	proto.RegisterType((*GetOcnRequest)(nil), "onos.mlb.GetOcnRequest")
	proto.RegisterType((*GetOcnResponse)(nil), "onos.mlb.GetOcnResponse")
	proto.RegisterMapType((map[string]*OcnRecord)(nil), "onos.mlb.GetOcnResponse.OcnMapEntry")
	proto.RegisterType((*OcnRecord)(nil), "onos.mlb.OcnRecord")
	proto.RegisterMapType((map[string]int32)(nil), "onos.mlb.OcnRecord.OcnRecordEntry")
	proto.RegisterType((*OcnIDs)(nil), "onos.mlb.OcnIDs")
}

func init() { proto.RegisterFile("onos/mlb/mlb.proto", fileDescriptor_57063becf4251579) }

var fileDescriptor_57063becf4251579 = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0x36, 0x24, 0x4d, 0x26, 0xa5, 0x2d, 0x9b, 0x4a, 0x58, 0x01, 0xac, 0xca, 0xe2, 0xd0,
	0x1e, 0x70, 0xa5, 0x70, 0x41, 0x7c, 0x1c, 0x40, 0xa0, 0x0a, 0x55, 0xc1, 0xc8, 0xe6, 0x1e, 0xad,
	0xd7, 0x2b, 0x8a, 0x58, 0xef, 0x9a, 0xdd, 0x4d, 0xa4, 0xfe, 0x07, 0x0e, 0xfc, 0x03, 0x8e, 0xf0,
	0x53, 0x38, 0xf6, 0xc8, 0x81, 0x03, 0x4a, 0xfe, 0x08, 0xf2, 0x3a, 0x6e, 0x6c, 0xea, 0x70, 0xe6,
	0x60, 0x69, 0xe7, 0xcd, 0xf3, 0xf3, 0xf3, 0xbc, 0x59, 0xc0, 0x52, 0x48, 0x7d, 0x92, 0xf2, 0x38,
	0x7f, 0xfc, 0x4c, 0x49, 0x23, 0x71, 0x2f, 0xc7, 0xfc, 0x94, 0xc7, 0xde, 0x01, 0xe0, 0x53, 0x66,
	0x26, 0x3c, 0x7e, 0x4b, 0x14, 0x49, 0x43, 0xf6, 0x69, 0xc6, 0xb4, 0xf1, 0xbe, 0x23, 0x18, 0xd6,
	0x60, 0x9d, 0x49, 0xa1, 0x19, 0x1e, 0x41, 0xef, 0x83, 0x30, 0x4c, 0xcd, 0x09, 0x77, 0xd0, 0x21,
	0x3a, 0xea, 0x84, 0x57, 0x35, 0x7e, 0x00, 0x58, 0xce, 0x99, 0xe2, 0x92, 0x24, 0x53, 0x73, 0xae,
	0x98, 0x3e, 0x97, 0x3c, 0x71, 0xb6, 0x2c, 0xeb, 0x56, 0xd9, 0x79, 0x57, 0x36, 0xf0, 0x31, 0xec,
	0x1b, 0xa2, 0xde, 0x33, 0x53, 0x21, 0xb7, 0x2d, 0x79, 0xaf, 0xc0, 0xd7, 0xd4, 0x3b, 0xd0, 0x4f,
	0x18, 0x37, 0x64, 0x2a, 0xa9, 0x70, 0x6e, 0x14, 0x9f, 0xb5, 0x40, 0x40, 0x85, 0xf7, 0x0d, 0x01,
	0x8e, 0xae, 0xfd, 0xc1, 0xff, 0xe8, 0xf4, 0x04, 0x86, 0x51, 0xc3, 0x4c, 0x1d, 0xd8, 0xd6, 0x33,
	0x4a, 0x99, 0xd6, 0xd6, 0x68, 0x2f, 0x2c, 0x4b, 0x6f, 0x0f, 0x6e, 0x9e, 0x32, 0x13, 0x50, 0x51,
	0xc6, 0xf2, 0x15, 0xc1, 0x6e, 0x89, 0xac, 0xde, 0x7e, 0x06, 0xdb, 0x92, 0x8a, 0x69, 0x4a, 0x32,
	0x07, 0x1d, 0xb6, 0x8f, 0x06, 0xe3, 0xfb, 0x7e, 0x99, 0xad, 0x5f, 0xa7, 0xfa, 0x01, 0x15, 0x13,
	0x92, 0xbd, 0x12, 0x46, 0x5d, 0x84, 0x5d, 0x69, 0x8b, 0xd1, 0x1b, 0x18, 0x54, 0x60, 0xbc, 0x0f,
	0xed, 0x8f, 0xec, 0xc2, 0xfa, 0xe8, 0x87, 0xf9, 0x11, 0x1f, 0x43, 0x67, 0x4e, 0xf8, 0x8c, 0xd9,
	0xf1, 0x0c, 0xc6, 0xc3, 0xb5, 0xba, 0x95, 0xa6, 0x52, 0x25, 0x61, 0xc1, 0x78, 0xbc, 0xf5, 0x08,
	0x79, 0x9f, 0x11, 0xf4, 0xaf, 0x1a, 0xf8, 0x39, 0x40, 0x6e, 0x4e, 0xd9, 0x6a, 0xe5, 0xcf, 0x6b,
	0x50, 0x58, 0x9f, 0x0a, 0x77, 0x7d, 0x59, 0xd6, 0xa3, 0xa7, 0xb0, 0x5b, 0x6f, 0x36, 0x78, 0x3c,
	0xa8, 0x7a, 0xec, 0x54, 0xed, 0xf4, 0xa0, 0x1b, 0x50, 0xf1, 0xfa, 0xa5, 0x1e, 0xff, 0x42, 0xd0,
	0x9e, 0xf0, 0x18, 0x9f, 0xc1, 0x4e, 0x65, 0xb1, 0x35, 0xbe, 0x5b, 0x1b, 0xd7, 0x5f, 0x5b, 0x34,
	0xba, 0xb7, 0xa1, 0xbb, 0x1a, 0xfe, 0x19, 0xec, 0x44, 0x1b, 0xc4, 0xa2, 0x7f, 0x8a, 0x35, 0xed,
	0xc1, 0x13, 0xe8, 0x16, 0x81, 0xe1, 0xdb, 0xd7, 0x23, 0x2c, 0x14, 0x9c, 0x4d, 0xd9, 0xbe, 0x70,
	0x7e, 0x2c, 0x5c, 0x74, 0xb9, 0x70, 0xd1, 0xef, 0x85, 0x8b, 0xbe, 0x2c, 0xdd, 0xd6, 0xe5, 0xd2,
	0x6d, 0xfd, 0x5c, 0xba, 0xad, 0xb8, 0x6b, 0x6f, 0xfc, 0xc3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x3e, 0xb3, 0x8f, 0x54, 0x07, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MlbClient is the client API for Mlb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MlbClient interface {
	// GetMlbParams gets MLB parameters
	GetMlbParams(ctx context.Context, in *GetMlbParamRequest, opts ...grpc.CallOption) (*GetMlbParamResponse, error)
	// SetMlbParams sets MLB parameters
	SetMlbParams(ctx context.Context, in *SetMlbParamRequest, opts ...grpc.CallOption) (*SetMlbParamResponse, error)
	// GetOcn gets Ocn map
	GetOcn(ctx context.Context, in *GetOcnRequest, opts ...grpc.CallOption) (*GetOcnResponse, error)
}

type mlbClient struct {
	cc *grpc.ClientConn
}

func NewMlbClient(cc *grpc.ClientConn) MlbClient {
	return &mlbClient{cc}
}

func (c *mlbClient) GetMlbParams(ctx context.Context, in *GetMlbParamRequest, opts ...grpc.CallOption) (*GetMlbParamResponse, error) {
	out := new(GetMlbParamResponse)
	err := c.cc.Invoke(ctx, "/onos.mlb.Mlb/GetMlbParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlbClient) SetMlbParams(ctx context.Context, in *SetMlbParamRequest, opts ...grpc.CallOption) (*SetMlbParamResponse, error) {
	out := new(SetMlbParamResponse)
	err := c.cc.Invoke(ctx, "/onos.mlb.Mlb/SetMlbParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlbClient) GetOcn(ctx context.Context, in *GetOcnRequest, opts ...grpc.CallOption) (*GetOcnResponse, error) {
	out := new(GetOcnResponse)
	err := c.cc.Invoke(ctx, "/onos.mlb.Mlb/GetOcn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MlbServer is the server API for Mlb service.
type MlbServer interface {
	// GetMlbParams gets MLB parameters
	GetMlbParams(context.Context, *GetMlbParamRequest) (*GetMlbParamResponse, error)
	// SetMlbParams sets MLB parameters
	SetMlbParams(context.Context, *SetMlbParamRequest) (*SetMlbParamResponse, error)
	// GetOcn gets Ocn map
	GetOcn(context.Context, *GetOcnRequest) (*GetOcnResponse, error)
}

// UnimplementedMlbServer can be embedded to have forward compatible implementations.
type UnimplementedMlbServer struct {
}

func (*UnimplementedMlbServer) GetMlbParams(ctx context.Context, req *GetMlbParamRequest) (*GetMlbParamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMlbParams not implemented")
}
func (*UnimplementedMlbServer) SetMlbParams(ctx context.Context, req *SetMlbParamRequest) (*SetMlbParamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMlbParams not implemented")
}
func (*UnimplementedMlbServer) GetOcn(ctx context.Context, req *GetOcnRequest) (*GetOcnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOcn not implemented")
}

func RegisterMlbServer(s *grpc.Server, srv MlbServer) {
	s.RegisterService(&_Mlb_serviceDesc, srv)
}

func _Mlb_GetMlbParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMlbParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlbServer).GetMlbParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.mlb.Mlb/GetMlbParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlbServer).GetMlbParams(ctx, req.(*GetMlbParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mlb_SetMlbParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMlbParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlbServer).SetMlbParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.mlb.Mlb/SetMlbParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlbServer).SetMlbParams(ctx, req.(*SetMlbParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mlb_GetOcn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOcnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlbServer).GetOcn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.mlb.Mlb/GetOcn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlbServer).GetOcn(ctx, req.(*GetOcnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mlb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.mlb.Mlb",
	HandlerType: (*MlbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMlbParams",
			Handler:    _Mlb_GetMlbParams_Handler,
		},
		{
			MethodName: "SetMlbParams",
			Handler:    _Mlb_SetMlbParams_Handler,
		},
		{
			MethodName: "GetOcn",
			Handler:    _Mlb_GetOcn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onos/mlb/mlb.proto",
}

func (m *GetMlbParamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMlbParamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMlbParamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetMlbParamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMlbParamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMlbParamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeltaOcn != 0 {
		i = encodeVarintMlb(dAtA, i, uint64(m.DeltaOcn))
		i--
		dAtA[i] = 0x20
	}
	if m.TargetThreshold != 0 {
		i = encodeVarintMlb(dAtA, i, uint64(m.TargetThreshold))
		i--
		dAtA[i] = 0x18
	}
	if m.OverloadThreshold != 0 {
		i = encodeVarintMlb(dAtA, i, uint64(m.OverloadThreshold))
		i--
		dAtA[i] = 0x10
	}
	if m.Interval != 0 {
		i = encodeVarintMlb(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetMlbParamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetMlbParamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetMlbParamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeltaOcn != 0 {
		i = encodeVarintMlb(dAtA, i, uint64(m.DeltaOcn))
		i--
		dAtA[i] = 0x20
	}
	if m.TargetThreshold != 0 {
		i = encodeVarintMlb(dAtA, i, uint64(m.TargetThreshold))
		i--
		dAtA[i] = 0x18
	}
	if m.OverloadThreshold != 0 {
		i = encodeVarintMlb(dAtA, i, uint64(m.OverloadThreshold))
		i--
		dAtA[i] = 0x10
	}
	if m.Interval != 0 {
		i = encodeVarintMlb(dAtA, i, uint64(m.Interval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetMlbParamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetMlbParamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetMlbParamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetOcnRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOcnRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOcnRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetOcnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOcnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOcnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OcnMap) > 0 {
		for k := range m.OcnMap {
			v := m.OcnMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMlb(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMlb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMlb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OcnRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OcnRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OcnRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OcnRecord) > 0 {
		for k := range m.OcnRecord {
			v := m.OcnRecord[k]
			baseI := i
			i = encodeVarintMlb(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMlb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMlb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OcnIDs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OcnIDs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OcnIDs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMlb(dAtA []byte, offset int, v uint64) int {
	offset -= sovMlb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetMlbParamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetMlbParamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interval != 0 {
		n += 1 + sovMlb(uint64(m.Interval))
	}
	if m.OverloadThreshold != 0 {
		n += 1 + sovMlb(uint64(m.OverloadThreshold))
	}
	if m.TargetThreshold != 0 {
		n += 1 + sovMlb(uint64(m.TargetThreshold))
	}
	if m.DeltaOcn != 0 {
		n += 1 + sovMlb(uint64(m.DeltaOcn))
	}
	return n
}

func (m *SetMlbParamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interval != 0 {
		n += 1 + sovMlb(uint64(m.Interval))
	}
	if m.OverloadThreshold != 0 {
		n += 1 + sovMlb(uint64(m.OverloadThreshold))
	}
	if m.TargetThreshold != 0 {
		n += 1 + sovMlb(uint64(m.TargetThreshold))
	}
	if m.DeltaOcn != 0 {
		n += 1 + sovMlb(uint64(m.DeltaOcn))
	}
	return n
}

func (m *SetMlbParamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *GetOcnRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetOcnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OcnMap) > 0 {
		for k, v := range m.OcnMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMlb(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMlb(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMlb(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *OcnRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OcnRecord) > 0 {
		for k, v := range m.OcnRecord {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMlb(uint64(len(k))) + 1 + sovMlb(uint64(v))
			n += mapEntrySize + 1 + sovMlb(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *OcnIDs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMlb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMlb(x uint64) (n int) {
	return sovMlb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetMlbParamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMlb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMlbParamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMlbParamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMlb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMlb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMlbParamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMlb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMlbParamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMlbParamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMlb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverloadThreshold", wireType)
			}
			m.OverloadThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMlb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverloadThreshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetThreshold", wireType)
			}
			m.TargetThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMlb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetThreshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeltaOcn", wireType)
			}
			m.DeltaOcn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMlb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeltaOcn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMlb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMlb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetMlbParamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMlb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetMlbParamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetMlbParamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMlb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverloadThreshold", wireType)
			}
			m.OverloadThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMlb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverloadThreshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetThreshold", wireType)
			}
			m.TargetThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMlb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetThreshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeltaOcn", wireType)
			}
			m.DeltaOcn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMlb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeltaOcn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMlb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMlb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetMlbParamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMlb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetMlbParamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetMlbParamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMlb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMlb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMlb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOcnRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMlb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOcnRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOcnRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMlb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMlb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOcnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMlb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOcnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOcnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OcnMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMlb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMlb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMlb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OcnMap == nil {
				m.OcnMap = make(map[string]*OcnRecord)
			}
			var mapkey string
			var mapvalue *OcnRecord
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMlb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMlb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMlb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMlb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMlb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMlb
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMlb
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &OcnRecord{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMlb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMlb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.OcnMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMlb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMlb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OcnRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMlb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OcnRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OcnRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OcnRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMlb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMlb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMlb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OcnRecord == nil {
				m.OcnRecord = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMlb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMlb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMlb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMlb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMlb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMlb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMlb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.OcnRecord[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMlb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMlb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OcnIDs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMlb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OcnIDs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OcnIDs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMlb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMlb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMlb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMlb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMlb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMlb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMlb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMlb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMlb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMlb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMlb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMlb = fmt.Errorf("proto: unexpected end of group")
)
