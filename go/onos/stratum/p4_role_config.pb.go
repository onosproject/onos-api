// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/stratum/p4_role_config.proto

package stratum

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The P4RoleConfig message conists of these fields:
//
//	exclusive_p4_ids - A list of P4 entities for which this role exclusivly may
//	    issue Write updates. Those entities are also filtered out of Read
//	    responses.
//	shared_p4_ids - A list of P4 entities for which this role may issue Write
//	    updates. Access to those entities is shared with other roles. Those
//	    entities are also filtered out of Read responses.
//	packet_in_filter - A single PacketFilter that is applied to incoming packets
//	    to determine whether this role should receive them. An empty list
//	    results in no filtering. This is a positive filter, a packet must
//	    contain the exact specified value to be forwarded.
//	receives_packet_ins - A toggle to set if this role should receive PacketIns.
//	can_push_pipeline - Determines if this role is allowed to push a pipeline.
type P4RoleConfig struct {
	ExclusiveP4Ids    []uint32                   `protobuf:"varint,1,rep,packed,name=exclusive_p4_ids,json=exclusiveP4Ids,proto3" json:"exclusive_p4_ids,omitempty"`
	SharedP4Ids       []uint32                   `protobuf:"varint,2,rep,packed,name=shared_p4_ids,json=sharedP4Ids,proto3" json:"shared_p4_ids,omitempty"`
	PacketInFilter    *P4RoleConfig_PacketFilter `protobuf:"bytes,3,opt,name=packet_in_filter,json=packetInFilter,proto3" json:"packet_in_filter,omitempty"`
	ReceivesPacketIns bool                       `protobuf:"varint,4,opt,name=receives_packet_ins,json=receivesPacketIns,proto3" json:"receives_packet_ins,omitempty"`
	CanPushPipeline   bool                       `protobuf:"varint,5,opt,name=can_push_pipeline,json=canPushPipeline,proto3" json:"can_push_pipeline,omitempty"`
}

func (m *P4RoleConfig) Reset()         { *m = P4RoleConfig{} }
func (m *P4RoleConfig) String() string { return proto.CompactTextString(m) }
func (*P4RoleConfig) ProtoMessage()    {}
func (*P4RoleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a00f574e6a28476, []int{0}
}
func (m *P4RoleConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *P4RoleConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_P4RoleConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *P4RoleConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P4RoleConfig.Merge(m, src)
}
func (m *P4RoleConfig) XXX_Size() int {
	return m.Size()
}
func (m *P4RoleConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_P4RoleConfig.DiscardUnknown(m)
}

var xxx_messageInfo_P4RoleConfig proto.InternalMessageInfo

func (m *P4RoleConfig) GetExclusiveP4Ids() []uint32 {
	if m != nil {
		return m.ExclusiveP4Ids
	}
	return nil
}

func (m *P4RoleConfig) GetSharedP4Ids() []uint32 {
	if m != nil {
		return m.SharedP4Ids
	}
	return nil
}

func (m *P4RoleConfig) GetPacketInFilter() *P4RoleConfig_PacketFilter {
	if m != nil {
		return m.PacketInFilter
	}
	return nil
}

func (m *P4RoleConfig) GetReceivesPacketIns() bool {
	if m != nil {
		return m.ReceivesPacketIns
	}
	return false
}

func (m *P4RoleConfig) GetCanPushPipeline() bool {
	if m != nil {
		return m.CanPushPipeline
	}
	return false
}

type P4RoleConfig_PacketFilter struct {
	MetadataId uint32 `protobuf:"varint,1,opt,name=metadata_id,json=metadataId,proto3" json:"metadata_id,omitempty"`
	Value      []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *P4RoleConfig_PacketFilter) Reset()         { *m = P4RoleConfig_PacketFilter{} }
func (m *P4RoleConfig_PacketFilter) String() string { return proto.CompactTextString(m) }
func (*P4RoleConfig_PacketFilter) ProtoMessage()    {}
func (*P4RoleConfig_PacketFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a00f574e6a28476, []int{0, 0}
}
func (m *P4RoleConfig_PacketFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *P4RoleConfig_PacketFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_P4RoleConfig_PacketFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *P4RoleConfig_PacketFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P4RoleConfig_PacketFilter.Merge(m, src)
}
func (m *P4RoleConfig_PacketFilter) XXX_Size() int {
	return m.Size()
}
func (m *P4RoleConfig_PacketFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_P4RoleConfig_PacketFilter.DiscardUnknown(m)
}

var xxx_messageInfo_P4RoleConfig_PacketFilter proto.InternalMessageInfo

func (m *P4RoleConfig_PacketFilter) GetMetadataId() uint32 {
	if m != nil {
		return m.MetadataId
	}
	return 0
}

func (m *P4RoleConfig_PacketFilter) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*P4RoleConfig)(nil), "stratum.P4RoleConfig")
	proto.RegisterType((*P4RoleConfig_PacketFilter)(nil), "stratum.P4RoleConfig.PacketFilter")
}

func init() { proto.RegisterFile("onos/stratum/p4_role_config.proto", fileDescriptor_5a00f574e6a28476) }

var fileDescriptor_5a00f574e6a28476 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x9b, 0xcd, 0xa9, 0x64, 0x7f, 0xdc, 0xa2, 0x87, 0xa2, 0x50, 0xeb, 0x4e, 0xc5, 0x43,
	0x07, 0xda, 0x4f, 0xa0, 0x28, 0x0c, 0x3c, 0x94, 0x7e, 0x81, 0x10, 0xdb, 0x77, 0x2e, 0xd8, 0x25,
	0x21, 0x49, 0x87, 0x47, 0x3f, 0x82, 0x1f, 0xcb, 0x8b, 0xb0, 0xa3, 0x47, 0xd9, 0xbe, 0x88, 0x90,
	0xb6, 0x63, 0xc7, 0xf7, 0xf7, 0xfc, 0xde, 0x3c, 0xe1, 0xc5, 0x37, 0x52, 0x48, 0x33, 0x33, 0x56,
	0x33, 0x5b, 0xad, 0x66, 0x2a, 0xa1, 0x5a, 0x96, 0x40, 0x73, 0x29, 0x16, 0xfc, 0x2d, 0x56, 0x5a,
	0x5a, 0x49, 0x4e, 0x9a, 0x74, 0xfa, 0xd3, 0xc1, 0x83, 0x34, 0xc9, 0x64, 0x09, 0x8f, 0x2e, 0x27,
	0x11, 0x1e, 0xc3, 0x47, 0x5e, 0x56, 0x86, 0xaf, 0x81, 0xaa, 0x84, 0xf2, 0xc2, 0xf8, 0x28, 0xec,
	0x46, 0xc3, 0x6c, 0xb4, 0xe7, 0x69, 0x32, 0x2f, 0x0c, 0x99, 0xe2, 0xa1, 0x59, 0x32, 0x0d, 0x45,
	0xab, 0x75, 0x9c, 0xd6, 0xaf, 0x61, 0xed, 0xbc, 0xe0, 0xb1, 0x62, 0xf9, 0x3b, 0x58, 0xca, 0x05,
	0x5d, 0xf0, 0xd2, 0x82, 0xf6, 0xbb, 0x21, 0x8a, 0xfa, 0x77, 0xd3, 0xb8, 0xf9, 0x42, 0x7c, 0x58,
	0x1f, 0xa7, 0xce, 0x7e, 0x76, 0x66, 0x36, 0xaa, 0x77, 0xe7, 0xa2, 0x9e, 0x49, 0x8c, 0xcf, 0x35,
	0xe4, 0xc0, 0xd7, 0x60, 0xe8, 0xfe, 0x59, 0xe3, 0x1f, 0x85, 0x28, 0x3a, 0xcd, 0x26, 0x6d, 0x94,
	0x36, 0x4b, 0x86, 0xdc, 0xe2, 0x49, 0xce, 0x04, 0x55, 0x95, 0x59, 0x52, 0xc5, 0x15, 0x94, 0x5c,
	0x80, 0xdf, 0x73, 0xf6, 0x59, 0xce, 0x44, 0x5a, 0x99, 0x65, 0xda, 0xe0, 0xcb, 0x27, 0x3c, 0x38,
	0xec, 0x26, 0xd7, 0xb8, 0xbf, 0x02, 0xcb, 0x0a, 0x66, 0x19, 0xe5, 0x85, 0x8f, 0x42, 0x14, 0x0d,
	0x33, 0xdc, 0xa2, 0x79, 0x41, 0x2e, 0x70, 0x6f, 0xcd, 0xca, 0x0a, 0xfc, 0x4e, 0x88, 0xa2, 0x41,
	0x56, 0x0f, 0x0f, 0x57, 0xdf, 0xdb, 0x00, 0x6d, 0xb6, 0x01, 0xfa, 0xdb, 0x06, 0xe8, 0x6b, 0x17,
	0x78, 0x9b, 0x5d, 0xe0, 0xfd, 0xee, 0x02, 0xef, 0x13, 0x79, 0xaf, 0xc7, 0xee, 0xf8, 0xf7, 0xff,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x67, 0x4f, 0x38, 0xca, 0xa1, 0x01, 0x00, 0x00,
}

func (m *P4RoleConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *P4RoleConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *P4RoleConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CanPushPipeline {
		i--
		if m.CanPushPipeline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ReceivesPacketIns {
		i--
		if m.ReceivesPacketIns {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.PacketInFilter != nil {
		{
			size, err := m.PacketInFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP4RoleConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SharedP4Ids) > 0 {
		dAtA3 := make([]byte, len(m.SharedP4Ids)*10)
		var j2 int
		for _, num := range m.SharedP4Ids {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintP4RoleConfig(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExclusiveP4Ids) > 0 {
		dAtA5 := make([]byte, len(m.ExclusiveP4Ids)*10)
		var j4 int
		for _, num := range m.ExclusiveP4Ids {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintP4RoleConfig(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *P4RoleConfig_PacketFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *P4RoleConfig_PacketFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *P4RoleConfig_PacketFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintP4RoleConfig(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.MetadataId != 0 {
		i = encodeVarintP4RoleConfig(dAtA, i, uint64(m.MetadataId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintP4RoleConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovP4RoleConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *P4RoleConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExclusiveP4Ids) > 0 {
		l = 0
		for _, e := range m.ExclusiveP4Ids {
			l += sovP4RoleConfig(uint64(e))
		}
		n += 1 + sovP4RoleConfig(uint64(l)) + l
	}
	if len(m.SharedP4Ids) > 0 {
		l = 0
		for _, e := range m.SharedP4Ids {
			l += sovP4RoleConfig(uint64(e))
		}
		n += 1 + sovP4RoleConfig(uint64(l)) + l
	}
	if m.PacketInFilter != nil {
		l = m.PacketInFilter.Size()
		n += 1 + l + sovP4RoleConfig(uint64(l))
	}
	if m.ReceivesPacketIns {
		n += 2
	}
	if m.CanPushPipeline {
		n += 2
	}
	return n
}

func (m *P4RoleConfig_PacketFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MetadataId != 0 {
		n += 1 + sovP4RoleConfig(uint64(m.MetadataId))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovP4RoleConfig(uint64(l))
	}
	return n
}

func sovP4RoleConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozP4RoleConfig(x uint64) (n int) {
	return sovP4RoleConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *P4RoleConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP4RoleConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: P4RoleConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: P4RoleConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowP4RoleConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExclusiveP4Ids = append(m.ExclusiveP4Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowP4RoleConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthP4RoleConfig
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthP4RoleConfig
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ExclusiveP4Ids) == 0 {
					m.ExclusiveP4Ids = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowP4RoleConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExclusiveP4Ids = append(m.ExclusiveP4Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExclusiveP4Ids", wireType)
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowP4RoleConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SharedP4Ids = append(m.SharedP4Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowP4RoleConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthP4RoleConfig
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthP4RoleConfig
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SharedP4Ids) == 0 {
					m.SharedP4Ids = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowP4RoleConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SharedP4Ids = append(m.SharedP4Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedP4Ids", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketInFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP4RoleConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP4RoleConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP4RoleConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PacketInFilter == nil {
				m.PacketInFilter = &P4RoleConfig_PacketFilter{}
			}
			if err := m.PacketInFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivesPacketIns", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP4RoleConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReceivesPacketIns = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanPushPipeline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP4RoleConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanPushPipeline = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipP4RoleConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP4RoleConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *P4RoleConfig_PacketFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP4RoleConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataId", wireType)
			}
			m.MetadataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP4RoleConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetadataId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP4RoleConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP4RoleConfig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP4RoleConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP4RoleConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP4RoleConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipP4RoleConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowP4RoleConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP4RoleConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP4RoleConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthP4RoleConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupP4RoleConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthP4RoleConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthP4RoleConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowP4RoleConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupP4RoleConfig = fmt.Errorf("proto: unexpected end of group")
)
