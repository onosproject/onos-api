// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/mho/mho.proto

// Package onos.mho defines interfaces to monitor MHO

package mho

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetRequest struct {
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2241cd1f7f71b11c, []int{0}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

type UeList struct {
	Ues []*UE `protobuf:"bytes,1,rep,name=ues,proto3" json:"ues,omitempty"`
}

func (m *UeList) Reset()         { *m = UeList{} }
func (m *UeList) String() string { return proto.CompactTextString(m) }
func (*UeList) ProtoMessage()    {}
func (*UeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2241cd1f7f71b11c, []int{1}
}
func (m *UeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UeList.Merge(m, src)
}
func (m *UeList) XXX_Size() int {
	return m.Size()
}
func (m *UeList) XXX_DiscardUnknown() {
	xxx_messageInfo_UeList.DiscardUnknown(m)
}

var xxx_messageInfo_UeList proto.InternalMessageInfo

func (m *UeList) GetUes() []*UE {
	if m != nil {
		return m.Ues
	}
	return nil
}

type CellList struct {
	Cells []*Cell `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (m *CellList) Reset()         { *m = CellList{} }
func (m *CellList) String() string { return proto.CompactTextString(m) }
func (*CellList) ProtoMessage()    {}
func (*CellList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2241cd1f7f71b11c, []int{2}
}
func (m *CellList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CellList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CellList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CellList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellList.Merge(m, src)
}
func (m *CellList) XXX_Size() int {
	return m.Size()
}
func (m *CellList) XXX_DiscardUnknown() {
	xxx_messageInfo_CellList.DiscardUnknown(m)
}

var xxx_messageInfo_CellList proto.InternalMessageInfo

func (m *CellList) GetCells() []*Cell {
	if m != nil {
		return m.Cells
	}
	return nil
}

type UE struct {
	UeId     string `protobuf:"bytes,1,opt,name=ue_id,json=ueId,proto3" json:"ue_id,omitempty"`
	RrcState string `protobuf:"bytes,2,opt,name=rrc_state,json=rrcState,proto3" json:"rrc_state,omitempty"`
	Cgi      string `protobuf:"bytes,3,opt,name=cgi,proto3" json:"cgi,omitempty"`
}

func (m *UE) Reset()         { *m = UE{} }
func (m *UE) String() string { return proto.CompactTextString(m) }
func (*UE) ProtoMessage()    {}
func (*UE) Descriptor() ([]byte, []int) {
	return fileDescriptor_2241cd1f7f71b11c, []int{3}
}
func (m *UE) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UE.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UE.Merge(m, src)
}
func (m *UE) XXX_Size() int {
	return m.Size()
}
func (m *UE) XXX_DiscardUnknown() {
	xxx_messageInfo_UE.DiscardUnknown(m)
}

var xxx_messageInfo_UE proto.InternalMessageInfo

func (m *UE) GetUeId() string {
	if m != nil {
		return m.UeId
	}
	return ""
}

func (m *UE) GetRrcState() string {
	if m != nil {
		return m.RrcState
	}
	return ""
}

func (m *UE) GetCgi() string {
	if m != nil {
		return m.Cgi
	}
	return ""
}

type Cell struct {
	Cgi                    string `protobuf:"bytes,1,opt,name=cgi,proto3" json:"cgi,omitempty"`
	NumUes                 int64  `protobuf:"varint,2,opt,name=num_ues,json=numUes,proto3" json:"num_ues,omitempty"`
	CumulativeHandoversIn  int64  `protobuf:"varint,4,opt,name=cumulative_handovers_in,json=cumulativeHandoversIn,proto3" json:"cumulative_handovers_in,omitempty"`
	CumulativeHandoversOut int64  `protobuf:"varint,5,opt,name=cumulative_handovers_out,json=cumulativeHandoversOut,proto3" json:"cumulative_handovers_out,omitempty"`
}

func (m *Cell) Reset()         { *m = Cell{} }
func (m *Cell) String() string { return proto.CompactTextString(m) }
func (*Cell) ProtoMessage()    {}
func (*Cell) Descriptor() ([]byte, []int) {
	return fileDescriptor_2241cd1f7f71b11c, []int{4}
}
func (m *Cell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cell.Merge(m, src)
}
func (m *Cell) XXX_Size() int {
	return m.Size()
}
func (m *Cell) XXX_DiscardUnknown() {
	xxx_messageInfo_Cell.DiscardUnknown(m)
}

var xxx_messageInfo_Cell proto.InternalMessageInfo

func (m *Cell) GetCgi() string {
	if m != nil {
		return m.Cgi
	}
	return ""
}

func (m *Cell) GetNumUes() int64 {
	if m != nil {
		return m.NumUes
	}
	return 0
}

func (m *Cell) GetCumulativeHandoversIn() int64 {
	if m != nil {
		return m.CumulativeHandoversIn
	}
	return 0
}

func (m *Cell) GetCumulativeHandoversOut() int64 {
	if m != nil {
		return m.CumulativeHandoversOut
	}
	return 0
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "onos.mho.GetRequest")
	proto.RegisterType((*UeList)(nil), "onos.mho.UeList")
	proto.RegisterType((*CellList)(nil), "onos.mho.CellList")
	proto.RegisterType((*UE)(nil), "onos.mho.UE")
	proto.RegisterType((*Cell)(nil), "onos.mho.Cell")
}

func init() { proto.RegisterFile("onos/mho/mho.proto", fileDescriptor_2241cd1f7f71b11c) }

var fileDescriptor_2241cd1f7f71b11c = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0xb3, 0x4d, 0x1b, 0xd3, 0xb1, 0x48, 0x59, 0xff, 0x74, 0x51, 0x08, 0x25, 0x78, 0xe8,
	0x29, 0x4a, 0x85, 0xe2, 0x59, 0x29, 0x6d, 0x41, 0x10, 0x22, 0x39, 0x87, 0x9a, 0x0e, 0x26, 0x90,
	0x64, 0x6d, 0xb2, 0xdb, 0xe7, 0xf0, 0x1d, 0x7c, 0x19, 0x8f, 0x3d, 0x7a, 0x94, 0xf6, 0x45, 0x64,
	0xb7, 0xc4, 0x28, 0xd4, 0xc3, 0xc2, 0xee, 0xfc, 0xbe, 0x6f, 0x98, 0xfd, 0x06, 0x28, 0xcf, 0x79,
	0x79, 0x95, 0xc5, 0x5c, 0x1d, 0xef, 0xb5, 0xe0, 0x82, 0x53, 0x5b, 0xd5, 0xbc, 0x2c, 0xe6, 0x6e,
	0x07, 0x60, 0x82, 0xc2, 0xc7, 0xa5, 0xc4, 0x52, 0xb8, 0x03, 0xb0, 0x02, 0x7c, 0x48, 0x4a, 0x41,
	0x1d, 0x30, 0x25, 0x96, 0x8c, 0xf4, 0xcd, 0xc1, 0xe1, 0xb0, 0xe3, 0x55, 0x7a, 0x2f, 0x18, 0xfb,
	0x0a, 0xb8, 0xd7, 0x60, 0xdf, 0x63, 0x9a, 0x6a, 0xed, 0x25, 0xb4, 0x22, 0x4c, 0xd3, 0x4a, 0x7d,
	0x54, 0xab, 0x95, 0xc4, 0xdf, 0x41, 0x77, 0x0a, 0x8d, 0x60, 0x4c, 0x8f, 0xa1, 0x25, 0x31, 0x4c,
	0x16, 0x8c, 0xf4, 0xc9, 0xa0, 0xed, 0x37, 0x25, 0xce, 0x16, 0xf4, 0x02, 0xda, 0x45, 0x11, 0x85,
	0xa5, 0x98, 0x0b, 0x64, 0x0d, 0x0d, 0xec, 0xa2, 0x88, 0x9e, 0xd4, 0x9b, 0x76, 0xc1, 0x8c, 0x5e,
	0x12, 0x66, 0xea, 0xb2, 0xba, 0xba, 0xef, 0x04, 0x9a, 0xaa, 0x73, 0x85, 0xc8, 0x0f, 0xa2, 0x3d,
	0x38, 0xc8, 0x65, 0x16, 0xaa, 0xd1, 0x55, 0x1f, 0xd3, 0xb7, 0x72, 0x99, 0x05, 0x58, 0xd2, 0x11,
	0xf4, 0x22, 0x99, 0xc9, 0x74, 0x2e, 0x92, 0x15, 0x86, 0xf1, 0x3c, 0x5f, 0xf0, 0x15, 0x16, 0x65,
	0x98, 0xe4, 0xac, 0xa9, 0x85, 0xa7, 0x35, 0x9e, 0x56, 0x74, 0x96, 0xd3, 0x5b, 0x60, 0x7b, 0x7d,
	0x5c, 0x0a, 0xd6, 0xd2, 0xc6, 0xb3, 0x3d, 0xc6, 0x47, 0x29, 0x86, 0x4b, 0x30, 0xb3, 0x98, 0xd3,
	0x21, 0x58, 0x13, 0x14, 0x6a, 0x84, 0x93, 0x3a, 0x97, 0x3a, 0xf2, 0xf3, 0xee, 0xaf, 0x6c, 0x75,
	0xf4, 0xae, 0x41, 0x47, 0x60, 0x4f, 0x50, 0xa8, 0x2f, 0xfe, 0xe7, 0xa2, 0x7f, 0x33, 0xde, 0xf9,
	0xee, 0xd8, 0xc7, 0xc6, 0x21, 0xeb, 0x8d, 0x43, 0xbe, 0x36, 0x0e, 0x79, 0xdb, 0x3a, 0xc6, 0x7a,
	0xeb, 0x18, 0x9f, 0x5b, 0xc7, 0x78, 0xb6, 0xf4, 0xde, 0x6f, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x95, 0x97, 0xd3, 0x5e, 0x0d, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MhoClient is the client API for Mho service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MhoClient interface {
	GetUes(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*UeList, error)
	GetCells(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CellList, error)
}

type mhoClient struct {
	cc *grpc.ClientConn
}

func NewMhoClient(cc *grpc.ClientConn) MhoClient {
	return &mhoClient{cc}
}

func (c *mhoClient) GetUes(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*UeList, error) {
	out := new(UeList)
	err := c.cc.Invoke(ctx, "/onos.mho.mho/GetUes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mhoClient) GetCells(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CellList, error) {
	out := new(CellList)
	err := c.cc.Invoke(ctx, "/onos.mho.mho/GetCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MhoServer is the server API for Mho service.
type MhoServer interface {
	GetUes(context.Context, *GetRequest) (*UeList, error)
	GetCells(context.Context, *GetRequest) (*CellList, error)
}

// UnimplementedMhoServer can be embedded to have forward compatible implementations.
type UnimplementedMhoServer struct {
}

func (*UnimplementedMhoServer) GetUes(ctx context.Context, req *GetRequest) (*UeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUes not implemented")
}
func (*UnimplementedMhoServer) GetCells(ctx context.Context, req *GetRequest) (*CellList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCells not implemented")
}

func RegisterMhoServer(s *grpc.Server, srv MhoServer) {
	s.RegisterService(&_Mho_serviceDesc, srv)
}

func _Mho_GetUes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MhoServer).GetUes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.mho.mho/GetUes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MhoServer).GetUes(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mho_GetCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MhoServer).GetCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.mho.mho/GetCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MhoServer).GetCells(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mho_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.mho.mho",
	HandlerType: (*MhoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUes",
			Handler:    _Mho_GetUes_Handler,
		},
		{
			MethodName: "GetCells",
			Handler:    _Mho_GetCells_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onos/mho/mho.proto",
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ues) > 0 {
		for iNdEx := len(m.Ues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMho(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CellList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for iNdEx := len(m.Cells) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cells[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMho(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UE) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UE) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UE) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cgi) > 0 {
		i -= len(m.Cgi)
		copy(dAtA[i:], m.Cgi)
		i = encodeVarintMho(dAtA, i, uint64(len(m.Cgi)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RrcState) > 0 {
		i -= len(m.RrcState)
		copy(dAtA[i:], m.RrcState)
		i = encodeVarintMho(dAtA, i, uint64(len(m.RrcState)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UeId) > 0 {
		i -= len(m.UeId)
		copy(dAtA[i:], m.UeId)
		i = encodeVarintMho(dAtA, i, uint64(len(m.UeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Cell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CumulativeHandoversOut != 0 {
		i = encodeVarintMho(dAtA, i, uint64(m.CumulativeHandoversOut))
		i--
		dAtA[i] = 0x28
	}
	if m.CumulativeHandoversIn != 0 {
		i = encodeVarintMho(dAtA, i, uint64(m.CumulativeHandoversIn))
		i--
		dAtA[i] = 0x20
	}
	if m.NumUes != 0 {
		i = encodeVarintMho(dAtA, i, uint64(m.NumUes))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Cgi) > 0 {
		i -= len(m.Cgi)
		copy(dAtA[i:], m.Cgi)
		i = encodeVarintMho(dAtA, i, uint64(len(m.Cgi)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMho(dAtA []byte, offset int, v uint64) int {
	offset -= sovMho(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ues) > 0 {
		for _, e := range m.Ues {
			l = e.Size()
			n += 1 + l + sovMho(uint64(l))
		}
	}
	return n
}

func (m *CellList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, e := range m.Cells {
			l = e.Size()
			n += 1 + l + sovMho(uint64(l))
		}
	}
	return n
}

func (m *UE) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UeId)
	if l > 0 {
		n += 1 + l + sovMho(uint64(l))
	}
	l = len(m.RrcState)
	if l > 0 {
		n += 1 + l + sovMho(uint64(l))
	}
	l = len(m.Cgi)
	if l > 0 {
		n += 1 + l + sovMho(uint64(l))
	}
	return n
}

func (m *Cell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cgi)
	if l > 0 {
		n += 1 + l + sovMho(uint64(l))
	}
	if m.NumUes != 0 {
		n += 1 + sovMho(uint64(m.NumUes))
	}
	if m.CumulativeHandoversIn != 0 {
		n += 1 + sovMho(uint64(m.CumulativeHandoversIn))
	}
	if m.CumulativeHandoversOut != 0 {
		n += 1 + sovMho(uint64(m.CumulativeHandoversOut))
	}
	return n
}

func sovMho(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMho(x uint64) (n int) {
	return sovMho(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMho
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMho(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMho
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMho
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMho
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMho
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMho
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ues = append(m.Ues, &UE{})
			if err := m.Ues[len(m.Ues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMho(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMho
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMho
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMho
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMho
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMho
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cells = append(m.Cells, &Cell{})
			if err := m.Cells[len(m.Cells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMho(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMho
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UE) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMho
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UE: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UE: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMho
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMho
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMho
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RrcState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMho
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMho
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMho
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RrcState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cgi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMho
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMho
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMho
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cgi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMho(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMho
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMho
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cgi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMho
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMho
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMho
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cgi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUes", wireType)
			}
			m.NumUes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMho
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumUes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeHandoversIn", wireType)
			}
			m.CumulativeHandoversIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMho
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CumulativeHandoversIn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeHandoversOut", wireType)
			}
			m.CumulativeHandoversOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMho
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CumulativeHandoversOut |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMho(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMho
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMho(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMho
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMho
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMho
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMho
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMho
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMho
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMho        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMho          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMho = fmt.Errorf("proto: unexpected end of group")
)
