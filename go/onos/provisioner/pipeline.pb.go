// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/provisioner/pipeline.proto

package provisioner

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PipelineConfig
type PipelineConfig struct {
	ConfigID ConfigID `protobuf:"bytes,1,opt,name=config_id,json=configId,proto3,casttype=ConfigID" json:"config_id,omitempty"`
	Revision Revision `protobuf:"varint,2,opt,name=revision,proto3,casttype=Revision" json:"revision,omitempty"`
	P4Info   []byte   `protobuf:"bytes,3,opt,name=p4_info,json=p4Info,proto3" json:"p4_info,omitempty"`
	P4Binary []byte   `protobuf:"bytes,4,opt,name=p4_binary,json=p4Binary,proto3" json:"p4_binary,omitempty"`
}

func (m *PipelineConfig) Reset()         { *m = PipelineConfig{} }
func (m *PipelineConfig) String() string { return proto.CompactTextString(m) }
func (*PipelineConfig) ProtoMessage()    {}
func (*PipelineConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9364cf9369f5c6, []int{0}
}
func (m *PipelineConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PipelineConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PipelineConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PipelineConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineConfig.Merge(m, src)
}
func (m *PipelineConfig) XXX_Size() int {
	return m.Size()
}
func (m *PipelineConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineConfig proto.InternalMessageInfo

func (m *PipelineConfig) GetConfigID() ConfigID {
	if m != nil {
		return m.ConfigID
	}
	return ""
}

func (m *PipelineConfig) GetRevision() Revision {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *PipelineConfig) GetP4Info() []byte {
	if m != nil {
		return m.P4Info
	}
	return nil
}

func (m *PipelineConfig) GetP4Binary() []byte {
	if m != nil {
		return m.P4Binary
	}
	return nil
}

type AddPipelineConfigRequest struct {
	Config *PipelineConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *AddPipelineConfigRequest) Reset()         { *m = AddPipelineConfigRequest{} }
func (m *AddPipelineConfigRequest) String() string { return proto.CompactTextString(m) }
func (*AddPipelineConfigRequest) ProtoMessage()    {}
func (*AddPipelineConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9364cf9369f5c6, []int{1}
}
func (m *AddPipelineConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPipelineConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPipelineConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPipelineConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPipelineConfigRequest.Merge(m, src)
}
func (m *AddPipelineConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddPipelineConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPipelineConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPipelineConfigRequest proto.InternalMessageInfo

func (m *AddPipelineConfigRequest) GetConfig() *PipelineConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type AddPipelineConfigResponse struct {
}

func (m *AddPipelineConfigResponse) Reset()         { *m = AddPipelineConfigResponse{} }
func (m *AddPipelineConfigResponse) String() string { return proto.CompactTextString(m) }
func (*AddPipelineConfigResponse) ProtoMessage()    {}
func (*AddPipelineConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9364cf9369f5c6, []int{2}
}
func (m *AddPipelineConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPipelineConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPipelineConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPipelineConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPipelineConfigResponse.Merge(m, src)
}
func (m *AddPipelineConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddPipelineConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPipelineConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddPipelineConfigResponse proto.InternalMessageInfo

type DeletePipelineConfigRequest struct {
	PipelineConfig *PipelineConfig `protobuf:"bytes,1,opt,name=pipeline_config,json=pipelineConfig,proto3" json:"pipeline_config,omitempty"`
}

func (m *DeletePipelineConfigRequest) Reset()         { *m = DeletePipelineConfigRequest{} }
func (m *DeletePipelineConfigRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePipelineConfigRequest) ProtoMessage()    {}
func (*DeletePipelineConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9364cf9369f5c6, []int{3}
}
func (m *DeletePipelineConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePipelineConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePipelineConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePipelineConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePipelineConfigRequest.Merge(m, src)
}
func (m *DeletePipelineConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeletePipelineConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePipelineConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePipelineConfigRequest proto.InternalMessageInfo

func (m *DeletePipelineConfigRequest) GetPipelineConfig() *PipelineConfig {
	if m != nil {
		return m.PipelineConfig
	}
	return nil
}

type DeletePipelineConfigResponse struct {
}

func (m *DeletePipelineConfigResponse) Reset()         { *m = DeletePipelineConfigResponse{} }
func (m *DeletePipelineConfigResponse) String() string { return proto.CompactTextString(m) }
func (*DeletePipelineConfigResponse) ProtoMessage()    {}
func (*DeletePipelineConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9364cf9369f5c6, []int{4}
}
func (m *DeletePipelineConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePipelineConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePipelineConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePipelineConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePipelineConfigResponse.Merge(m, src)
}
func (m *DeletePipelineConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeletePipelineConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePipelineConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePipelineConfigResponse proto.InternalMessageInfo

type GetPipelineConfigRequest struct {
	ConfigID ConfigID `protobuf:"bytes,1,opt,name=config_id,json=configId,proto3,casttype=ConfigID" json:"config_id,omitempty"`
}

func (m *GetPipelineConfigRequest) Reset()         { *m = GetPipelineConfigRequest{} }
func (m *GetPipelineConfigRequest) String() string { return proto.CompactTextString(m) }
func (*GetPipelineConfigRequest) ProtoMessage()    {}
func (*GetPipelineConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9364cf9369f5c6, []int{5}
}
func (m *GetPipelineConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPipelineConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPipelineConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPipelineConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPipelineConfigRequest.Merge(m, src)
}
func (m *GetPipelineConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPipelineConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPipelineConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPipelineConfigRequest proto.InternalMessageInfo

func (m *GetPipelineConfigRequest) GetConfigID() ConfigID {
	if m != nil {
		return m.ConfigID
	}
	return ""
}

type GetPipelineConfigResponse struct {
	Config *PipelineConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *GetPipelineConfigResponse) Reset()         { *m = GetPipelineConfigResponse{} }
func (m *GetPipelineConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetPipelineConfigResponse) ProtoMessage()    {}
func (*GetPipelineConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9364cf9369f5c6, []int{6}
}
func (m *GetPipelineConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPipelineConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPipelineConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPipelineConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPipelineConfigResponse.Merge(m, src)
}
func (m *GetPipelineConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPipelineConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPipelineConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPipelineConfigResponse proto.InternalMessageInfo

func (m *GetPipelineConfigResponse) GetConfig() *PipelineConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type ListPipelineConfigsRequest struct {
	Watch bool `protobuf:"varint,1,opt,name=watch,proto3" json:"watch,omitempty"`
}

func (m *ListPipelineConfigsRequest) Reset()         { *m = ListPipelineConfigsRequest{} }
func (m *ListPipelineConfigsRequest) String() string { return proto.CompactTextString(m) }
func (*ListPipelineConfigsRequest) ProtoMessage()    {}
func (*ListPipelineConfigsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9364cf9369f5c6, []int{7}
}
func (m *ListPipelineConfigsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPipelineConfigsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPipelineConfigsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPipelineConfigsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPipelineConfigsRequest.Merge(m, src)
}
func (m *ListPipelineConfigsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListPipelineConfigsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPipelineConfigsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPipelineConfigsRequest proto.InternalMessageInfo

func (m *ListPipelineConfigsRequest) GetWatch() bool {
	if m != nil {
		return m.Watch
	}
	return false
}

type ListPipelineConfigsResponse struct {
	Config *PipelineConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *ListPipelineConfigsResponse) Reset()         { *m = ListPipelineConfigsResponse{} }
func (m *ListPipelineConfigsResponse) String() string { return proto.CompactTextString(m) }
func (*ListPipelineConfigsResponse) ProtoMessage()    {}
func (*ListPipelineConfigsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9364cf9369f5c6, []int{8}
}
func (m *ListPipelineConfigsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPipelineConfigsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPipelineConfigsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPipelineConfigsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPipelineConfigsResponse.Merge(m, src)
}
func (m *ListPipelineConfigsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListPipelineConfigsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPipelineConfigsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPipelineConfigsResponse proto.InternalMessageInfo

func (m *ListPipelineConfigsResponse) GetConfig() *PipelineConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*PipelineConfig)(nil), "onos.provisioner.PipelineConfig")
	proto.RegisterType((*AddPipelineConfigRequest)(nil), "onos.provisioner.AddPipelineConfigRequest")
	proto.RegisterType((*AddPipelineConfigResponse)(nil), "onos.provisioner.AddPipelineConfigResponse")
	proto.RegisterType((*DeletePipelineConfigRequest)(nil), "onos.provisioner.DeletePipelineConfigRequest")
	proto.RegisterType((*DeletePipelineConfigResponse)(nil), "onos.provisioner.DeletePipelineConfigResponse")
	proto.RegisterType((*GetPipelineConfigRequest)(nil), "onos.provisioner.GetPipelineConfigRequest")
	proto.RegisterType((*GetPipelineConfigResponse)(nil), "onos.provisioner.GetPipelineConfigResponse")
	proto.RegisterType((*ListPipelineConfigsRequest)(nil), "onos.provisioner.ListPipelineConfigsRequest")
	proto.RegisterType((*ListPipelineConfigsResponse)(nil), "onos.provisioner.ListPipelineConfigsResponse")
}

func init() { proto.RegisterFile("onos/provisioner/pipeline.proto", fileDescriptor_9e9364cf9369f5c6) }

var fileDescriptor_9e9364cf9369f5c6 = []byte{
	// 452 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0x92, 0x10, 0x9c, 0xa1, 0x2a, 0x68, 0x55, 0xc4, 0xd6, 0x46, 0xae, 0xe5, 0x93, 0x05,
	0xd4, 0x41, 0xc1, 0x48, 0x5c, 0x6b, 0x2a, 0x55, 0x96, 0x38, 0x80, 0x01, 0x71, 0xab, 0xd5, 0xc6,
	0x1b, 0x77, 0xa5, 0x6a, 0x77, 0xb1, 0x4d, 0x11, 0x7f, 0xc1, 0x5f, 0xf4, 0x57, 0x38, 0xf6, 0xc8,
	0x09, 0x21, 0xe7, 0x2f, 0x38, 0x21, 0x7b, 0x5d, 0xd4, 0x24, 0x6b, 0x14, 0xda, 0xdb, 0x8c, 0xe7,
	0xcd, 0x7b, 0x6f, 0x76, 0x46, 0x86, 0x1d, 0xc1, 0x45, 0x31, 0x96, 0xb9, 0x38, 0x63, 0x05, 0x13,
	0x9c, 0xe6, 0x63, 0xc9, 0x24, 0x3d, 0x65, 0x9c, 0xfa, 0x32, 0x17, 0xa5, 0xc0, 0xf7, 0x6b, 0x80,
	0x7f, 0x05, 0x60, 0x6e, 0x65, 0x22, 0x13, 0x4d, 0x71, 0x5c, 0x47, 0x0a, 0xe7, 0x9e, 0x23, 0xd8,
	0x7c, 0xd3, 0xb6, 0xbe, 0x12, 0x7c, 0xc6, 0x32, 0xfc, 0x02, 0x46, 0xd3, 0x26, 0x4a, 0x58, 0x4a,
	0x90, 0x83, 0xbc, 0x51, 0x48, 0xaa, 0x9f, 0x3b, 0x86, 0x2a, 0x47, 0xfb, 0xbf, 0xaf, 0xc4, 0xb1,
	0xa1, 0xa0, 0x51, 0x8a, 0x3d, 0x30, 0x72, 0xaa, 0xd4, 0xc8, 0x2d, 0x07, 0x79, 0x83, 0x70, 0xa3,
	0x46, 0xc6, 0xed, 0xb7, 0xf8, 0x6f, 0x15, 0x3f, 0x84, 0x3b, 0x32, 0x48, 0x18, 0x9f, 0x09, 0xd2,
	0x77, 0x90, 0xb7, 0x11, 0x0f, 0x65, 0x10, 0xf1, 0x99, 0xc0, 0x16, 0x8c, 0x64, 0x90, 0x1c, 0x33,
	0x7e, 0x94, 0x7f, 0x25, 0x83, 0xa6, 0x64, 0xc8, 0x20, 0x6c, 0x72, 0xf7, 0x3d, 0x90, 0xbd, 0x34,
	0x5d, 0xf4, 0x1a, 0xd3, 0x4f, 0x9f, 0x69, 0x51, 0xe2, 0x97, 0x30, 0x54, 0x3e, 0x1a, 0xbf, 0x77,
	0x27, 0x8e, 0xbf, 0x3c, 0xbe, 0xbf, 0xd4, 0xd8, 0xe2, 0x5d, 0x0b, 0xb6, 0x35, 0xac, 0x85, 0x14,
	0xbc, 0xa0, 0xee, 0x09, 0x58, 0xfb, 0xf4, 0x94, 0x96, 0x54, 0xaf, 0x1a, 0xc1, 0xbd, 0xcb, 0x57,
	0x4f, 0xfe, 0x53, 0x7e, 0x53, 0x2e, 0xe4, 0xae, 0x0d, 0x8f, 0xf4, 0x4a, 0xad, 0x93, 0xb7, 0x40,
	0x0e, 0x68, 0xa9, 0xb7, 0x71, 0xbd, 0x7d, 0xb9, 0x1f, 0x60, 0x5b, 0x43, 0xa9, 0xf4, 0x6e, 0xf0,
	0xa0, 0x13, 0x30, 0x5f, 0xb3, 0x62, 0x89, 0xb7, 0xb8, 0xf4, 0xba, 0x05, 0xb7, 0xbf, 0x1c, 0x95,
	0xd3, 0x93, 0x86, 0xd6, 0x88, 0x55, 0xe2, 0x7e, 0x04, 0x4b, 0xdb, 0x73, 0x53, 0x33, 0x93, 0xf3,
	0x3e, 0x3c, 0x58, 0x2c, 0xbd, 0xa3, 0xf9, 0x19, 0x9b, 0x52, 0x7c, 0x08, 0xfd, 0xbd, 0x34, 0xc5,
	0x8f, 0x57, 0xa9, 0xba, 0x8e, 0xcc, 0x7c, 0xb2, 0x16, 0xb6, 0xf5, 0x9c, 0xc1, 0x50, 0x2d, 0x14,
	0xef, 0xae, 0xb6, 0xfd, 0xe3, 0xa8, 0x4c, 0x7f, 0x5d, 0x78, 0x2b, 0x74, 0x08, 0xfd, 0x03, 0x5a,
	0xea, 0x06, 0xe9, 0x3a, 0x18, 0xdd, 0x20, 0xdd, 0x97, 0x40, 0x61, 0x50, 0xef, 0x06, 0x3f, 0x5d,
	0x6d, 0xea, 0xde, 0xb3, 0xb9, 0xbb, 0x26, 0x5a, 0x89, 0x3c, 0x43, 0x21, 0xf9, 0x5e, 0xd9, 0xe8,
	0xa2, 0xb2, 0xd1, 0xaf, 0xca, 0x46, 0xdf, 0xe6, 0x76, 0xef, 0x62, 0x6e, 0xf7, 0x7e, 0xcc, 0xed,
	0xde, 0xf1, 0xb0, 0xf9, 0x51, 0x3d, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x66, 0x5c, 0x30,
	0xf3, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PipelineConfigServiceClient is the client API for PipelineConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PipelineConfigServiceClient interface {
	// Add registers new pipeline configuration
	Add(ctx context.Context, in *AddPipelineConfigRequest, opts ...grpc.CallOption) (*AddPipelineConfigResponse, error)
	// Delete removes a pipeline configuration
	Delete(ctx context.Context, in *DeletePipelineConfigRequest, opts ...grpc.CallOption) (*DeletePipelineConfigResponse, error)
	// Get returns pipeline configuration based on a given ID
	Get(ctx context.Context, in *GetPipelineConfigRequest, opts ...grpc.CallOption) (*GetPipelineConfigResponse, error)
	// List returns all registered pipelines
	List(ctx context.Context, in *ListPipelineConfigsRequest, opts ...grpc.CallOption) (PipelineConfigService_ListClient, error)
}

type pipelineConfigServiceClient struct {
	cc *grpc.ClientConn
}

func NewPipelineConfigServiceClient(cc *grpc.ClientConn) PipelineConfigServiceClient {
	return &pipelineConfigServiceClient{cc}
}

func (c *pipelineConfigServiceClient) Add(ctx context.Context, in *AddPipelineConfigRequest, opts ...grpc.CallOption) (*AddPipelineConfigResponse, error) {
	out := new(AddPipelineConfigResponse)
	err := c.cc.Invoke(ctx, "/onos.provisioner.PipelineConfigService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineConfigServiceClient) Delete(ctx context.Context, in *DeletePipelineConfigRequest, opts ...grpc.CallOption) (*DeletePipelineConfigResponse, error) {
	out := new(DeletePipelineConfigResponse)
	err := c.cc.Invoke(ctx, "/onos.provisioner.PipelineConfigService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineConfigServiceClient) Get(ctx context.Context, in *GetPipelineConfigRequest, opts ...grpc.CallOption) (*GetPipelineConfigResponse, error) {
	out := new(GetPipelineConfigResponse)
	err := c.cc.Invoke(ctx, "/onos.provisioner.PipelineConfigService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineConfigServiceClient) List(ctx context.Context, in *ListPipelineConfigsRequest, opts ...grpc.CallOption) (PipelineConfigService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PipelineConfigService_serviceDesc.Streams[0], "/onos.provisioner.PipelineConfigService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &pipelineConfigServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PipelineConfigService_ListClient interface {
	Recv() (*ListPipelineConfigsResponse, error)
	grpc.ClientStream
}

type pipelineConfigServiceListClient struct {
	grpc.ClientStream
}

func (x *pipelineConfigServiceListClient) Recv() (*ListPipelineConfigsResponse, error) {
	m := new(ListPipelineConfigsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PipelineConfigServiceServer is the server API for PipelineConfigService service.
type PipelineConfigServiceServer interface {
	// Add registers new pipeline configuration
	Add(context.Context, *AddPipelineConfigRequest) (*AddPipelineConfigResponse, error)
	// Delete removes a pipeline configuration
	Delete(context.Context, *DeletePipelineConfigRequest) (*DeletePipelineConfigResponse, error)
	// Get returns pipeline configuration based on a given ID
	Get(context.Context, *GetPipelineConfigRequest) (*GetPipelineConfigResponse, error)
	// List returns all registered pipelines
	List(*ListPipelineConfigsRequest, PipelineConfigService_ListServer) error
}

// UnimplementedPipelineConfigServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPipelineConfigServiceServer struct {
}

func (*UnimplementedPipelineConfigServiceServer) Add(ctx context.Context, req *AddPipelineConfigRequest) (*AddPipelineConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedPipelineConfigServiceServer) Delete(ctx context.Context, req *DeletePipelineConfigRequest) (*DeletePipelineConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedPipelineConfigServiceServer) Get(ctx context.Context, req *GetPipelineConfigRequest) (*GetPipelineConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedPipelineConfigServiceServer) List(req *ListPipelineConfigsRequest, srv PipelineConfigService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterPipelineConfigServiceServer(s *grpc.Server, srv PipelineConfigServiceServer) {
	s.RegisterService(&_PipelineConfigService_serviceDesc, srv)
}

func _PipelineConfigService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPipelineConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineConfigServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.provisioner.PipelineConfigService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineConfigServiceServer).Add(ctx, req.(*AddPipelineConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.provisioner.PipelineConfigService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineConfigServiceServer).Delete(ctx, req.(*DeletePipelineConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineConfigService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineConfigServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.provisioner.PipelineConfigService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineConfigServiceServer).Get(ctx, req.(*GetPipelineConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineConfigService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPipelineConfigsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PipelineConfigServiceServer).List(m, &pipelineConfigServiceListServer{stream})
}

type PipelineConfigService_ListServer interface {
	Send(*ListPipelineConfigsResponse) error
	grpc.ServerStream
}

type pipelineConfigServiceListServer struct {
	grpc.ServerStream
}

func (x *pipelineConfigServiceListServer) Send(m *ListPipelineConfigsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PipelineConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.provisioner.PipelineConfigService",
	HandlerType: (*PipelineConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _PipelineConfigService_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PipelineConfigService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PipelineConfigService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _PipelineConfigService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "onos/provisioner/pipeline.proto",
}

func (m *PipelineConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipelineConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PipelineConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.P4Binary) > 0 {
		i -= len(m.P4Binary)
		copy(dAtA[i:], m.P4Binary)
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.P4Binary)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.P4Info) > 0 {
		i -= len(m.P4Info)
		copy(dAtA[i:], m.P4Info)
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.P4Info)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Revision != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.Revision))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ConfigID) > 0 {
		i -= len(m.ConfigID)
		copy(dAtA[i:], m.ConfigID)
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.ConfigID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddPipelineConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPipelineConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPipelineConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPipeline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddPipelineConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPipelineConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPipelineConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeletePipelineConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePipelineConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePipelineConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PipelineConfig != nil {
		{
			size, err := m.PipelineConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPipeline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeletePipelineConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePipelineConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePipelineConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetPipelineConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPipelineConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPipelineConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConfigID) > 0 {
		i -= len(m.ConfigID)
		copy(dAtA[i:], m.ConfigID)
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.ConfigID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPipelineConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPipelineConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPipelineConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPipeline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListPipelineConfigsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPipelineConfigsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPipelineConfigsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Watch {
		i--
		if m.Watch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListPipelineConfigsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPipelineConfigsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPipelineConfigsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPipeline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPipeline(dAtA []byte, offset int, v uint64) int {
	offset -= sovPipeline(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PipelineConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConfigID)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	if m.Revision != 0 {
		n += 1 + sovPipeline(uint64(m.Revision))
	}
	l = len(m.P4Info)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	l = len(m.P4Binary)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	return n
}

func (m *AddPipelineConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovPipeline(uint64(l))
	}
	return n
}

func (m *AddPipelineConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeletePipelineConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PipelineConfig != nil {
		l = m.PipelineConfig.Size()
		n += 1 + l + sovPipeline(uint64(l))
	}
	return n
}

func (m *DeletePipelineConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetPipelineConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConfigID)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	return n
}

func (m *GetPipelineConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovPipeline(uint64(l))
	}
	return n
}

func (m *ListPipelineConfigsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Watch {
		n += 2
	}
	return n
}

func (m *ListPipelineConfigsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovPipeline(uint64(l))
	}
	return n
}

func sovPipeline(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPipeline(x uint64) (n int) {
	return sovPipeline(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PipelineConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipelineConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipelineConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigID = ConfigID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= Revision(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P4Info", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P4Info = append(m.P4Info[:0], dAtA[iNdEx:postIndex]...)
			if m.P4Info == nil {
				m.P4Info = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P4Binary", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P4Binary = append(m.P4Binary[:0], dAtA[iNdEx:postIndex]...)
			if m.P4Binary == nil {
				m.P4Binary = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPipelineConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPipelineConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPipelineConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &PipelineConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPipelineConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPipelineConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPipelineConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePipelineConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePipelineConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePipelineConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PipelineConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PipelineConfig == nil {
				m.PipelineConfig = &PipelineConfig{}
			}
			if err := m.PipelineConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePipelineConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePipelineConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePipelineConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPipelineConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPipelineConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPipelineConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigID = ConfigID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPipelineConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPipelineConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPipelineConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &PipelineConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPipelineConfigsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPipelineConfigsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPipelineConfigsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Watch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPipelineConfigsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPipelineConfigsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPipelineConfigsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &PipelineConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPipeline(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPipeline
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPipeline
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPipeline
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPipeline        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPipeline          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPipeline = fmt.Errorf("proto: unexpected end of group")
)
