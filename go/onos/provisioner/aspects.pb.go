// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/provisioner/aspects.proto

// Package provisioner defines the main device provisioner gRPC interface

package provisioner

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DeviceConfig is a topology entity aspect used to specify what pipeline and chassis config a device should have applied to it
type DeviceConfig struct {
	PipelineConfigID ConfigID `protobuf:"bytes,1,opt,name=pipeline_config_id,json=pipelineConfigId,proto3,casttype=ConfigID" json:"pipeline_config_id,omitempty"`
	ChassisConfigID  ConfigID `protobuf:"bytes,2,opt,name=chassis_config_id,json=chassisConfigId,proto3,casttype=ConfigID" json:"chassis_config_id,omitempty"`
}

func (m *DeviceConfig) Reset()         { *m = DeviceConfig{} }
func (m *DeviceConfig) String() string { return proto.CompactTextString(m) }
func (*DeviceConfig) ProtoMessage()    {}
func (*DeviceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa6a5635bb96ef51, []int{0}
}
func (m *DeviceConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceConfig.Merge(m, src)
}
func (m *DeviceConfig) XXX_Size() int {
	return m.Size()
}
func (m *DeviceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceConfig proto.InternalMessageInfo

func (m *DeviceConfig) GetPipelineConfigID() ConfigID {
	if m != nil {
		return m.PipelineConfigID
	}
	return ""
}

func (m *DeviceConfig) GetChassisConfigID() ConfigID {
	if m != nil {
		return m.ChassisConfigID
	}
	return ""
}

// PipelineConfigState is a topology entity aspect used to indicate what pipeline config a device has presently applied to it
type PipelineConfigState struct {
	ConfigID ConfigID  `protobuf:"bytes,1,opt,name=config_id,json=configId,proto3,casttype=ConfigID" json:"config_id,omitempty"`
	Cookie   uint64    `protobuf:"varint,2,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Updated  time.Time `protobuf:"bytes,3,opt,name=updated,proto3,stdtime" json:"updated"`
}

func (m *PipelineConfigState) Reset()         { *m = PipelineConfigState{} }
func (m *PipelineConfigState) String() string { return proto.CompactTextString(m) }
func (*PipelineConfigState) ProtoMessage()    {}
func (*PipelineConfigState) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa6a5635bb96ef51, []int{1}
}
func (m *PipelineConfigState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PipelineConfigState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PipelineConfigState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PipelineConfigState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineConfigState.Merge(m, src)
}
func (m *PipelineConfigState) XXX_Size() int {
	return m.Size()
}
func (m *PipelineConfigState) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineConfigState.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineConfigState proto.InternalMessageInfo

func (m *PipelineConfigState) GetConfigID() ConfigID {
	if m != nil {
		return m.ConfigID
	}
	return ""
}

func (m *PipelineConfigState) GetCookie() uint64 {
	if m != nil {
		return m.Cookie
	}
	return 0
}

func (m *PipelineConfigState) GetUpdated() time.Time {
	if m != nil {
		return m.Updated
	}
	return time.Time{}
}

// ChassisConfigState is a topology entity aspect used to indicate what chassis config a device has presently applied to it
type ChassisConfigState struct {
	ConfigID ConfigID  `protobuf:"bytes,1,opt,name=config_id,json=configId,proto3,casttype=ConfigID" json:"config_id,omitempty"`
	Updated  time.Time `protobuf:"bytes,2,opt,name=updated,proto3,stdtime" json:"updated"`
}

func (m *ChassisConfigState) Reset()         { *m = ChassisConfigState{} }
func (m *ChassisConfigState) String() string { return proto.CompactTextString(m) }
func (*ChassisConfigState) ProtoMessage()    {}
func (*ChassisConfigState) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa6a5635bb96ef51, []int{2}
}
func (m *ChassisConfigState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChassisConfigState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChassisConfigState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChassisConfigState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChassisConfigState.Merge(m, src)
}
func (m *ChassisConfigState) XXX_Size() int {
	return m.Size()
}
func (m *ChassisConfigState) XXX_DiscardUnknown() {
	xxx_messageInfo_ChassisConfigState.DiscardUnknown(m)
}

var xxx_messageInfo_ChassisConfigState proto.InternalMessageInfo

func (m *ChassisConfigState) GetConfigID() ConfigID {
	if m != nil {
		return m.ConfigID
	}
	return ""
}

func (m *ChassisConfigState) GetUpdated() time.Time {
	if m != nil {
		return m.Updated
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*DeviceConfig)(nil), "onos.provisioner.DeviceConfig")
	proto.RegisterType((*PipelineConfigState)(nil), "onos.provisioner.PipelineConfigState")
	proto.RegisterType((*ChassisConfigState)(nil), "onos.provisioner.ChassisConfigState")
}

func init() { proto.RegisterFile("onos/provisioner/aspects.proto", fileDescriptor_fa6a5635bb96ef51) }

var fileDescriptor_fa6a5635bb96ef51 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0x31, 0x4f, 0x32, 0x31,
	0x18, 0xc7, 0xaf, 0xbc, 0x6f, 0x10, 0xaa, 0x09, 0x58, 0x8d, 0xb9, 0x30, 0xb4, 0x84, 0x89, 0xe9,
	0x2e, 0xd1, 0xb8, 0x3a, 0x00, 0x8b, 0x31, 0x31, 0x06, 0xdd, 0xc9, 0xd1, 0x2b, 0x67, 0x23, 0xdc,
	0xd3, 0xd0, 0xc2, 0x97, 0x70, 0xe1, 0x43, 0xb8, 0xf9, 0x45, 0x18, 0x19, 0x9d, 0x4e, 0x73, 0x7c,
	0x0b, 0x27, 0x43, 0x8f, 0x4b, 0xee, 0x8c, 0x93, 0x6e, 0xcf, 0xd3, 0xdf, 0xd3, 0x7f, 0x7f, 0x7d,
	0x30, 0x85, 0x18, 0xb4, 0xaf, 0xe6, 0xb0, 0x94, 0x5a, 0x42, 0x2c, 0xe6, 0x7e, 0xa0, 0x95, 0xe0,
	0x46, 0x7b, 0x6a, 0x0e, 0x06, 0x48, 0x73, 0xc7, 0xbd, 0x02, 0x6f, 0x9d, 0x46, 0x10, 0x81, 0x85,
	0xfe, 0xae, 0xca, 0xe6, 0x5a, 0x2c, 0x02, 0x88, 0xa6, 0xc2, 0xb7, 0xdd, 0x78, 0x31, 0xf1, 0x8d,
	0x9c, 0x09, 0x6d, 0x82, 0x99, 0xca, 0x06, 0x3a, 0xaf, 0x08, 0x1f, 0x0d, 0xc4, 0x52, 0x72, 0xd1,
	0x87, 0x78, 0x22, 0x23, 0x72, 0x8b, 0x89, 0x92, 0x4a, 0x4c, 0x65, 0x2c, 0x46, 0xdc, 0x1e, 0x8d,
	0x64, 0xe8, 0xa2, 0x36, 0xea, 0xd6, 0x7b, 0xed, 0x34, 0x61, 0xcd, 0xbb, 0x3d, 0xcd, 0xe6, 0xaf,
	0x07, 0x9f, 0x09, 0xab, 0xe5, 0xf5, 0xb0, 0xa9, 0xca, 0x34, 0x24, 0x37, 0xf8, 0x98, 0x3f, 0x06,
	0x5a, 0x4b, 0x5d, 0x88, 0xab, 0xd8, 0x38, 0x96, 0x26, 0xac, 0xd1, 0xcf, 0xe0, 0x8f, 0x69, 0x0d,
	0x5e, 0x82, 0x61, 0xe7, 0x05, 0xe1, 0x93, 0xf2, 0xfb, 0xf7, 0x26, 0x30, 0x82, 0x5c, 0xe2, 0xfa,
	0x77, 0x57, 0x37, 0x2d, 0x24, 0x95, 0x52, 0x6b, 0x3c, 0x77, 0x3b, 0xc3, 0x55, 0x0e, 0xf0, 0x24,
	0x85, 0x15, 0xfa, 0x3f, 0xdc, 0x77, 0xe4, 0x0a, 0x1f, 0x2c, 0x54, 0x18, 0x18, 0x11, 0xba, 0xff,
	0xda, 0xa8, 0x7b, 0x78, 0xde, 0xf2, 0xb2, 0x3d, 0x7a, 0xf9, 0x1e, 0xbd, 0x87, 0x7c, 0x8f, 0xbd,
	0xda, 0x3a, 0x61, 0xce, 0xea, 0x9d, 0xa1, 0x61, 0x7e, 0xa9, 0xf3, 0x8c, 0x30, 0x29, 0xfd, 0xeb,
	0x4f, 0x96, 0x05, 0x9b, 0xca, 0x2f, 0x6c, 0x7a, 0xee, 0x3a, 0xa5, 0x68, 0x93, 0x52, 0xf4, 0x91,
	0x52, 0xb4, 0xda, 0x52, 0x67, 0xb3, 0xa5, 0xce, 0xdb, 0x96, 0x3a, 0xe3, 0xaa, 0x0d, 0xb8, 0xf8,
	0x0a, 0x00, 0x00, 0xff, 0xff, 0xed, 0x27, 0x1f, 0xa5, 0x6e, 0x02, 0x00, 0x00,
}

func (m *DeviceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChassisConfigID) > 0 {
		i -= len(m.ChassisConfigID)
		copy(dAtA[i:], m.ChassisConfigID)
		i = encodeVarintAspects(dAtA, i, uint64(len(m.ChassisConfigID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PipelineConfigID) > 0 {
		i -= len(m.PipelineConfigID)
		copy(dAtA[i:], m.PipelineConfigID)
		i = encodeVarintAspects(dAtA, i, uint64(len(m.PipelineConfigID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PipelineConfigState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipelineConfigState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PipelineConfigState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Updated, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintAspects(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if m.Cookie != 0 {
		i = encodeVarintAspects(dAtA, i, uint64(m.Cookie))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ConfigID) > 0 {
		i -= len(m.ConfigID)
		copy(dAtA[i:], m.ConfigID)
		i = encodeVarintAspects(dAtA, i, uint64(len(m.ConfigID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChassisConfigState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChassisConfigState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChassisConfigState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Updated, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintAspects(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if len(m.ConfigID) > 0 {
		i -= len(m.ConfigID)
		copy(dAtA[i:], m.ConfigID)
		i = encodeVarintAspects(dAtA, i, uint64(len(m.ConfigID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAspects(dAtA []byte, offset int, v uint64) int {
	offset -= sovAspects(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeviceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PipelineConfigID)
	if l > 0 {
		n += 1 + l + sovAspects(uint64(l))
	}
	l = len(m.ChassisConfigID)
	if l > 0 {
		n += 1 + l + sovAspects(uint64(l))
	}
	return n
}

func (m *PipelineConfigState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConfigID)
	if l > 0 {
		n += 1 + l + sovAspects(uint64(l))
	}
	if m.Cookie != 0 {
		n += 1 + sovAspects(uint64(m.Cookie))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated)
	n += 1 + l + sovAspects(uint64(l))
	return n
}

func (m *ChassisConfigState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConfigID)
	if l > 0 {
		n += 1 + l + sovAspects(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated)
	n += 1 + l + sovAspects(uint64(l))
	return n
}

func sovAspects(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAspects(x uint64) (n int) {
	return sovAspects(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeviceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAspects
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PipelineConfigID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAspects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAspects
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAspects
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PipelineConfigID = ConfigID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChassisConfigID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAspects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAspects
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAspects
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChassisConfigID = ConfigID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAspects(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAspects
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PipelineConfigState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAspects
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipelineConfigState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipelineConfigState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAspects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAspects
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAspects
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigID = ConfigID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			m.Cookie = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAspects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cookie |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAspects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAspects
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAspects
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Updated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAspects(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAspects
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChassisConfigState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAspects
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChassisConfigState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChassisConfigState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAspects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAspects
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAspects
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigID = ConfigID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAspects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAspects
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAspects
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Updated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAspects(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAspects
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAspects(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAspects
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAspects
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAspects
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAspects
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAspects
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAspects
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAspects        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAspects          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAspects = fmt.Errorf("proto: unexpected end of group")
)
