// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/ccc/ccc.proto

package ccc

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// enumerated from e2sm_ccc.asn1:141
type ResourceType int32

const (
	ResourceType_RESOURCE_TYPE_PRB_UL ResourceType = 0
	ResourceType_RESOURCE_TYPE_PRB_DL ResourceType = 1
	ResourceType_RESOURCE_TYPE_DRB    ResourceType = 2
	ResourceType_RESOURCE_TYPE_RRC    ResourceType = 3
)

var ResourceType_name = map[int32]string{
	0: "RESOURCE_TYPE_PRB_UL",
	1: "RESOURCE_TYPE_PRB_DL",
	2: "RESOURCE_TYPE_DRB",
	3: "RESOURCE_TYPE_RRC",
}

var ResourceType_value = map[string]int32{
	"RESOURCE_TYPE_PRB_UL": 0,
	"RESOURCE_TYPE_PRB_DL": 1,
	"RESOURCE_TYPE_DRB":    2,
	"RESOURCE_TYPE_RRC":    3,
}

func (x ResourceType) String() string {
	return proto.EnumName(ResourceType_name, int32(x))
}

func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_99b4db736b908a6a, []int{0}
}

// enumerated from e2sm_ccc.asn1:143
type SchedulerType int32

const (
	SchedulerType_SCHEDULER_TYPE_ROUND_ROBIN         SchedulerType = 0
	SchedulerType_SCHEDULER_TYPE_PROPORTIONALLY_FAIR SchedulerType = 1
	SchedulerType_SCHEDULER_TYPE_QOS_BASED           SchedulerType = 2
)

var SchedulerType_name = map[int32]string{
	0: "SCHEDULER_TYPE_ROUND_ROBIN",
	1: "SCHEDULER_TYPE_PROPORTIONALLY_FAIR",
	2: "SCHEDULER_TYPE_QOS_BASED",
}

var SchedulerType_value = map[string]int32{
	"SCHEDULER_TYPE_ROUND_ROBIN":         0,
	"SCHEDULER_TYPE_PROPORTIONALLY_FAIR": 1,
	"SCHEDULER_TYPE_QOS_BASED":           2,
}

func (x SchedulerType) String() string {
	return proto.EnumName(SchedulerType_name, int32(x))
}

func (SchedulerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_99b4db736b908a6a, []int{1}
}

// range of Integer from e2sm_common_ies.asn1:444
type Plmnidentity struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Plmnidentity) Reset()         { *m = Plmnidentity{} }
func (m *Plmnidentity) String() string { return proto.CompactTextString(m) }
func (*Plmnidentity) ProtoMessage()    {}
func (*Plmnidentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_99b4db736b908a6a, []int{0}
}
func (m *Plmnidentity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Plmnidentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Plmnidentity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Plmnidentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plmnidentity.Merge(m, src)
}
func (m *Plmnidentity) XXX_Size() int {
	return m.Size()
}
func (m *Plmnidentity) XXX_DiscardUnknown() {
	xxx_messageInfo_Plmnidentity.DiscardUnknown(m)
}

var xxx_messageInfo_Plmnidentity proto.InternalMessageInfo

func (m *Plmnidentity) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// range of Integer from e2sm_common_ies.asn1:450
type Sd struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Sd) Reset()         { *m = Sd{} }
func (m *Sd) String() string { return proto.CompactTextString(m) }
func (*Sd) ProtoMessage()    {}
func (*Sd) Descriptor() ([]byte, []int) {
	return fileDescriptor_99b4db736b908a6a, []int{1}
}
func (m *Sd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sd.Merge(m, src)
}
func (m *Sd) XXX_Size() int {
	return m.Size()
}
func (m *Sd) XXX_DiscardUnknown() {
	xxx_messageInfo_Sd.DiscardUnknown(m)
}

var xxx_messageInfo_Sd proto.InternalMessageInfo

func (m *Sd) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// sequence from e2sm_common_ies.asn1:454
type SNSsai struct {
	Sst *Sst `protobuf:"bytes,1,opt,name=sst,proto3" json:"sst,omitempty"`
	Sd  *Sd  `protobuf:"bytes,2,opt,name=sd,proto3" json:"sd,omitempty"`
}

func (m *SNSsai) Reset()         { *m = SNSsai{} }
func (m *SNSsai) String() string { return proto.CompactTextString(m) }
func (*SNSsai) ProtoMessage()    {}
func (*SNSsai) Descriptor() ([]byte, []int) {
	return fileDescriptor_99b4db736b908a6a, []int{2}
}
func (m *SNSsai) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SNSsai) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SNSsai.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SNSsai) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SNSsai.Merge(m, src)
}
func (m *SNSsai) XXX_Size() int {
	return m.Size()
}
func (m *SNSsai) XXX_DiscardUnknown() {
	xxx_messageInfo_SNSsai.DiscardUnknown(m)
}

var xxx_messageInfo_SNSsai proto.InternalMessageInfo

func (m *SNSsai) GetSst() *Sst {
	if m != nil {
		return m.Sst
	}
	return nil
}

func (m *SNSsai) GetSd() *Sd {
	if m != nil {
		return m.Sd
	}
	return nil
}

// range of Integer from e2sm_common_ies.asn1:460
type Sst struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Sst) Reset()         { *m = Sst{} }
func (m *Sst) String() string { return proto.CompactTextString(m) }
func (*Sst) ProtoMessage()    {}
func (*Sst) Descriptor() ([]byte, []int) {
	return fileDescriptor_99b4db736b908a6a, []int{3}
}
func (m *Sst) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sst) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sst.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sst) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sst.Merge(m, src)
}
func (m *Sst) XXX_Size() int {
	return m.Size()
}
func (m *Sst) XXX_DiscardUnknown() {
	xxx_messageInfo_Sst.DiscardUnknown(m)
}

var xxx_messageInfo_Sst proto.InternalMessageInfo

func (m *Sst) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// sequence from e2sm_ccc.asn1:161
type RrmPolicyMember struct {
	PlmnId *Plmnidentity `protobuf:"bytes,1,opt,name=plmn_id,json=plmnId,proto3" json:"plmn_id,omitempty"`
	Snssai *SNSsai       `protobuf:"bytes,2,opt,name=snssai,proto3" json:"snssai,omitempty"`
}

func (m *RrmPolicyMember) Reset()         { *m = RrmPolicyMember{} }
func (m *RrmPolicyMember) String() string { return proto.CompactTextString(m) }
func (*RrmPolicyMember) ProtoMessage()    {}
func (*RrmPolicyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_99b4db736b908a6a, []int{4}
}
func (m *RrmPolicyMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RrmPolicyMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RrmPolicyMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RrmPolicyMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RrmPolicyMember.Merge(m, src)
}
func (m *RrmPolicyMember) XXX_Size() int {
	return m.Size()
}
func (m *RrmPolicyMember) XXX_DiscardUnknown() {
	xxx_messageInfo_RrmPolicyMember.DiscardUnknown(m)
}

var xxx_messageInfo_RrmPolicyMember proto.InternalMessageInfo

func (m *RrmPolicyMember) GetPlmnId() *Plmnidentity {
	if m != nil {
		return m.PlmnId
	}
	return nil
}

func (m *RrmPolicyMember) GetSnssai() *SNSsai {
	if m != nil {
		return m.Snssai
	}
	return nil
}

// sequence from e2sm_ccc.asn1:167
type RrmPolicyMemberList struct {
	RrmPolicyMember []*RrmPolicyMember `protobuf:"bytes,1,rep,name=rrm_policy_member,json=rrmPolicyMember,proto3" json:"rrm_policy_member,omitempty"`
}

func (m *RrmPolicyMemberList) Reset()         { *m = RrmPolicyMemberList{} }
func (m *RrmPolicyMemberList) String() string { return proto.CompactTextString(m) }
func (*RrmPolicyMemberList) ProtoMessage()    {}
func (*RrmPolicyMemberList) Descriptor() ([]byte, []int) {
	return fileDescriptor_99b4db736b908a6a, []int{5}
}
func (m *RrmPolicyMemberList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RrmPolicyMemberList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RrmPolicyMemberList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RrmPolicyMemberList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RrmPolicyMemberList.Merge(m, src)
}
func (m *RrmPolicyMemberList) XXX_Size() int {
	return m.Size()
}
func (m *RrmPolicyMemberList) XXX_DiscardUnknown() {
	xxx_messageInfo_RrmPolicyMemberList.DiscardUnknown(m)
}

var xxx_messageInfo_RrmPolicyMemberList proto.InternalMessageInfo

func (m *RrmPolicyMemberList) GetRrmPolicyMember() []*RrmPolicyMember {
	if m != nil {
		return m.RrmPolicyMember
	}
	return nil
}

// sequence from e2sm_ccc.asn1:229
// {O-RRMPolicyRatio}
type ORRmpolicyRatio struct {
	ResourceType            ResourceType         `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=onos.ccc.ResourceType" json:"resource_type,omitempty"`
	SchedulerType           SchedulerType        `protobuf:"varint,2,opt,name=scheduler_type,json=schedulerType,proto3,enum=onos.ccc.SchedulerType" json:"scheduler_type,omitempty"`
	RrmPolicyMemberList     *RrmPolicyMemberList `protobuf:"bytes,3,opt,name=rrm_policy_member_list,json=rrmPolicyMemberList,proto3" json:"rrm_policy_member_list,omitempty"`
	RrmPolicyMaxRatio       int32                `protobuf:"varint,4,opt,name=rrm_policy_max_ratio,json=rrmPolicyMaxRatio,proto3" json:"rrm_policy_max_ratio,omitempty"`
	RrmPolicyMinRatio       int32                `protobuf:"varint,5,opt,name=rrm_policy_min_ratio,json=rrmPolicyMinRatio,proto3" json:"rrm_policy_min_ratio,omitempty"`
	RrmPolicyDedicatedRatio int32                `protobuf:"varint,6,opt,name=rrm_policy_dedicated_ratio,json=rrmPolicyDedicatedRatio,proto3" json:"rrm_policy_dedicated_ratio,omitempty"`
}

func (m *ORRmpolicyRatio) Reset()         { *m = ORRmpolicyRatio{} }
func (m *ORRmpolicyRatio) String() string { return proto.CompactTextString(m) }
func (*ORRmpolicyRatio) ProtoMessage()    {}
func (*ORRmpolicyRatio) Descriptor() ([]byte, []int) {
	return fileDescriptor_99b4db736b908a6a, []int{6}
}
func (m *ORRmpolicyRatio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ORRmpolicyRatio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ORRmpolicyRatio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ORRmpolicyRatio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ORRmpolicyRatio.Merge(m, src)
}
func (m *ORRmpolicyRatio) XXX_Size() int {
	return m.Size()
}
func (m *ORRmpolicyRatio) XXX_DiscardUnknown() {
	xxx_messageInfo_ORRmpolicyRatio.DiscardUnknown(m)
}

var xxx_messageInfo_ORRmpolicyRatio proto.InternalMessageInfo

func (m *ORRmpolicyRatio) GetResourceType() ResourceType {
	if m != nil {
		return m.ResourceType
	}
	return ResourceType_RESOURCE_TYPE_PRB_UL
}

func (m *ORRmpolicyRatio) GetSchedulerType() SchedulerType {
	if m != nil {
		return m.SchedulerType
	}
	return SchedulerType_SCHEDULER_TYPE_ROUND_ROBIN
}

func (m *ORRmpolicyRatio) GetRrmPolicyMemberList() *RrmPolicyMemberList {
	if m != nil {
		return m.RrmPolicyMemberList
	}
	return nil
}

func (m *ORRmpolicyRatio) GetRrmPolicyMaxRatio() int32 {
	if m != nil {
		return m.RrmPolicyMaxRatio
	}
	return 0
}

func (m *ORRmpolicyRatio) GetRrmPolicyMinRatio() int32 {
	if m != nil {
		return m.RrmPolicyMinRatio
	}
	return 0
}

func (m *ORRmpolicyRatio) GetRrmPolicyDedicatedRatio() int32 {
	if m != nil {
		return m.RrmPolicyDedicatedRatio
	}
	return 0
}

type Ack struct {
	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Cause   string `protobuf:"bytes,2,opt,name=cause,proto3" json:"cause,omitempty"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_99b4db736b908a6a, []int{7}
}
func (m *Ack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return m.Size()
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Ack) GetCause() string {
	if m != nil {
		return m.Cause
	}
	return ""
}

type UpdateSliceRequest struct {
	E2NodeId       string           `protobuf:"bytes,1,opt,name=e2_node_id,json=e2NodeId,proto3" json:"e2_node_id,omitempty"`
	RrmPolicyRatio *ORRmpolicyRatio `protobuf:"bytes,2,opt,name=rrm_policy_ratio,json=rrmPolicyRatio,proto3" json:"rrm_policy_ratio,omitempty"`
}

func (m *UpdateSliceRequest) Reset()         { *m = UpdateSliceRequest{} }
func (m *UpdateSliceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSliceRequest) ProtoMessage()    {}
func (*UpdateSliceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99b4db736b908a6a, []int{8}
}
func (m *UpdateSliceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSliceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSliceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSliceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSliceRequest.Merge(m, src)
}
func (m *UpdateSliceRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSliceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSliceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSliceRequest proto.InternalMessageInfo

func (m *UpdateSliceRequest) GetE2NodeId() string {
	if m != nil {
		return m.E2NodeId
	}
	return ""
}

func (m *UpdateSliceRequest) GetRrmPolicyRatio() *ORRmpolicyRatio {
	if m != nil {
		return m.RrmPolicyRatio
	}
	return nil
}

type UpdateSliceResponse struct {
	Ack *Ack `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (m *UpdateSliceResponse) Reset()         { *m = UpdateSliceResponse{} }
func (m *UpdateSliceResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateSliceResponse) ProtoMessage()    {}
func (*UpdateSliceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99b4db736b908a6a, []int{9}
}
func (m *UpdateSliceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSliceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSliceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSliceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSliceResponse.Merge(m, src)
}
func (m *UpdateSliceResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSliceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSliceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSliceResponse proto.InternalMessageInfo

func (m *UpdateSliceResponse) GetAck() *Ack {
	if m != nil {
		return m.Ack
	}
	return nil
}

func init() {
	proto.RegisterEnum("onos.ccc.ResourceType", ResourceType_name, ResourceType_value)
	proto.RegisterEnum("onos.ccc.SchedulerType", SchedulerType_name, SchedulerType_value)
	proto.RegisterType((*Plmnidentity)(nil), "onos.ccc.Plmnidentity")
	proto.RegisterType((*Sd)(nil), "onos.ccc.Sd")
	proto.RegisterType((*SNSsai)(nil), "onos.ccc.SNSsai")
	proto.RegisterType((*Sst)(nil), "onos.ccc.Sst")
	proto.RegisterType((*RrmPolicyMember)(nil), "onos.ccc.RrmPolicyMember")
	proto.RegisterType((*RrmPolicyMemberList)(nil), "onos.ccc.RrmPolicyMemberList")
	proto.RegisterType((*ORRmpolicyRatio)(nil), "onos.ccc.ORRmpolicyRatio")
	proto.RegisterType((*Ack)(nil), "onos.ccc.Ack")
	proto.RegisterType((*UpdateSliceRequest)(nil), "onos.ccc.UpdateSliceRequest")
	proto.RegisterType((*UpdateSliceResponse)(nil), "onos.ccc.UpdateSliceResponse")
}

func init() { proto.RegisterFile("onos/ccc/ccc.proto", fileDescriptor_99b4db736b908a6a) }

var fileDescriptor_99b4db736b908a6a = []byte{
	// 681 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0x63, 0x9a, 0xb6, 0xd3, 0xa4, 0x75, 0xb7, 0xa5, 0x35, 0xa1, 0x0d, 0x95, 0x85, 0x50,
	0xd4, 0x43, 0x2a, 0x05, 0xc1, 0x05, 0x09, 0x29, 0x5f, 0x40, 0x50, 0x88, 0xd3, 0x71, 0x73, 0xa8,
	0x84, 0x64, 0xb9, 0xbb, 0x2b, 0x61, 0xd5, 0xb1, 0x8d, 0xd7, 0x81, 0xe6, 0xc8, 0x3f, 0xe0, 0x67,
	0x71, 0xec, 0x91, 0x23, 0x6a, 0xff, 0x08, 0xb2, 0x9d, 0x34, 0x8e, 0xd3, 0x1c, 0x72, 0x98, 0x7d,
	0xfb, 0x66, 0xe6, 0xbd, 0xbc, 0x35, 0x10, 0xcf, 0xf5, 0xc4, 0x19, 0xa5, 0x34, 0xfa, 0xd5, 0xfc,
	0xc0, 0x0b, 0x3d, 0xb2, 0x11, 0x9d, 0xd5, 0x28, 0xa5, 0xda, 0x4b, 0x28, 0x0e, 0x9c, 0x91, 0x6b,
	0x33, 0xee, 0x86, 0x76, 0x38, 0x21, 0xfb, 0xb0, 0xf6, 0xc3, 0x72, 0xc6, 0x5c, 0x95, 0x4e, 0xa4,
	0x6a, 0x11, 0x93, 0x42, 0x2b, 0x43, 0xde, 0x60, 0x2b, 0xb0, 0x8f, 0x50, 0x30, 0xfa, 0x86, 0xb0,
	0x6c, 0xf2, 0x02, 0x64, 0x21, 0xc2, 0x18, 0xdd, 0xaa, 0x97, 0x6a, 0xb3, 0x19, 0x35, 0x43, 0x84,
	0x18, 0x21, 0xe4, 0x08, 0xf2, 0x82, 0xa9, 0xf9, 0x18, 0x2f, 0xa6, 0x70, 0x86, 0x79, 0xc1, 0xb4,
	0xe7, 0x20, 0x1b, 0x22, 0x5c, 0x31, 0xc5, 0x81, 0x1d, 0x0c, 0x46, 0x03, 0xcf, 0xb1, 0xe9, 0xe4,
	0x0b, 0x1f, 0x5d, 0xf1, 0x80, 0x9c, 0xc1, 0xba, 0xef, 0x8c, 0x5c, 0xd3, 0x66, 0xd3, 0x91, 0x07,
	0xf3, 0x96, 0x69, 0x4d, 0x58, 0x88, 0xae, 0x75, 0x19, 0xa9, 0x42, 0x41, 0xb8, 0x42, 0x58, 0xf6,
	0x74, 0x05, 0x25, 0xb5, 0x42, 0xac, 0x00, 0xa7, 0xb8, 0xf6, 0x15, 0xf6, 0x32, 0xd3, 0x7a, 0xb6,
	0x08, 0x49, 0x07, 0x76, 0x83, 0x60, 0x64, 0xfa, 0xf1, 0xb9, 0x39, 0x8a, 0x01, 0x55, 0x3a, 0x91,
	0xab, 0x5b, 0xf5, 0x67, 0xf3, 0x5e, 0x19, 0x26, 0xee, 0x04, 0x8b, 0x07, 0xda, 0x2f, 0x19, 0x76,
	0x74, 0xc4, 0x51, 0xd2, 0x07, 0xad, 0xd0, 0xf6, 0xc8, 0x3b, 0x28, 0x05, 0x5c, 0x78, 0xe3, 0x80,
	0x72, 0x33, 0x9c, 0xf8, 0x89, 0xfa, 0xed, 0xb4, 0x24, 0x9c, 0xc2, 0x17, 0x13, 0x9f, 0x63, 0x31,
	0x48, 0x55, 0xe4, 0x3d, 0x6c, 0x0b, 0xfa, 0x8d, 0xb3, 0xb1, 0xc3, 0x83, 0x84, 0x9d, 0x8f, 0xd9,
	0x87, 0x29, 0x81, 0x33, 0x3c, 0xa6, 0x97, 0x44, 0xba, 0x24, 0x08, 0x07, 0x4b, 0xba, 0x4c, 0xc7,
	0x16, 0xa1, 0x2a, 0xc7, 0x46, 0x1d, 0xaf, 0x14, 0x17, 0xd9, 0x82, 0x7b, 0xc1, 0x23, 0x5e, 0x9d,
	0xc1, 0x7e, 0xba, 0xa7, 0x75, 0x63, 0x06, 0x91, 0x50, 0xf5, 0xc9, 0x89, 0x54, 0x5d, 0xc3, 0xdd,
	0x39, 0xc5, 0xba, 0x49, 0x1c, 0xc8, 0x10, 0x6c, 0x77, 0x4a, 0x58, 0xcb, 0x12, 0x6c, 0x77, 0x66,
	0x59, 0x39, 0x45, 0x60, 0x9c, 0xd9, 0xd4, 0x0a, 0x39, 0x9b, 0xd2, 0x0a, 0x31, 0xed, 0xf0, 0x81,
	0xd6, 0x9e, 0xe1, 0x31, 0x59, 0x7b, 0x03, 0x72, 0x83, 0x5e, 0x13, 0x15, 0xd6, 0xc5, 0x98, 0x52,
	0x2e, 0x44, 0x6c, 0xf8, 0x06, 0xce, 0xca, 0x28, 0x86, 0xd4, 0x1a, 0x8b, 0xc4, 0xca, 0x4d, 0x4c,
	0x0a, 0xed, 0x27, 0x90, 0xa1, 0xcf, 0xac, 0x90, 0x1b, 0x8e, 0x4d, 0x39, 0xf2, 0xef, 0x63, 0x1e,
	0xe7, 0x1a, 0x78, 0xdd, 0x74, 0x3d, 0xc6, 0x67, 0x61, 0xdc, 0xc4, 0x0d, 0x5e, 0xef, 0x7b, 0x8c,
	0x77, 0x19, 0x69, 0x81, 0x92, 0xda, 0x33, 0xd9, 0x2e, 0x09, 0x60, 0x2a, 0x34, 0x99, 0x3c, 0xe0,
	0xf6, 0xc3, 0xe2, 0xc9, 0xbe, 0x6f, 0x61, 0x6f, 0x61, 0xb0, 0xf0, 0x3d, 0x57, 0xf0, 0xe8, 0xc9,
	0x59, 0xf4, 0x7a, 0xf9, 0xc9, 0x35, 0xe8, 0x35, 0x46, 0xc8, 0xa9, 0x0f, 0xc5, 0x74, 0x70, 0x88,
	0x0a, 0xfb, 0xd8, 0x31, 0xf4, 0x21, 0xb6, 0x3a, 0xe6, 0xc5, 0xe5, 0xa0, 0x63, 0x0e, 0xb0, 0x69,
	0x0e, 0x7b, 0x4a, 0xee, 0x71, 0xa4, 0xdd, 0x53, 0x24, 0xf2, 0x14, 0x76, 0x17, 0x91, 0x36, 0x36,
	0x95, 0xfc, 0xf2, 0x31, 0x62, 0x4b, 0x91, 0x4f, 0xc7, 0x50, 0x5a, 0x08, 0x1b, 0xa9, 0x40, 0xd9,
	0x68, 0x7d, 0xea, 0xb4, 0x87, 0xbd, 0x0e, 0x4e, 0x2f, 0xea, 0xc3, 0x7e, 0xdb, 0x44, 0xbd, 0xd9,
	0xed, 0x2b, 0x39, 0xf2, 0x0a, 0xb4, 0x0c, 0x3e, 0x40, 0x7d, 0xa0, 0xe3, 0x45, 0x57, 0xef, 0x37,
	0x7a, 0xbd, 0x4b, 0xf3, 0x43, 0xa3, 0x8b, 0x8a, 0x44, 0x8e, 0x40, 0xcd, 0xdc, 0x3b, 0xd7, 0x0d,
	0xb3, 0xd9, 0x30, 0x3a, 0x6d, 0x25, 0x5f, 0x3f, 0x07, 0xb9, 0x45, 0x29, 0xf9, 0x0c, 0x5b, 0x29,
	0x9f, 0xc8, 0xd1, 0xdc, 0x92, 0xe5, 0xff, 0xad, 0x7c, 0xbc, 0x02, 0x4d, 0xcc, 0x6d, 0xaa, 0x7f,
	0xee, 0x2a, 0xd2, 0xed, 0x5d, 0x45, 0xfa, 0x77, 0x57, 0x91, 0x7e, 0xdf, 0x57, 0x72, 0xb7, 0xf7,
	0x95, 0xdc, 0xdf, 0xfb, 0x4a, 0xee, 0xaa, 0x10, 0x7f, 0x46, 0x5f, 0xff, 0x0f, 0x00, 0x00, 0xff,
	0xff, 0x48, 0x1b, 0xa2, 0x0c, 0x5c, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CccClient is the client API for Ccc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CccClient interface {
	// Slice management
	UpdateSlice(ctx context.Context, in *UpdateSliceRequest, opts ...grpc.CallOption) (*UpdateSliceResponse, error)
}

type cccClient struct {
	cc *grpc.ClientConn
}

func NewCccClient(cc *grpc.ClientConn) CccClient {
	return &cccClient{cc}
}

func (c *cccClient) UpdateSlice(ctx context.Context, in *UpdateSliceRequest, opts ...grpc.CallOption) (*UpdateSliceResponse, error) {
	out := new(UpdateSliceResponse)
	err := c.cc.Invoke(ctx, "/onos.ccc.Ccc/UpdateSlice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CccServer is the server API for Ccc service.
type CccServer interface {
	// Slice management
	UpdateSlice(context.Context, *UpdateSliceRequest) (*UpdateSliceResponse, error)
}

// UnimplementedCccServer can be embedded to have forward compatible implementations.
type UnimplementedCccServer struct {
}

func (*UnimplementedCccServer) UpdateSlice(ctx context.Context, req *UpdateSliceRequest) (*UpdateSliceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSlice not implemented")
}

func RegisterCccServer(s *grpc.Server, srv CccServer) {
	s.RegisterService(&_Ccc_serviceDesc, srv)
}

func _Ccc_UpdateSlice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSliceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CccServer).UpdateSlice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.ccc.Ccc/UpdateSlice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CccServer).UpdateSlice(ctx, req.(*UpdateSliceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ccc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.ccc.Ccc",
	HandlerType: (*CccServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateSlice",
			Handler:    _Ccc_UpdateSlice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onos/ccc/ccc.proto",
}

func (m *Plmnidentity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Plmnidentity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Plmnidentity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCcc(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Sd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCcc(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SNSsai) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SNSsai) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SNSsai) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sd != nil {
		{
			size, err := m.Sd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Sst != nil {
		{
			size, err := m.Sst.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Sst) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sst) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sst) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCcc(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RrmPolicyMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RrmPolicyMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RrmPolicyMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Snssai != nil {
		{
			size, err := m.Snssai.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PlmnId != nil {
		{
			size, err := m.PlmnId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RrmPolicyMemberList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RrmPolicyMemberList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RrmPolicyMemberList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RrmPolicyMember) > 0 {
		for iNdEx := len(m.RrmPolicyMember) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RrmPolicyMember[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCcc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ORRmpolicyRatio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ORRmpolicyRatio) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ORRmpolicyRatio) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RrmPolicyDedicatedRatio != 0 {
		i = encodeVarintCcc(dAtA, i, uint64(m.RrmPolicyDedicatedRatio))
		i--
		dAtA[i] = 0x30
	}
	if m.RrmPolicyMinRatio != 0 {
		i = encodeVarintCcc(dAtA, i, uint64(m.RrmPolicyMinRatio))
		i--
		dAtA[i] = 0x28
	}
	if m.RrmPolicyMaxRatio != 0 {
		i = encodeVarintCcc(dAtA, i, uint64(m.RrmPolicyMaxRatio))
		i--
		dAtA[i] = 0x20
	}
	if m.RrmPolicyMemberList != nil {
		{
			size, err := m.RrmPolicyMemberList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SchedulerType != 0 {
		i = encodeVarintCcc(dAtA, i, uint64(m.SchedulerType))
		i--
		dAtA[i] = 0x10
	}
	if m.ResourceType != 0 {
		i = encodeVarintCcc(dAtA, i, uint64(m.ResourceType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Ack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cause) > 0 {
		i -= len(m.Cause)
		copy(dAtA[i:], m.Cause)
		i = encodeVarintCcc(dAtA, i, uint64(len(m.Cause)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSliceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSliceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSliceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RrmPolicyRatio != nil {
		{
			size, err := m.RrmPolicyRatio.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.E2NodeId) > 0 {
		i -= len(m.E2NodeId)
		copy(dAtA[i:], m.E2NodeId)
		i = encodeVarintCcc(dAtA, i, uint64(len(m.E2NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSliceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSliceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSliceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ack != nil {
		{
			size, err := m.Ack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCcc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCcc(dAtA []byte, offset int, v uint64) int {
	offset -= sovCcc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Plmnidentity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCcc(uint64(l))
	}
	return n
}

func (m *Sd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCcc(uint64(l))
	}
	return n
}

func (m *SNSsai) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sst != nil {
		l = m.Sst.Size()
		n += 1 + l + sovCcc(uint64(l))
	}
	if m.Sd != nil {
		l = m.Sd.Size()
		n += 1 + l + sovCcc(uint64(l))
	}
	return n
}

func (m *Sst) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCcc(uint64(l))
	}
	return n
}

func (m *RrmPolicyMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlmnId != nil {
		l = m.PlmnId.Size()
		n += 1 + l + sovCcc(uint64(l))
	}
	if m.Snssai != nil {
		l = m.Snssai.Size()
		n += 1 + l + sovCcc(uint64(l))
	}
	return n
}

func (m *RrmPolicyMemberList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RrmPolicyMember) > 0 {
		for _, e := range m.RrmPolicyMember {
			l = e.Size()
			n += 1 + l + sovCcc(uint64(l))
		}
	}
	return n
}

func (m *ORRmpolicyRatio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceType != 0 {
		n += 1 + sovCcc(uint64(m.ResourceType))
	}
	if m.SchedulerType != 0 {
		n += 1 + sovCcc(uint64(m.SchedulerType))
	}
	if m.RrmPolicyMemberList != nil {
		l = m.RrmPolicyMemberList.Size()
		n += 1 + l + sovCcc(uint64(l))
	}
	if m.RrmPolicyMaxRatio != 0 {
		n += 1 + sovCcc(uint64(m.RrmPolicyMaxRatio))
	}
	if m.RrmPolicyMinRatio != 0 {
		n += 1 + sovCcc(uint64(m.RrmPolicyMinRatio))
	}
	if m.RrmPolicyDedicatedRatio != 0 {
		n += 1 + sovCcc(uint64(m.RrmPolicyDedicatedRatio))
	}
	return n
}

func (m *Ack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Cause)
	if l > 0 {
		n += 1 + l + sovCcc(uint64(l))
	}
	return n
}

func (m *UpdateSliceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.E2NodeId)
	if l > 0 {
		n += 1 + l + sovCcc(uint64(l))
	}
	if m.RrmPolicyRatio != nil {
		l = m.RrmPolicyRatio.Size()
		n += 1 + l + sovCcc(uint64(l))
	}
	return n
}

func (m *UpdateSliceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ack != nil {
		l = m.Ack.Size()
		n += 1 + l + sovCcc(uint64(l))
	}
	return n
}

func sovCcc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCcc(x uint64) (n int) {
	return sovCcc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Plmnidentity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Plmnidentity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Plmnidentity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCcc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCcc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SNSsai) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SNSsai: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SNSsai: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sst == nil {
				m.Sst = &Sst{}
			}
			if err := m.Sst.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sd == nil {
				m.Sd = &Sd{}
			}
			if err := m.Sd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sst) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sst: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sst: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCcc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RrmPolicyMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RrmPolicyMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RrmPolicyMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlmnId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlmnId == nil {
				m.PlmnId = &Plmnidentity{}
			}
			if err := m.PlmnId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snssai", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snssai == nil {
				m.Snssai = &SNSsai{}
			}
			if err := m.Snssai.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RrmPolicyMemberList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RrmPolicyMemberList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RrmPolicyMemberList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RrmPolicyMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RrmPolicyMember = append(m.RrmPolicyMember, &RrmPolicyMember{})
			if err := m.RrmPolicyMember[len(m.RrmPolicyMember)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ORRmpolicyRatio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ORRmpolicyRatio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ORRmpolicyRatio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			m.ResourceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceType |= ResourceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerType", wireType)
			}
			m.SchedulerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchedulerType |= SchedulerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RrmPolicyMemberList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RrmPolicyMemberList == nil {
				m.RrmPolicyMemberList = &RrmPolicyMemberList{}
			}
			if err := m.RrmPolicyMemberList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RrmPolicyMaxRatio", wireType)
			}
			m.RrmPolicyMaxRatio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RrmPolicyMaxRatio |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RrmPolicyMinRatio", wireType)
			}
			m.RrmPolicyMinRatio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RrmPolicyMinRatio |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RrmPolicyDedicatedRatio", wireType)
			}
			m.RrmPolicyDedicatedRatio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RrmPolicyDedicatedRatio |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cause = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSliceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSliceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSliceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E2NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCcc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E2NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RrmPolicyRatio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RrmPolicyRatio == nil {
				m.RrmPolicyRatio = &ORRmpolicyRatio{}
			}
			if err := m.RrmPolicyRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSliceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSliceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSliceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ack == nil {
				m.Ack = &Ack{}
			}
			if err := m.Ack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCcc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCcc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCcc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCcc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCcc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCcc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCcc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCcc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCcc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCcc = fmt.Errorf("proto: unexpected end of group")
)
