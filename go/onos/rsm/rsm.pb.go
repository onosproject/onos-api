// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/rsm/rsm.proto

package rsm

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SchedulerType int32

const (
	SchedulerType_SCHEDULER_TYPE_ROUND_ROBIN         SchedulerType = 0
	SchedulerType_SCHEDULER_TYPE_PROPORTIONALLY_FAIR SchedulerType = 1
	SchedulerType_SCHEDULER_TYPE_QOS_BASED           SchedulerType = 2
)

var SchedulerType_name = map[int32]string{
	0: "SCHEDULER_TYPE_ROUND_ROBIN",
	1: "SCHEDULER_TYPE_PROPORTIONALLY_FAIR",
	2: "SCHEDULER_TYPE_QOS_BASED",
}

var SchedulerType_value = map[string]int32{
	"SCHEDULER_TYPE_ROUND_ROBIN":         0,
	"SCHEDULER_TYPE_PROPORTIONALLY_FAIR": 1,
	"SCHEDULER_TYPE_QOS_BASED":           2,
}

func (x SchedulerType) String() string {
	return proto.EnumName(SchedulerType_name, int32(x))
}

func (SchedulerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a53e011a0fb63e56, []int{0}
}

type UeIdType int32

const (
	UeIdType_UE_ID_TYPE_CU_UE_F1_AP_ID  UeIdType = 0
	UeIdType_UE_ID_TYPE_DU_UE_F1_AP_ID  UeIdType = 1
	UeIdType_UE_ID_TYPE_RAN_UE_NGAP_ID  UeIdType = 2
	UeIdType_UE_ID_TYPE_AMF_UE_NGAP_ID  UeIdType = 3
	UeIdType_UE_ID_TYPE_ENB_UE_S1_AP_ID UeIdType = 4
)

var UeIdType_name = map[int32]string{
	0: "UE_ID_TYPE_CU_UE_F1_AP_ID",
	1: "UE_ID_TYPE_DU_UE_F1_AP_ID",
	2: "UE_ID_TYPE_RAN_UE_NGAP_ID",
	3: "UE_ID_TYPE_AMF_UE_NGAP_ID",
	4: "UE_ID_TYPE_ENB_UE_S1_AP_ID",
}

var UeIdType_value = map[string]int32{
	"UE_ID_TYPE_CU_UE_F1_AP_ID":  0,
	"UE_ID_TYPE_DU_UE_F1_AP_ID":  1,
	"UE_ID_TYPE_RAN_UE_NGAP_ID":  2,
	"UE_ID_TYPE_AMF_UE_NGAP_ID":  3,
	"UE_ID_TYPE_ENB_UE_S1_AP_ID": 4,
}

func (x UeIdType) String() string {
	return proto.EnumName(UeIdType_name, int32(x))
}

func (UeIdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a53e011a0fb63e56, []int{1}
}

type GetSlicesRequest struct {
	E2NodeId string `protobuf:"bytes,1,opt,name=e2_node_id,json=e2NodeId,proto3" json:"e2_node_id,omitempty"`
}

func (m *GetSlicesRequest) Reset()         { *m = GetSlicesRequest{} }
func (m *GetSlicesRequest) String() string { return proto.CompactTextString(m) }
func (*GetSlicesRequest) ProtoMessage()    {}
func (*GetSlicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53e011a0fb63e56, []int{0}
}
func (m *GetSlicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSlicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSlicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSlicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSlicesRequest.Merge(m, src)
}
func (m *GetSlicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSlicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSlicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSlicesRequest proto.InternalMessageInfo

func (m *GetSlicesRequest) GetE2NodeId() string {
	if m != nil {
		return m.E2NodeId
	}
	return ""
}

type GetSliceResponse struct {
	Ack        *Ack         `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
	SliceItems []*SliceItem `protobuf:"bytes,2,rep,name=slice_items,json=sliceItems,proto3" json:"slice_items,omitempty"`
}

func (m *GetSliceResponse) Reset()         { *m = GetSliceResponse{} }
func (m *GetSliceResponse) String() string { return proto.CompactTextString(m) }
func (*GetSliceResponse) ProtoMessage()    {}
func (*GetSliceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53e011a0fb63e56, []int{1}
}
func (m *GetSliceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSliceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSliceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSliceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSliceResponse.Merge(m, src)
}
func (m *GetSliceResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSliceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSliceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSliceResponse proto.InternalMessageInfo

func (m *GetSliceResponse) GetAck() *Ack {
	if m != nil {
		return m.Ack
	}
	return nil
}

func (m *GetSliceResponse) GetSliceItems() []*SliceItem {
	if m != nil {
		return m.SliceItems
	}
	return nil
}

type SliceItem struct {
	E2NodeId string   `protobuf:"bytes,1,opt,name=e2_node_id,json=e2NodeId,proto3" json:"e2_node_id,omitempty"`
	SliceIds []string `protobuf:"bytes,2,rep,name=slice_ids,json=sliceIds,proto3" json:"slice_ids,omitempty"`
}

func (m *SliceItem) Reset()         { *m = SliceItem{} }
func (m *SliceItem) String() string { return proto.CompactTextString(m) }
func (*SliceItem) ProtoMessage()    {}
func (*SliceItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53e011a0fb63e56, []int{2}
}
func (m *SliceItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SliceItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SliceItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SliceItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SliceItem.Merge(m, src)
}
func (m *SliceItem) XXX_Size() int {
	return m.Size()
}
func (m *SliceItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SliceItem.DiscardUnknown(m)
}

var xxx_messageInfo_SliceItem proto.InternalMessageInfo

func (m *SliceItem) GetE2NodeId() string {
	if m != nil {
		return m.E2NodeId
	}
	return ""
}

func (m *SliceItem) GetSliceIds() []string {
	if m != nil {
		return m.SliceIds
	}
	return nil
}

type Ack struct {
	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Cause   string `protobuf:"bytes,2,opt,name=cause,proto3" json:"cause,omitempty"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53e011a0fb63e56, []int{3}
}
func (m *Ack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return m.Size()
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Ack) GetCause() string {
	if m != nil {
		return m.Cause
	}
	return ""
}

type CreateSliceRequest struct {
	E2NodeId      string        `protobuf:"bytes,1,opt,name=e2_node_id,json=e2NodeId,proto3" json:"e2_node_id,omitempty"`
	SliceId       string        `protobuf:"bytes,2,opt,name=slice_id,json=sliceId,proto3" json:"slice_id,omitempty"`
	SchedulerType SchedulerType `protobuf:"varint,3,opt,name=scheduler_type,json=schedulerType,proto3,enum=onos.rsm.SchedulerType" json:"scheduler_type,omitempty"`
	Weight        string        `protobuf:"bytes,4,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *CreateSliceRequest) Reset()         { *m = CreateSliceRequest{} }
func (m *CreateSliceRequest) String() string { return proto.CompactTextString(m) }
func (*CreateSliceRequest) ProtoMessage()    {}
func (*CreateSliceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53e011a0fb63e56, []int{4}
}
func (m *CreateSliceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSliceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSliceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSliceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSliceRequest.Merge(m, src)
}
func (m *CreateSliceRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateSliceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSliceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSliceRequest proto.InternalMessageInfo

func (m *CreateSliceRequest) GetE2NodeId() string {
	if m != nil {
		return m.E2NodeId
	}
	return ""
}

func (m *CreateSliceRequest) GetSliceId() string {
	if m != nil {
		return m.SliceId
	}
	return ""
}

func (m *CreateSliceRequest) GetSchedulerType() SchedulerType {
	if m != nil {
		return m.SchedulerType
	}
	return SchedulerType_SCHEDULER_TYPE_ROUND_ROBIN
}

func (m *CreateSliceRequest) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

type CreateSliceResponse struct {
	Ack *Ack `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (m *CreateSliceResponse) Reset()         { *m = CreateSliceResponse{} }
func (m *CreateSliceResponse) String() string { return proto.CompactTextString(m) }
func (*CreateSliceResponse) ProtoMessage()    {}
func (*CreateSliceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53e011a0fb63e56, []int{5}
}
func (m *CreateSliceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSliceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSliceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSliceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSliceResponse.Merge(m, src)
}
func (m *CreateSliceResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateSliceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSliceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSliceResponse proto.InternalMessageInfo

func (m *CreateSliceResponse) GetAck() *Ack {
	if m != nil {
		return m.Ack
	}
	return nil
}

type UpdateSliceRequest struct {
	E2NodeId      string        `protobuf:"bytes,1,opt,name=e2_node_id,json=e2NodeId,proto3" json:"e2_node_id,omitempty"`
	SliceId       string        `protobuf:"bytes,2,opt,name=slice_id,json=sliceId,proto3" json:"slice_id,omitempty"`
	SchedulerType SchedulerType `protobuf:"varint,3,opt,name=scheduler_type,json=schedulerType,proto3,enum=onos.rsm.SchedulerType" json:"scheduler_type,omitempty"`
	Weight        string        `protobuf:"bytes,4,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *UpdateSliceRequest) Reset()         { *m = UpdateSliceRequest{} }
func (m *UpdateSliceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSliceRequest) ProtoMessage()    {}
func (*UpdateSliceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53e011a0fb63e56, []int{6}
}
func (m *UpdateSliceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSliceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSliceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSliceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSliceRequest.Merge(m, src)
}
func (m *UpdateSliceRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSliceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSliceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSliceRequest proto.InternalMessageInfo

func (m *UpdateSliceRequest) GetE2NodeId() string {
	if m != nil {
		return m.E2NodeId
	}
	return ""
}

func (m *UpdateSliceRequest) GetSliceId() string {
	if m != nil {
		return m.SliceId
	}
	return ""
}

func (m *UpdateSliceRequest) GetSchedulerType() SchedulerType {
	if m != nil {
		return m.SchedulerType
	}
	return SchedulerType_SCHEDULER_TYPE_ROUND_ROBIN
}

func (m *UpdateSliceRequest) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

type UpdateSliceResponse struct {
	Ack *Ack `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (m *UpdateSliceResponse) Reset()         { *m = UpdateSliceResponse{} }
func (m *UpdateSliceResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateSliceResponse) ProtoMessage()    {}
func (*UpdateSliceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53e011a0fb63e56, []int{7}
}
func (m *UpdateSliceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSliceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSliceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSliceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSliceResponse.Merge(m, src)
}
func (m *UpdateSliceResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSliceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSliceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSliceResponse proto.InternalMessageInfo

func (m *UpdateSliceResponse) GetAck() *Ack {
	if m != nil {
		return m.Ack
	}
	return nil
}

type DeleteSliceRequest struct {
	E2NodeId string `protobuf:"bytes,1,opt,name=e2_node_id,json=e2NodeId,proto3" json:"e2_node_id,omitempty"`
	SliceId  string `protobuf:"bytes,2,opt,name=slice_id,json=sliceId,proto3" json:"slice_id,omitempty"`
}

func (m *DeleteSliceRequest) Reset()         { *m = DeleteSliceRequest{} }
func (m *DeleteSliceRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteSliceRequest) ProtoMessage()    {}
func (*DeleteSliceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53e011a0fb63e56, []int{8}
}
func (m *DeleteSliceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteSliceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteSliceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteSliceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSliceRequest.Merge(m, src)
}
func (m *DeleteSliceRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteSliceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSliceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSliceRequest proto.InternalMessageInfo

func (m *DeleteSliceRequest) GetE2NodeId() string {
	if m != nil {
		return m.E2NodeId
	}
	return ""
}

func (m *DeleteSliceRequest) GetSliceId() string {
	if m != nil {
		return m.SliceId
	}
	return ""
}

type DeleteSliceResponse struct {
	Ack *Ack `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (m *DeleteSliceResponse) Reset()         { *m = DeleteSliceResponse{} }
func (m *DeleteSliceResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteSliceResponse) ProtoMessage()    {}
func (*DeleteSliceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53e011a0fb63e56, []int{9}
}
func (m *DeleteSliceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteSliceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteSliceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteSliceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSliceResponse.Merge(m, src)
}
func (m *DeleteSliceResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteSliceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSliceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSliceResponse proto.InternalMessageInfo

func (m *DeleteSliceResponse) GetAck() *Ack {
	if m != nil {
		return m.Ack
	}
	return nil
}

type GetUeSliceAssociationRequest struct {
	E2NodeId       string  `protobuf:"bytes,1,opt,name=e2_node_id,json=e2NodeId,proto3" json:"e2_node_id,omitempty"`
	UeId           []*UeId `protobuf:"bytes,2,rep,name=ue_id,json=ueId,proto3" json:"ue_id,omitempty"`
	SliceId        string  `protobuf:"bytes,3,opt,name=slice_id,json=sliceId,proto3" json:"slice_id,omitempty"`
	UeSliceAssocId string  `protobuf:"bytes,4,opt,name=ue_slice_assoc_id,json=ueSliceAssocId,proto3" json:"ue_slice_assoc_id,omitempty"`
}

func (m *GetUeSliceAssociationRequest) Reset()         { *m = GetUeSliceAssociationRequest{} }
func (m *GetUeSliceAssociationRequest) String() string { return proto.CompactTextString(m) }
func (*GetUeSliceAssociationRequest) ProtoMessage()    {}
func (*GetUeSliceAssociationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53e011a0fb63e56, []int{10}
}
func (m *GetUeSliceAssociationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUeSliceAssociationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUeSliceAssociationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUeSliceAssociationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUeSliceAssociationRequest.Merge(m, src)
}
func (m *GetUeSliceAssociationRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUeSliceAssociationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUeSliceAssociationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUeSliceAssociationRequest proto.InternalMessageInfo

func (m *GetUeSliceAssociationRequest) GetE2NodeId() string {
	if m != nil {
		return m.E2NodeId
	}
	return ""
}

func (m *GetUeSliceAssociationRequest) GetUeId() []*UeId {
	if m != nil {
		return m.UeId
	}
	return nil
}

func (m *GetUeSliceAssociationRequest) GetSliceId() string {
	if m != nil {
		return m.SliceId
	}
	return ""
}

func (m *GetUeSliceAssociationRequest) GetUeSliceAssocId() string {
	if m != nil {
		return m.UeSliceAssocId
	}
	return ""
}

type GetUeSliceAssociationResponse struct {
	Ack             *Ack              `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
	SliceAssocItems []*SliceAssocItem `protobuf:"bytes,2,rep,name=slice_assoc_items,json=sliceAssocItems,proto3" json:"slice_assoc_items,omitempty"`
}

func (m *GetUeSliceAssociationResponse) Reset()         { *m = GetUeSliceAssociationResponse{} }
func (m *GetUeSliceAssociationResponse) String() string { return proto.CompactTextString(m) }
func (*GetUeSliceAssociationResponse) ProtoMessage()    {}
func (*GetUeSliceAssociationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53e011a0fb63e56, []int{11}
}
func (m *GetUeSliceAssociationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUeSliceAssociationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUeSliceAssociationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUeSliceAssociationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUeSliceAssociationResponse.Merge(m, src)
}
func (m *GetUeSliceAssociationResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUeSliceAssociationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUeSliceAssociationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUeSliceAssociationResponse proto.InternalMessageInfo

func (m *GetUeSliceAssociationResponse) GetAck() *Ack {
	if m != nil {
		return m.Ack
	}
	return nil
}

func (m *GetUeSliceAssociationResponse) GetSliceAssocItems() []*SliceAssocItem {
	if m != nil {
		return m.SliceAssocItems
	}
	return nil
}

type SliceAssocItem struct {
	UeSliceAssocId string     `protobuf:"bytes,1,opt,name=ue_slice_assoc_id,json=ueSliceAssocId,proto3" json:"ue_slice_assoc_id,omitempty"`
	E2NodeId       string     `protobuf:"bytes,2,opt,name=e2_node_id,json=e2NodeId,proto3" json:"e2_node_id,omitempty"`
	UeId           []UeIdType `protobuf:"varint,3,rep,packed,name=ue_id,json=ueId,proto3,enum=onos.rsm.UeIdType" json:"ue_id,omitempty"`
	SliceId        string     `protobuf:"bytes,4,opt,name=slice_id,json=sliceId,proto3" json:"slice_id,omitempty"`
}

func (m *SliceAssocItem) Reset()         { *m = SliceAssocItem{} }
func (m *SliceAssocItem) String() string { return proto.CompactTextString(m) }
func (*SliceAssocItem) ProtoMessage()    {}
func (*SliceAssocItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53e011a0fb63e56, []int{12}
}
func (m *SliceAssocItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SliceAssocItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SliceAssocItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SliceAssocItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SliceAssocItem.Merge(m, src)
}
func (m *SliceAssocItem) XXX_Size() int {
	return m.Size()
}
func (m *SliceAssocItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SliceAssocItem.DiscardUnknown(m)
}

var xxx_messageInfo_SliceAssocItem proto.InternalMessageInfo

func (m *SliceAssocItem) GetUeSliceAssocId() string {
	if m != nil {
		return m.UeSliceAssocId
	}
	return ""
}

func (m *SliceAssocItem) GetE2NodeId() string {
	if m != nil {
		return m.E2NodeId
	}
	return ""
}

func (m *SliceAssocItem) GetUeId() []UeIdType {
	if m != nil {
		return m.UeId
	}
	return nil
}

func (m *SliceAssocItem) GetSliceId() string {
	if m != nil {
		return m.SliceId
	}
	return ""
}

type UeId struct {
	UeId string   `protobuf:"bytes,1,opt,name=ue_id,json=ueId,proto3" json:"ue_id,omitempty"`
	Type UeIdType `protobuf:"varint,2,opt,name=type,proto3,enum=onos.rsm.UeIdType" json:"type,omitempty"`
}

func (m *UeId) Reset()         { *m = UeId{} }
func (m *UeId) String() string { return proto.CompactTextString(m) }
func (*UeId) ProtoMessage()    {}
func (*UeId) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53e011a0fb63e56, []int{13}
}
func (m *UeId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UeId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UeId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UeId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UeId.Merge(m, src)
}
func (m *UeId) XXX_Size() int {
	return m.Size()
}
func (m *UeId) XXX_DiscardUnknown() {
	xxx_messageInfo_UeId.DiscardUnknown(m)
}

var xxx_messageInfo_UeId proto.InternalMessageInfo

func (m *UeId) GetUeId() string {
	if m != nil {
		return m.UeId
	}
	return ""
}

func (m *UeId) GetType() UeIdType {
	if m != nil {
		return m.Type
	}
	return UeIdType_UE_ID_TYPE_CU_UE_F1_AP_ID
}

type SetUeSliceAssociationRequest struct {
	E2NodeId string  `protobuf:"bytes,1,opt,name=e2_node_id,json=e2NodeId,proto3" json:"e2_node_id,omitempty"`
	UeId     []*UeId `protobuf:"bytes,2,rep,name=ue_id,json=ueId,proto3" json:"ue_id,omitempty"`
	SliceId  string  `protobuf:"bytes,3,opt,name=slice_id,json=sliceId,proto3" json:"slice_id,omitempty"`
}

func (m *SetUeSliceAssociationRequest) Reset()         { *m = SetUeSliceAssociationRequest{} }
func (m *SetUeSliceAssociationRequest) String() string { return proto.CompactTextString(m) }
func (*SetUeSliceAssociationRequest) ProtoMessage()    {}
func (*SetUeSliceAssociationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53e011a0fb63e56, []int{14}
}
func (m *SetUeSliceAssociationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetUeSliceAssociationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetUeSliceAssociationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetUeSliceAssociationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUeSliceAssociationRequest.Merge(m, src)
}
func (m *SetUeSliceAssociationRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetUeSliceAssociationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUeSliceAssociationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetUeSliceAssociationRequest proto.InternalMessageInfo

func (m *SetUeSliceAssociationRequest) GetE2NodeId() string {
	if m != nil {
		return m.E2NodeId
	}
	return ""
}

func (m *SetUeSliceAssociationRequest) GetUeId() []*UeId {
	if m != nil {
		return m.UeId
	}
	return nil
}

func (m *SetUeSliceAssociationRequest) GetSliceId() string {
	if m != nil {
		return m.SliceId
	}
	return ""
}

type SetUeSliceAssociationResponse struct {
	Ack                    *Ack   `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
	AssignedUeSliceAssocId string `protobuf:"bytes,2,opt,name=assigned_ue_slice_assoc_id,json=assignedUeSliceAssocId,proto3" json:"assigned_ue_slice_assoc_id,omitempty"`
}

func (m *SetUeSliceAssociationResponse) Reset()         { *m = SetUeSliceAssociationResponse{} }
func (m *SetUeSliceAssociationResponse) String() string { return proto.CompactTextString(m) }
func (*SetUeSliceAssociationResponse) ProtoMessage()    {}
func (*SetUeSliceAssociationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a53e011a0fb63e56, []int{15}
}
func (m *SetUeSliceAssociationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetUeSliceAssociationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetUeSliceAssociationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetUeSliceAssociationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUeSliceAssociationResponse.Merge(m, src)
}
func (m *SetUeSliceAssociationResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetUeSliceAssociationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUeSliceAssociationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetUeSliceAssociationResponse proto.InternalMessageInfo

func (m *SetUeSliceAssociationResponse) GetAck() *Ack {
	if m != nil {
		return m.Ack
	}
	return nil
}

func (m *SetUeSliceAssociationResponse) GetAssignedUeSliceAssocId() string {
	if m != nil {
		return m.AssignedUeSliceAssocId
	}
	return ""
}

func init() {
	proto.RegisterEnum("onos.rsm.SchedulerType", SchedulerType_name, SchedulerType_value)
	proto.RegisterEnum("onos.rsm.UeIdType", UeIdType_name, UeIdType_value)
	proto.RegisterType((*GetSlicesRequest)(nil), "onos.rsm.GetSlicesRequest")
	proto.RegisterType((*GetSliceResponse)(nil), "onos.rsm.GetSliceResponse")
	proto.RegisterType((*SliceItem)(nil), "onos.rsm.SliceItem")
	proto.RegisterType((*Ack)(nil), "onos.rsm.Ack")
	proto.RegisterType((*CreateSliceRequest)(nil), "onos.rsm.CreateSliceRequest")
	proto.RegisterType((*CreateSliceResponse)(nil), "onos.rsm.CreateSliceResponse")
	proto.RegisterType((*UpdateSliceRequest)(nil), "onos.rsm.UpdateSliceRequest")
	proto.RegisterType((*UpdateSliceResponse)(nil), "onos.rsm.UpdateSliceResponse")
	proto.RegisterType((*DeleteSliceRequest)(nil), "onos.rsm.DeleteSliceRequest")
	proto.RegisterType((*DeleteSliceResponse)(nil), "onos.rsm.DeleteSliceResponse")
	proto.RegisterType((*GetUeSliceAssociationRequest)(nil), "onos.rsm.GetUeSliceAssociationRequest")
	proto.RegisterType((*GetUeSliceAssociationResponse)(nil), "onos.rsm.GetUeSliceAssociationResponse")
	proto.RegisterType((*SliceAssocItem)(nil), "onos.rsm.SliceAssocItem")
	proto.RegisterType((*UeId)(nil), "onos.rsm.UeId")
	proto.RegisterType((*SetUeSliceAssociationRequest)(nil), "onos.rsm.SetUeSliceAssociationRequest")
	proto.RegisterType((*SetUeSliceAssociationResponse)(nil), "onos.rsm.SetUeSliceAssociationResponse")
}

func init() { proto.RegisterFile("onos/rsm/rsm.proto", fileDescriptor_a53e011a0fb63e56) }

var fileDescriptor_a53e011a0fb63e56 = []byte{
	// 805 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4f, 0x6f, 0xda, 0x58,
	0x10, 0xc7, 0x98, 0x24, 0x30, 0x28, 0x2c, 0x79, 0xd9, 0xcd, 0x3a, 0x2c, 0xb0, 0xc8, 0x2b, 0x25,
	0x6c, 0x0e, 0xec, 0x96, 0xfe, 0x39, 0xf4, 0x50, 0xc9, 0x60, 0x48, 0x1d, 0x25, 0x40, 0x9f, 0xe3,
	0x43, 0x4e, 0x4f, 0xd4, 0x7e, 0x4a, 0xac, 0x04, 0x4c, 0x79, 0xb6, 0xaa, 0x48, 0x39, 0xf5, 0xd0,
	0x73, 0xbf, 0x40, 0x8f, 0x6d, 0xbf, 0x4a, 0x8f, 0x39, 0xf6, 0x58, 0x25, 0x5f, 0xa4, 0xb2, 0x8d,
	0x83, 0x6d, 0x48, 0x82, 0xd4, 0x4a, 0x55, 0x0f, 0x48, 0x3c, 0x7e, 0xf3, 0x7e, 0xf3, 0x9b, 0x99,
	0x37, 0x33, 0x00, 0xb2, 0x86, 0x16, 0xfb, 0x6f, 0xcc, 0x06, 0xee, 0xa7, 0x36, 0x1a, 0x5b, 0xb6,
	0x85, 0xd2, 0xee, 0x6f, 0xb5, 0x31, 0x1b, 0x88, 0xff, 0x43, 0x7e, 0x97, 0xda, 0xea, 0x99, 0xa9,
	0x53, 0x86, 0xe9, 0x2b, 0x87, 0x32, 0x1b, 0x15, 0x01, 0x68, 0x9d, 0x0c, 0x2d, 0x83, 0x12, 0xd3,
	0x10, 0xb8, 0x0a, 0x57, 0xcd, 0xe0, 0x34, 0xad, 0x77, 0x2c, 0x83, 0x2a, 0x86, 0x68, 0x4e, 0x6f,
	0x60, 0xca, 0x46, 0xd6, 0x90, 0x51, 0xf4, 0x37, 0xf0, 0x7d, 0xfd, 0xd4, 0x33, 0xcd, 0xd6, 0x57,
	0x6b, 0x01, 0x7b, 0x4d, 0xd2, 0x4f, 0xb1, 0x8b, 0xa0, 0x47, 0x90, 0x65, 0xee, 0x0d, 0x62, 0xda,
	0x74, 0xc0, 0x84, 0x64, 0x85, 0xaf, 0x66, 0xeb, 0xeb, 0x53, 0x43, 0x8f, 0x4e, 0xb1, 0xe9, 0x00,
	0x03, 0x0b, 0xbe, 0x32, 0xb1, 0x0d, 0x99, 0x1b, 0xe0, 0x6e, 0x55, 0xe8, 0x2f, 0xc8, 0x4c, 0x1c,
	0x18, 0x3e, 0x7d, 0x06, 0xa7, 0x7d, 0x26, 0x83, 0x89, 0x8f, 0x81, 0x97, 0xf4, 0x53, 0x24, 0xc0,
	0x0a, 0x73, 0x74, 0x9d, 0x32, 0xe6, 0x5d, 0x4f, 0xe3, 0xe0, 0x88, 0x7e, 0x87, 0x25, 0xbd, 0xef,
	0x30, 0x2a, 0x24, 0x3d, 0x5a, 0xff, 0x20, 0x7e, 0xe0, 0x00, 0x35, 0xc7, 0xb4, 0x6f, 0xd3, 0x49,
	0xb4, 0x0b, 0xa4, 0x07, 0x6d, 0x42, 0x3a, 0x10, 0x32, 0x61, 0x5b, 0x99, 0xe8, 0x40, 0xcf, 0x20,
	0xc7, 0xf4, 0x13, 0x6a, 0x38, 0x67, 0x74, 0x4c, 0xec, 0xf3, 0x11, 0x15, 0xf8, 0x0a, 0x57, 0xcd,
	0xd5, 0xff, 0x0c, 0xe5, 0x21, 0xc0, 0x0f, 0xcf, 0x47, 0x14, 0xaf, 0xb2, 0xf0, 0x11, 0x6d, 0xc0,
	0xf2, 0x6b, 0x6a, 0x1e, 0x9f, 0xd8, 0x42, 0xca, 0x23, 0x9e, 0x9c, 0xc4, 0x27, 0xb0, 0x1e, 0x91,
	0xb9, 0x60, 0x51, 0xbc, 0xf8, 0xb4, 0x91, 0xf1, 0x2b, 0xc4, 0x17, 0x91, 0xb9, 0x68, 0x7c, 0x07,
	0x80, 0x64, 0x7a, 0x46, 0x7f, 0x50, 0x78, 0xae, 0x8c, 0x08, 0xdd, 0xa2, 0x32, 0x3e, 0x71, 0x50,
	0xdc, 0xa5, 0xb6, 0xe6, 0xdf, 0x93, 0x18, 0xb3, 0x74, 0xb3, 0x6f, 0x9b, 0xd6, 0x70, 0x31, 0x45,
	0xff, 0xc0, 0x92, 0x33, 0x91, 0xe3, 0x36, 0x4d, 0x6e, 0xea, 0x41, 0xa3, 0x8a, 0x81, 0x53, 0x4e,
	0x5c, 0x36, 0x1f, 0xad, 0xca, 0xbf, 0xb0, 0xe6, 0x50, 0xe2, 0xa3, 0x7d, 0xd7, 0xb9, 0x6b, 0xe3,
	0x27, 0x38, 0xe7, 0x84, 0x34, 0x29, 0x86, 0xf8, 0x96, 0x83, 0xd2, 0x2d, 0x4a, 0x17, 0x6d, 0x74,
	0x19, 0xd6, 0x22, 0xae, 0x42, 0xed, 0x2e, 0xc4, 0xda, 0xdd, 0xf7, 0xea, 0xf6, 0xfc, 0x6f, 0x2c,
	0x72, 0x66, 0xe2, 0x7b, 0x0e, 0x72, 0x51, 0x9b, 0xf9, 0x61, 0x70, 0xf3, 0xc2, 0x88, 0xe5, 0x33,
	0x19, 0xcb, 0xe7, 0x76, 0x90, 0x4f, 0xbe, 0xc2, 0x57, 0x73, 0x75, 0x14, 0xcd, 0xa7, 0xf7, 0x2e,
	0x67, 0x73, 0x9a, 0x8a, 0x3e, 0x85, 0x26, 0xa4, 0x5c, 0x63, 0xb4, 0x1e, 0x70, 0xf9, 0x42, 0xfc,
	0x7b, 0x5b, 0x90, 0xf2, 0x1e, 0x7f, 0xd2, 0x7b, 0xfc, 0x73, 0xf9, 0x5d, 0x5c, 0xbc, 0x80, 0xa2,
	0xfa, 0xd3, 0x9e, 0x85, 0x78, 0x01, 0x25, 0xf5, 0xfb, 0x4a, 0xfd, 0x14, 0x0a, 0x7d, 0xc6, 0xcc,
	0xe3, 0x21, 0x35, 0xc8, 0x6c, 0x69, 0xfc, 0xb4, 0x6f, 0x04, 0x16, 0x5a, 0xa4, 0x44, 0x3b, 0x0e,
	0xac, 0x46, 0x46, 0x01, 0x2a, 0x43, 0x41, 0x6d, 0x3e, 0x6f, 0xc9, 0xda, 0x7e, 0x0b, 0x93, 0xc3,
	0xa3, 0x5e, 0x8b, 0xe0, 0xae, 0xd6, 0x91, 0x09, 0xee, 0x36, 0x94, 0x4e, 0x3e, 0x81, 0xb6, 0x40,
	0x8c, 0xe1, 0x3d, 0xdc, 0xed, 0x75, 0xf1, 0xa1, 0xd2, 0xed, 0x48, 0xfb, 0xfb, 0x47, 0xa4, 0x2d,
	0x29, 0x38, 0xcf, 0xa1, 0x22, 0x08, 0x31, 0xbb, 0x17, 0x5d, 0x95, 0x34, 0x24, 0xb5, 0x25, 0xe7,
	0x93, 0x3b, 0x1f, 0x39, 0x48, 0x07, 0x55, 0x40, 0x25, 0xd8, 0xd4, 0x5a, 0x44, 0x91, 0x7d, 0xb3,
	0xa6, 0x46, 0xb4, 0x16, 0x69, 0x3f, 0x20, 0x52, 0x8f, 0x28, 0x72, 0x3e, 0x11, 0x83, 0xe5, 0x28,
	0xcc, 0xc5, 0x60, 0x2c, 0x75, 0x5c, 0xbc, 0xb3, 0xeb, 0xc3, 0xc9, 0x18, 0x2c, 0x1d, 0xb4, 0xc3,
	0x30, 0xef, 0x86, 0x1b, 0x82, 0x5b, 0x9d, 0x86, 0x0b, 0xab, 0x01, 0x7b, 0xaa, 0xfe, 0x26, 0x05,
	0x3c, 0x66, 0x03, 0xd4, 0x84, 0xcc, 0xcd, 0x7a, 0x46, 0x85, 0x69, 0x11, 0xe2, 0x3b, 0xbb, 0x30,
	0x07, 0xbb, 0xa9, 0xe4, 0x1e, 0x64, 0x43, 0xfb, 0x01, 0x15, 0xa7, 0xa6, 0xb3, 0xdb, 0xad, 0x50,
	0xba, 0x05, 0x9d, 0x72, 0x85, 0x66, 0x71, 0x98, 0x6b, 0x76, 0x93, 0x84, 0xb9, 0xe6, 0x0d, 0xf0,
	0x3d, 0xc8, 0x86, 0x06, 0x6a, 0x98, 0x6b, 0x76, 0x6c, 0x87, 0xb9, 0xe6, 0x4d, 0xe1, 0x13, 0xf8,
	0x63, 0xee, 0xe4, 0x42, 0x5b, 0x91, 0xc4, 0xdc, 0xda, 0x6d, 0x85, 0xed, 0x7b, 0xed, 0xa6, 0x9e,
	0xd4, 0xfb, 0x3c, 0xa9, 0x0b, 0x7a, 0xba, 0xb3, 0x03, 0x1b, 0xc2, 0xe7, 0xab, 0x32, 0x77, 0x79,
	0x55, 0xe6, 0xbe, 0x5e, 0x95, 0xb9, 0x77, 0xd7, 0xe5, 0xc4, 0xe5, 0x75, 0x39, 0xf1, 0xe5, 0xba,
	0x9c, 0x78, 0xb9, 0xec, 0xfd, 0x8d, 0x7b, 0xf8, 0x2d, 0x00, 0x00, 0xff, 0xff, 0x67, 0xb8, 0xd9,
	0x18, 0xdc, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RsmClient is the client API for Rsm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RsmClient interface {
	// Slice management
	GetSlices(ctx context.Context, in *GetSlicesRequest, opts ...grpc.CallOption) (*GetSliceResponse, error)
	CreateSlice(ctx context.Context, in *CreateSliceRequest, opts ...grpc.CallOption) (*CreateSliceResponse, error)
	UpdateSlice(ctx context.Context, in *UpdateSliceRequest, opts ...grpc.CallOption) (*UpdateSliceResponse, error)
	DeleteSlice(ctx context.Context, in *DeleteSliceRequest, opts ...grpc.CallOption) (*DeleteSliceResponse, error)
	// UE-Slice association
	GetUeSliceAssociation(ctx context.Context, in *GetUeSliceAssociationRequest, opts ...grpc.CallOption) (*GetUeSliceAssociationResponse, error)
	SetUeSliceAssociation(ctx context.Context, in *SetUeSliceAssociationRequest, opts ...grpc.CallOption) (*SetUeSliceAssociationResponse, error)
}

type rsmClient struct {
	cc *grpc.ClientConn
}

func NewRsmClient(cc *grpc.ClientConn) RsmClient {
	return &rsmClient{cc}
}

func (c *rsmClient) GetSlices(ctx context.Context, in *GetSlicesRequest, opts ...grpc.CallOption) (*GetSliceResponse, error) {
	out := new(GetSliceResponse)
	err := c.cc.Invoke(ctx, "/onos.rsm.Rsm/GetSlices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rsmClient) CreateSlice(ctx context.Context, in *CreateSliceRequest, opts ...grpc.CallOption) (*CreateSliceResponse, error) {
	out := new(CreateSliceResponse)
	err := c.cc.Invoke(ctx, "/onos.rsm.Rsm/CreateSlice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rsmClient) UpdateSlice(ctx context.Context, in *UpdateSliceRequest, opts ...grpc.CallOption) (*UpdateSliceResponse, error) {
	out := new(UpdateSliceResponse)
	err := c.cc.Invoke(ctx, "/onos.rsm.Rsm/UpdateSlice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rsmClient) DeleteSlice(ctx context.Context, in *DeleteSliceRequest, opts ...grpc.CallOption) (*DeleteSliceResponse, error) {
	out := new(DeleteSliceResponse)
	err := c.cc.Invoke(ctx, "/onos.rsm.Rsm/DeleteSlice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rsmClient) GetUeSliceAssociation(ctx context.Context, in *GetUeSliceAssociationRequest, opts ...grpc.CallOption) (*GetUeSliceAssociationResponse, error) {
	out := new(GetUeSliceAssociationResponse)
	err := c.cc.Invoke(ctx, "/onos.rsm.Rsm/GetUeSliceAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rsmClient) SetUeSliceAssociation(ctx context.Context, in *SetUeSliceAssociationRequest, opts ...grpc.CallOption) (*SetUeSliceAssociationResponse, error) {
	out := new(SetUeSliceAssociationResponse)
	err := c.cc.Invoke(ctx, "/onos.rsm.Rsm/SetUeSliceAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RsmServer is the server API for Rsm service.
type RsmServer interface {
	// Slice management
	GetSlices(context.Context, *GetSlicesRequest) (*GetSliceResponse, error)
	CreateSlice(context.Context, *CreateSliceRequest) (*CreateSliceResponse, error)
	UpdateSlice(context.Context, *UpdateSliceRequest) (*UpdateSliceResponse, error)
	DeleteSlice(context.Context, *DeleteSliceRequest) (*DeleteSliceResponse, error)
	// UE-Slice association
	GetUeSliceAssociation(context.Context, *GetUeSliceAssociationRequest) (*GetUeSliceAssociationResponse, error)
	SetUeSliceAssociation(context.Context, *SetUeSliceAssociationRequest) (*SetUeSliceAssociationResponse, error)
}

// UnimplementedRsmServer can be embedded to have forward compatible implementations.
type UnimplementedRsmServer struct {
}

func (*UnimplementedRsmServer) GetSlices(ctx context.Context, req *GetSlicesRequest) (*GetSliceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlices not implemented")
}
func (*UnimplementedRsmServer) CreateSlice(ctx context.Context, req *CreateSliceRequest) (*CreateSliceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSlice not implemented")
}
func (*UnimplementedRsmServer) UpdateSlice(ctx context.Context, req *UpdateSliceRequest) (*UpdateSliceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSlice not implemented")
}
func (*UnimplementedRsmServer) DeleteSlice(ctx context.Context, req *DeleteSliceRequest) (*DeleteSliceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSlice not implemented")
}
func (*UnimplementedRsmServer) GetUeSliceAssociation(ctx context.Context, req *GetUeSliceAssociationRequest) (*GetUeSliceAssociationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUeSliceAssociation not implemented")
}
func (*UnimplementedRsmServer) SetUeSliceAssociation(ctx context.Context, req *SetUeSliceAssociationRequest) (*SetUeSliceAssociationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUeSliceAssociation not implemented")
}

func RegisterRsmServer(s *grpc.Server, srv RsmServer) {
	s.RegisterService(&_Rsm_serviceDesc, srv)
}

func _Rsm_GetSlices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsmServer).GetSlices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.rsm.Rsm/GetSlices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsmServer).GetSlices(ctx, req.(*GetSlicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rsm_CreateSlice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSliceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsmServer).CreateSlice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.rsm.Rsm/CreateSlice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsmServer).CreateSlice(ctx, req.(*CreateSliceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rsm_UpdateSlice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSliceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsmServer).UpdateSlice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.rsm.Rsm/UpdateSlice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsmServer).UpdateSlice(ctx, req.(*UpdateSliceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rsm_DeleteSlice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSliceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsmServer).DeleteSlice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.rsm.Rsm/DeleteSlice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsmServer).DeleteSlice(ctx, req.(*DeleteSliceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rsm_GetUeSliceAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUeSliceAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsmServer).GetUeSliceAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.rsm.Rsm/GetUeSliceAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsmServer).GetUeSliceAssociation(ctx, req.(*GetUeSliceAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rsm_SetUeSliceAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUeSliceAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsmServer).SetUeSliceAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.rsm.Rsm/SetUeSliceAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsmServer).SetUeSliceAssociation(ctx, req.(*SetUeSliceAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rsm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.rsm.Rsm",
	HandlerType: (*RsmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSlices",
			Handler:    _Rsm_GetSlices_Handler,
		},
		{
			MethodName: "CreateSlice",
			Handler:    _Rsm_CreateSlice_Handler,
		},
		{
			MethodName: "UpdateSlice",
			Handler:    _Rsm_UpdateSlice_Handler,
		},
		{
			MethodName: "DeleteSlice",
			Handler:    _Rsm_DeleteSlice_Handler,
		},
		{
			MethodName: "GetUeSliceAssociation",
			Handler:    _Rsm_GetUeSliceAssociation_Handler,
		},
		{
			MethodName: "SetUeSliceAssociation",
			Handler:    _Rsm_SetUeSliceAssociation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onos/rsm/rsm.proto",
}

func (m *GetSlicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSlicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSlicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.E2NodeId) > 0 {
		i -= len(m.E2NodeId)
		copy(dAtA[i:], m.E2NodeId)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.E2NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSliceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSliceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSliceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SliceItems) > 0 {
		for iNdEx := len(m.SliceItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SliceItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRsm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Ack != nil {
		{
			size, err := m.Ack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SliceItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SliceItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SliceItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SliceIds) > 0 {
		for iNdEx := len(m.SliceIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SliceIds[iNdEx])
			copy(dAtA[i:], m.SliceIds[iNdEx])
			i = encodeVarintRsm(dAtA, i, uint64(len(m.SliceIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.E2NodeId) > 0 {
		i -= len(m.E2NodeId)
		copy(dAtA[i:], m.E2NodeId)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.E2NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Ack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cause) > 0 {
		i -= len(m.Cause)
		copy(dAtA[i:], m.Cause)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.Cause)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateSliceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSliceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSliceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Weight) > 0 {
		i -= len(m.Weight)
		copy(dAtA[i:], m.Weight)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.Weight)))
		i--
		dAtA[i] = 0x22
	}
	if m.SchedulerType != 0 {
		i = encodeVarintRsm(dAtA, i, uint64(m.SchedulerType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SliceId) > 0 {
		i -= len(m.SliceId)
		copy(dAtA[i:], m.SliceId)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.SliceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.E2NodeId) > 0 {
		i -= len(m.E2NodeId)
		copy(dAtA[i:], m.E2NodeId)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.E2NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSliceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSliceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSliceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ack != nil {
		{
			size, err := m.Ack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSliceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSliceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSliceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Weight) > 0 {
		i -= len(m.Weight)
		copy(dAtA[i:], m.Weight)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.Weight)))
		i--
		dAtA[i] = 0x22
	}
	if m.SchedulerType != 0 {
		i = encodeVarintRsm(dAtA, i, uint64(m.SchedulerType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SliceId) > 0 {
		i -= len(m.SliceId)
		copy(dAtA[i:], m.SliceId)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.SliceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.E2NodeId) > 0 {
		i -= len(m.E2NodeId)
		copy(dAtA[i:], m.E2NodeId)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.E2NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSliceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSliceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSliceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ack != nil {
		{
			size, err := m.Ack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteSliceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteSliceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteSliceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SliceId) > 0 {
		i -= len(m.SliceId)
		copy(dAtA[i:], m.SliceId)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.SliceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.E2NodeId) > 0 {
		i -= len(m.E2NodeId)
		copy(dAtA[i:], m.E2NodeId)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.E2NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteSliceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteSliceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteSliceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ack != nil {
		{
			size, err := m.Ack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUeSliceAssociationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUeSliceAssociationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUeSliceAssociationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UeSliceAssocId) > 0 {
		i -= len(m.UeSliceAssocId)
		copy(dAtA[i:], m.UeSliceAssocId)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.UeSliceAssocId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SliceId) > 0 {
		i -= len(m.SliceId)
		copy(dAtA[i:], m.SliceId)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.SliceId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UeId) > 0 {
		for iNdEx := len(m.UeId) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UeId[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRsm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.E2NodeId) > 0 {
		i -= len(m.E2NodeId)
		copy(dAtA[i:], m.E2NodeId)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.E2NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUeSliceAssociationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUeSliceAssociationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUeSliceAssociationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SliceAssocItems) > 0 {
		for iNdEx := len(m.SliceAssocItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SliceAssocItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRsm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Ack != nil {
		{
			size, err := m.Ack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SliceAssocItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SliceAssocItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SliceAssocItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SliceId) > 0 {
		i -= len(m.SliceId)
		copy(dAtA[i:], m.SliceId)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.SliceId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UeId) > 0 {
		dAtA7 := make([]byte, len(m.UeId)*10)
		var j6 int
		for _, num := range m.UeId {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintRsm(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.E2NodeId) > 0 {
		i -= len(m.E2NodeId)
		copy(dAtA[i:], m.E2NodeId)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.E2NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UeSliceAssocId) > 0 {
		i -= len(m.UeSliceAssocId)
		copy(dAtA[i:], m.UeSliceAssocId)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.UeSliceAssocId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UeId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UeId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UeId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintRsm(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UeId) > 0 {
		i -= len(m.UeId)
		copy(dAtA[i:], m.UeId)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.UeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetUeSliceAssociationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetUeSliceAssociationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetUeSliceAssociationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SliceId) > 0 {
		i -= len(m.SliceId)
		copy(dAtA[i:], m.SliceId)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.SliceId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UeId) > 0 {
		for iNdEx := len(m.UeId) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UeId[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRsm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.E2NodeId) > 0 {
		i -= len(m.E2NodeId)
		copy(dAtA[i:], m.E2NodeId)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.E2NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetUeSliceAssociationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetUeSliceAssociationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetUeSliceAssociationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssignedUeSliceAssocId) > 0 {
		i -= len(m.AssignedUeSliceAssocId)
		copy(dAtA[i:], m.AssignedUeSliceAssocId)
		i = encodeVarintRsm(dAtA, i, uint64(len(m.AssignedUeSliceAssocId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ack != nil {
		{
			size, err := m.Ack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRsm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRsm(dAtA []byte, offset int, v uint64) int {
	offset -= sovRsm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetSlicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.E2NodeId)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	return n
}

func (m *GetSliceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ack != nil {
		l = m.Ack.Size()
		n += 1 + l + sovRsm(uint64(l))
	}
	if len(m.SliceItems) > 0 {
		for _, e := range m.SliceItems {
			l = e.Size()
			n += 1 + l + sovRsm(uint64(l))
		}
	}
	return n
}

func (m *SliceItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.E2NodeId)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	if len(m.SliceIds) > 0 {
		for _, s := range m.SliceIds {
			l = len(s)
			n += 1 + l + sovRsm(uint64(l))
		}
	}
	return n
}

func (m *Ack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Cause)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	return n
}

func (m *CreateSliceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.E2NodeId)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	l = len(m.SliceId)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	if m.SchedulerType != 0 {
		n += 1 + sovRsm(uint64(m.SchedulerType))
	}
	l = len(m.Weight)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	return n
}

func (m *CreateSliceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ack != nil {
		l = m.Ack.Size()
		n += 1 + l + sovRsm(uint64(l))
	}
	return n
}

func (m *UpdateSliceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.E2NodeId)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	l = len(m.SliceId)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	if m.SchedulerType != 0 {
		n += 1 + sovRsm(uint64(m.SchedulerType))
	}
	l = len(m.Weight)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	return n
}

func (m *UpdateSliceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ack != nil {
		l = m.Ack.Size()
		n += 1 + l + sovRsm(uint64(l))
	}
	return n
}

func (m *DeleteSliceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.E2NodeId)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	l = len(m.SliceId)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	return n
}

func (m *DeleteSliceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ack != nil {
		l = m.Ack.Size()
		n += 1 + l + sovRsm(uint64(l))
	}
	return n
}

func (m *GetUeSliceAssociationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.E2NodeId)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	if len(m.UeId) > 0 {
		for _, e := range m.UeId {
			l = e.Size()
			n += 1 + l + sovRsm(uint64(l))
		}
	}
	l = len(m.SliceId)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	l = len(m.UeSliceAssocId)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	return n
}

func (m *GetUeSliceAssociationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ack != nil {
		l = m.Ack.Size()
		n += 1 + l + sovRsm(uint64(l))
	}
	if len(m.SliceAssocItems) > 0 {
		for _, e := range m.SliceAssocItems {
			l = e.Size()
			n += 1 + l + sovRsm(uint64(l))
		}
	}
	return n
}

func (m *SliceAssocItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UeSliceAssocId)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	l = len(m.E2NodeId)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	if len(m.UeId) > 0 {
		l = 0
		for _, e := range m.UeId {
			l += sovRsm(uint64(e))
		}
		n += 1 + sovRsm(uint64(l)) + l
	}
	l = len(m.SliceId)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	return n
}

func (m *UeId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UeId)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRsm(uint64(m.Type))
	}
	return n
}

func (m *SetUeSliceAssociationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.E2NodeId)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	if len(m.UeId) > 0 {
		for _, e := range m.UeId {
			l = e.Size()
			n += 1 + l + sovRsm(uint64(l))
		}
	}
	l = len(m.SliceId)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	return n
}

func (m *SetUeSliceAssociationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ack != nil {
		l = m.Ack.Size()
		n += 1 + l + sovRsm(uint64(l))
	}
	l = len(m.AssignedUeSliceAssocId)
	if l > 0 {
		n += 1 + l + sovRsm(uint64(l))
	}
	return n
}

func sovRsm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRsm(x uint64) (n int) {
	return sovRsm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetSlicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSlicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSlicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E2NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E2NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSliceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSliceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSliceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ack == nil {
				m.Ack = &Ack{}
			}
			if err := m.Ack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceItems = append(m.SliceItems, &SliceItem{})
			if err := m.SliceItems[len(m.SliceItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SliceItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SliceItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SliceItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E2NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E2NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceIds = append(m.SliceIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cause = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSliceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSliceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSliceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E2NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E2NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerType", wireType)
			}
			m.SchedulerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchedulerType |= SchedulerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSliceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSliceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSliceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ack == nil {
				m.Ack = &Ack{}
			}
			if err := m.Ack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSliceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSliceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSliceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E2NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E2NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerType", wireType)
			}
			m.SchedulerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchedulerType |= SchedulerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSliceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSliceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSliceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ack == nil {
				m.Ack = &Ack{}
			}
			if err := m.Ack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteSliceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteSliceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteSliceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E2NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E2NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteSliceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteSliceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteSliceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ack == nil {
				m.Ack = &Ack{}
			}
			if err := m.Ack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUeSliceAssociationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUeSliceAssociationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUeSliceAssociationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E2NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E2NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UeId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UeId = append(m.UeId, &UeId{})
			if err := m.UeId[len(m.UeId)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UeSliceAssocId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UeSliceAssocId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUeSliceAssociationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUeSliceAssociationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUeSliceAssociationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ack == nil {
				m.Ack = &Ack{}
			}
			if err := m.Ack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceAssocItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceAssocItems = append(m.SliceAssocItems, &SliceAssocItem{})
			if err := m.SliceAssocItems[len(m.SliceAssocItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SliceAssocItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SliceAssocItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SliceAssocItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UeSliceAssocId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UeSliceAssocId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E2NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E2NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v UeIdType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRsm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= UeIdType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UeId = append(m.UeId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRsm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRsm
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRsm
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.UeId) == 0 {
					m.UeId = make([]UeIdType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v UeIdType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRsm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= UeIdType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UeId = append(m.UeId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UeId", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UeId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UeId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UeId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UeIdType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetUeSliceAssociationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetUeSliceAssociationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetUeSliceAssociationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E2NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E2NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UeId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UeId = append(m.UeId, &UeId{})
			if err := m.UeId[len(m.UeId)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetUeSliceAssociationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetUeSliceAssociationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetUeSliceAssociationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ack == nil {
				m.Ack = &Ack{}
			}
			if err := m.Ack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedUeSliceAssocId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignedUeSliceAssocId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRsm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRsm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRsm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRsm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRsm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRsm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRsm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRsm = fmt.Errorf("proto: unexpected end of group")
)
