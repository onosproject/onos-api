// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/a1t/a1/policy.proto

// Package onos.a1t.a1 defines the interior gRPC interfaces for xApps to interact with A1T.

package a1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PolicyType struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *PolicyType) Reset()         { *m = PolicyType{} }
func (m *PolicyType) String() string { return proto.CompactTextString(m) }
func (*PolicyType) ProtoMessage()    {}
func (*PolicyType) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ce1b84452933ab0, []int{0}
}
func (m *PolicyType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyType.Merge(m, src)
}
func (m *PolicyType) XXX_Size() int {
	return m.Size()
}
func (m *PolicyType) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyType.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyType proto.InternalMessageInfo

func (m *PolicyType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PolicyType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PolicyType) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type PolicyRequestMessage struct {
	Header     *Header         `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	PolicyType *PolicyType     `protobuf:"bytes,2,opt,name=policy_type,json=policyType,proto3" json:"policy_type,omitempty"`
	Message    *RequestMessage `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *PolicyRequestMessage) Reset()         { *m = PolicyRequestMessage{} }
func (m *PolicyRequestMessage) String() string { return proto.CompactTextString(m) }
func (*PolicyRequestMessage) ProtoMessage()    {}
func (*PolicyRequestMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ce1b84452933ab0, []int{1}
}
func (m *PolicyRequestMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyRequestMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyRequestMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyRequestMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyRequestMessage.Merge(m, src)
}
func (m *PolicyRequestMessage) XXX_Size() int {
	return m.Size()
}
func (m *PolicyRequestMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyRequestMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyRequestMessage proto.InternalMessageInfo

func (m *PolicyRequestMessage) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PolicyRequestMessage) GetPolicyType() *PolicyType {
	if m != nil {
		return m.PolicyType
	}
	return nil
}

func (m *PolicyRequestMessage) GetMessage() *RequestMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type PolicyResultMessage struct {
	Header     *Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	PolicyType *PolicyType    `protobuf:"bytes,2,opt,name=policy_type,json=policyType,proto3" json:"policy_type,omitempty"`
	Message    *ResultMessage `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *PolicyResultMessage) Reset()         { *m = PolicyResultMessage{} }
func (m *PolicyResultMessage) String() string { return proto.CompactTextString(m) }
func (*PolicyResultMessage) ProtoMessage()    {}
func (*PolicyResultMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ce1b84452933ab0, []int{2}
}
func (m *PolicyResultMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyResultMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyResultMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyResultMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyResultMessage.Merge(m, src)
}
func (m *PolicyResultMessage) XXX_Size() int {
	return m.Size()
}
func (m *PolicyResultMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyResultMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyResultMessage proto.InternalMessageInfo

func (m *PolicyResultMessage) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PolicyResultMessage) GetPolicyType() *PolicyType {
	if m != nil {
		return m.PolicyType
	}
	return nil
}

func (m *PolicyResultMessage) GetMessage() *ResultMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type PolicyStatusMessage struct {
	Header     *Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	PolicyType *PolicyType    `protobuf:"bytes,2,opt,name=policy_type,json=policyType,proto3" json:"policy_type,omitempty"`
	Message    *StatusMessage `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *PolicyStatusMessage) Reset()         { *m = PolicyStatusMessage{} }
func (m *PolicyStatusMessage) String() string { return proto.CompactTextString(m) }
func (*PolicyStatusMessage) ProtoMessage()    {}
func (*PolicyStatusMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ce1b84452933ab0, []int{3}
}
func (m *PolicyStatusMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyStatusMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyStatusMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyStatusMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyStatusMessage.Merge(m, src)
}
func (m *PolicyStatusMessage) XXX_Size() int {
	return m.Size()
}
func (m *PolicyStatusMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyStatusMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyStatusMessage proto.InternalMessageInfo

func (m *PolicyStatusMessage) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PolicyStatusMessage) GetPolicyType() *PolicyType {
	if m != nil {
		return m.PolicyType
	}
	return nil
}

func (m *PolicyStatusMessage) GetMessage() *StatusMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type PolicyAckMessage struct {
	Header     *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	PolicyType *PolicyType `protobuf:"bytes,2,opt,name=policy_type,json=policyType,proto3" json:"policy_type,omitempty"`
	Message    *AckMessage `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *PolicyAckMessage) Reset()         { *m = PolicyAckMessage{} }
func (m *PolicyAckMessage) String() string { return proto.CompactTextString(m) }
func (*PolicyAckMessage) ProtoMessage()    {}
func (*PolicyAckMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ce1b84452933ab0, []int{4}
}
func (m *PolicyAckMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyAckMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyAckMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyAckMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyAckMessage.Merge(m, src)
}
func (m *PolicyAckMessage) XXX_Size() int {
	return m.Size()
}
func (m *PolicyAckMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyAckMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyAckMessage proto.InternalMessageInfo

func (m *PolicyAckMessage) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PolicyAckMessage) GetPolicyType() *PolicyType {
	if m != nil {
		return m.PolicyType
	}
	return nil
}

func (m *PolicyAckMessage) GetMessage() *AckMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*PolicyType)(nil), "onos.a1t.a1.PolicyType")
	golang_proto.RegisterType((*PolicyType)(nil), "onos.a1t.a1.PolicyType")
	proto.RegisterType((*PolicyRequestMessage)(nil), "onos.a1t.a1.PolicyRequestMessage")
	golang_proto.RegisterType((*PolicyRequestMessage)(nil), "onos.a1t.a1.PolicyRequestMessage")
	proto.RegisterType((*PolicyResultMessage)(nil), "onos.a1t.a1.PolicyResultMessage")
	golang_proto.RegisterType((*PolicyResultMessage)(nil), "onos.a1t.a1.PolicyResultMessage")
	proto.RegisterType((*PolicyStatusMessage)(nil), "onos.a1t.a1.PolicyStatusMessage")
	golang_proto.RegisterType((*PolicyStatusMessage)(nil), "onos.a1t.a1.PolicyStatusMessage")
	proto.RegisterType((*PolicyAckMessage)(nil), "onos.a1t.a1.PolicyAckMessage")
	golang_proto.RegisterType((*PolicyAckMessage)(nil), "onos.a1t.a1.PolicyAckMessage")
}

func init() { proto.RegisterFile("onos/a1t/a1/policy.proto", fileDescriptor_5ce1b84452933ab0) }
func init() { golang_proto.RegisterFile("onos/a1t/a1/policy.proto", fileDescriptor_5ce1b84452933ab0) }

var fileDescriptor_5ce1b84452933ab0 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0x41, 0x4b, 0xe3, 0x40,
	0x14, 0xc7, 0x3b, 0xed, 0xd2, 0xb2, 0x2f, 0xbb, 0xcb, 0x32, 0x2d, 0x6c, 0xc8, 0xee, 0x86, 0xda,
	0x53, 0x41, 0x48, 0x4c, 0x54, 0xf0, 0xaa, 0x78, 0x10, 0x41, 0xd0, 0x54, 0xcf, 0x32, 0x36, 0x43,
	0x0d, 0xb6, 0x9d, 0x98, 0x4c, 0x0a, 0xf9, 0x16, 0x7e, 0x10, 0x4f, 0x22, 0x9e, 0x3d, 0x7a, 0xec,
	0xd1, 0xa3, 0x34, 0x5f, 0x44, 0x3a, 0xd3, 0x34, 0x49, 0xc9, 0xb1, 0x14, 0x6f, 0x93, 0xff, 0xbc,
	0xff, 0xff, 0xfd, 0x5e, 0xf2, 0x08, 0xa8, 0x6c, 0xcc, 0x42, 0x93, 0x58, 0xdc, 0x24, 0x96, 0xe9,
	0xb3, 0xa1, 0xd7, 0x8f, 0x0d, 0x3f, 0x60, 0x9c, 0x61, 0x65, 0x7e, 0x63, 0x10, 0x8b, 0x1b, 0xc4,
	0xd2, 0x5a, 0x03, 0x36, 0x60, 0x42, 0x37, 0xe7, 0x27, 0x59, 0xa2, 0xb5, 0xf2, 0x66, 0x62, 0x49,
	0xb5, 0x73, 0x0a, 0x70, 0x2e, 0x82, 0x2e, 0x63, 0x9f, 0xe2, 0x5f, 0x50, 0xf5, 0x5c, 0x15, 0xb5,
	0x51, 0xf7, 0xbb, 0x53, 0xf5, 0x5c, 0x8c, 0xe1, 0xdb, 0x98, 0x8c, 0xa8, 0x5a, 0x15, 0x8a, 0x38,
	0x63, 0x15, 0x1a, 0x13, 0x1a, 0x84, 0x1e, 0x1b, 0xab, 0x35, 0x21, 0xa7, 0x8f, 0x9d, 0x67, 0x04,
	0x2d, 0x19, 0xe6, 0xd0, 0xfb, 0x88, 0x86, 0xfc, 0x8c, 0x86, 0x21, 0x19, 0x50, 0xbc, 0x0d, 0xf5,
	0x5b, 0x4a, 0x5c, 0x1a, 0x88, 0x68, 0xc5, 0x6e, 0x1a, 0x39, 0x5c, 0xe3, 0x44, 0x5c, 0x39, 0x8b,
	0x12, 0x7c, 0x00, 0x8a, 0x1c, 0xed, 0x9a, 0xc7, 0xbe, 0x6c, 0xad, 0xd8, 0x7f, 0x0a, 0x8e, 0x8c,
	0xd8, 0x01, 0x3f, 0xa3, 0xdf, 0x87, 0xc6, 0x48, 0x76, 0x14, 0x64, 0x8a, 0xfd, 0xb7, 0xe0, 0x2a,
	0x42, 0x39, 0x69, 0x6d, 0xe7, 0x09, 0x41, 0x33, 0xc5, 0x0e, 0xa3, 0xe1, 0xa6, 0xa9, 0xf7, 0x56,
	0xa9, 0xb5, 0x15, 0xea, 0x1c, 0x53, 0x19, 0x74, 0x8f, 0x13, 0x1e, 0x85, 0x5f, 0x0b, 0xba, 0xc0,
	0x94, 0x41, 0x3f, 0x22, 0xf8, 0x2d, 0x03, 0x0f, 0xfb, 0x77, 0x1b, 0x26, 0xb6, 0x56, 0x89, 0x8b,
	0xae, 0x0c, 0x68, 0x89, 0x6b, 0xbf, 0xd4, 0xe0, 0xe7, 0xe2, 0x1d, 0xd3, 0x60, 0xe2, 0xf5, 0x29,
	0x76, 0x40, 0x49, 0x05, 0x1e, 0xf9, 0x78, 0xab, 0xa4, 0x71, 0x71, 0xcb, 0xb4, 0x76, 0x69, 0x49,
	0x7e, 0xcd, 0x7a, 0xf0, 0x43, 0xca, 0x57, 0xbe, 0x4b, 0x38, 0x5d, 0x73, 0xe8, 0x31, 0x1d, 0xd2,
	0x75, 0x85, 0x2e, 0xa7, 0xbf, 0x88, 0x68, 0x10, 0xaf, 0x19, 0x54, 0xae, 0x0c, 0xfe, 0x5f, 0xe2,
	0xc8, 0xbe, 0x4d, 0x69, 0x60, 0x61, 0xd9, 0xba, 0x68, 0x07, 0x1d, 0xfd, 0x7b, 0x9b, 0xe9, 0x68,
	0x3a, 0xd3, 0xd1, 0xc7, 0x4c, 0x47, 0x0f, 0x89, 0x5e, 0x79, 0x4d, 0x74, 0x34, 0x4d, 0xf4, 0xca,
	0x7b, 0xa2, 0x57, 0x6e, 0xea, 0xe2, 0xcf, 0xb7, 0xfb, 0x19, 0x00, 0x00, 0xff, 0xff, 0x23, 0xe5,
	0x8e, 0x30, 0x4e, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PolicyServiceClient is the client API for PolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolicyServiceClient interface {
	PolicySetup(ctx context.Context, in *PolicyRequestMessage, opts ...grpc.CallOption) (*PolicyResultMessage, error)
	PolicyUpdate(ctx context.Context, in *PolicyRequestMessage, opts ...grpc.CallOption) (*PolicyResultMessage, error)
	PolicyDelete(ctx context.Context, in *PolicyRequestMessage, opts ...grpc.CallOption) (*PolicyResultMessage, error)
	PolicyQuery(ctx context.Context, in *PolicyRequestMessage, opts ...grpc.CallOption) (*PolicyResultMessage, error)
	PolicyStatus(ctx context.Context, opts ...grpc.CallOption) (PolicyService_PolicyStatusClient, error)
}

type policyServiceClient struct {
	cc *grpc.ClientConn
}

func NewPolicyServiceClient(cc *grpc.ClientConn) PolicyServiceClient {
	return &policyServiceClient{cc}
}

func (c *policyServiceClient) PolicySetup(ctx context.Context, in *PolicyRequestMessage, opts ...grpc.CallOption) (*PolicyResultMessage, error) {
	out := new(PolicyResultMessage)
	err := c.cc.Invoke(ctx, "/onos.a1t.a1.PolicyService/PolicySetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) PolicyUpdate(ctx context.Context, in *PolicyRequestMessage, opts ...grpc.CallOption) (*PolicyResultMessage, error) {
	out := new(PolicyResultMessage)
	err := c.cc.Invoke(ctx, "/onos.a1t.a1.PolicyService/PolicyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) PolicyDelete(ctx context.Context, in *PolicyRequestMessage, opts ...grpc.CallOption) (*PolicyResultMessage, error) {
	out := new(PolicyResultMessage)
	err := c.cc.Invoke(ctx, "/onos.a1t.a1.PolicyService/PolicyDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) PolicyQuery(ctx context.Context, in *PolicyRequestMessage, opts ...grpc.CallOption) (*PolicyResultMessage, error) {
	out := new(PolicyResultMessage)
	err := c.cc.Invoke(ctx, "/onos.a1t.a1.PolicyService/PolicyQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) PolicyStatus(ctx context.Context, opts ...grpc.CallOption) (PolicyService_PolicyStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PolicyService_serviceDesc.Streams[0], "/onos.a1t.a1.PolicyService/PolicyStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &policyServicePolicyStatusClient{stream}
	return x, nil
}

type PolicyService_PolicyStatusClient interface {
	Send(*PolicyAckMessage) error
	Recv() (*PolicyStatusMessage, error)
	grpc.ClientStream
}

type policyServicePolicyStatusClient struct {
	grpc.ClientStream
}

func (x *policyServicePolicyStatusClient) Send(m *PolicyAckMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *policyServicePolicyStatusClient) Recv() (*PolicyStatusMessage, error) {
	m := new(PolicyStatusMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PolicyServiceServer is the server API for PolicyService service.
type PolicyServiceServer interface {
	PolicySetup(context.Context, *PolicyRequestMessage) (*PolicyResultMessage, error)
	PolicyUpdate(context.Context, *PolicyRequestMessage) (*PolicyResultMessage, error)
	PolicyDelete(context.Context, *PolicyRequestMessage) (*PolicyResultMessage, error)
	PolicyQuery(context.Context, *PolicyRequestMessage) (*PolicyResultMessage, error)
	PolicyStatus(PolicyService_PolicyStatusServer) error
}

// UnimplementedPolicyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPolicyServiceServer struct {
}

func (*UnimplementedPolicyServiceServer) PolicySetup(ctx context.Context, req *PolicyRequestMessage) (*PolicyResultMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicySetup not implemented")
}
func (*UnimplementedPolicyServiceServer) PolicyUpdate(ctx context.Context, req *PolicyRequestMessage) (*PolicyResultMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyUpdate not implemented")
}
func (*UnimplementedPolicyServiceServer) PolicyDelete(ctx context.Context, req *PolicyRequestMessage) (*PolicyResultMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyDelete not implemented")
}
func (*UnimplementedPolicyServiceServer) PolicyQuery(ctx context.Context, req *PolicyRequestMessage) (*PolicyResultMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PolicyQuery not implemented")
}
func (*UnimplementedPolicyServiceServer) PolicyStatus(srv PolicyService_PolicyStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method PolicyStatus not implemented")
}

func RegisterPolicyServiceServer(s *grpc.Server, srv PolicyServiceServer) {
	s.RegisterService(&_PolicyService_serviceDesc, srv)
}

func _PolicyService_PolicySetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).PolicySetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.a1t.a1.PolicyService/PolicySetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).PolicySetup(ctx, req.(*PolicyRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_PolicyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).PolicyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.a1t.a1.PolicyService/PolicyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).PolicyUpdate(ctx, req.(*PolicyRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_PolicyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).PolicyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.a1t.a1.PolicyService/PolicyDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).PolicyDelete(ctx, req.(*PolicyRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_PolicyQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).PolicyQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.a1t.a1.PolicyService/PolicyQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).PolicyQuery(ctx, req.(*PolicyRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_PolicyStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PolicyServiceServer).PolicyStatus(&policyServicePolicyStatusServer{stream})
}

type PolicyService_PolicyStatusServer interface {
	Send(*PolicyStatusMessage) error
	Recv() (*PolicyAckMessage, error)
	grpc.ServerStream
}

type policyServicePolicyStatusServer struct {
	grpc.ServerStream
}

func (x *policyServicePolicyStatusServer) Send(m *PolicyStatusMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *policyServicePolicyStatusServer) Recv() (*PolicyAckMessage, error) {
	m := new(PolicyAckMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PolicyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.a1t.a1.PolicyService",
	HandlerType: (*PolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PolicySetup",
			Handler:    _PolicyService_PolicySetup_Handler,
		},
		{
			MethodName: "PolicyUpdate",
			Handler:    _PolicyService_PolicyUpdate_Handler,
		},
		{
			MethodName: "PolicyDelete",
			Handler:    _PolicyService_PolicyDelete_Handler,
		},
		{
			MethodName: "PolicyQuery",
			Handler:    _PolicyService_PolicyQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PolicyStatus",
			Handler:       _PolicyService_PolicyStatus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "onos/a1t/a1/policy.proto",
}

func (m *PolicyType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPolicy(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPolicy(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPolicy(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PolicyRequestMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyRequestMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyRequestMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PolicyType != nil {
		{
			size, err := m.PolicyType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PolicyResultMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyResultMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyResultMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PolicyType != nil {
		{
			size, err := m.PolicyType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PolicyStatusMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyStatusMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyStatusMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PolicyType != nil {
		{
			size, err := m.PolicyType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PolicyAckMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyAckMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyAckMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PolicyType != nil {
		{
			size, err := m.PolicyType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPolicy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPolicy(dAtA []byte, offset int, v uint64) int {
	offset -= sovPolicy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PolicyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPolicy(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPolicy(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPolicy(uint64(l))
	}
	return n
}

func (m *PolicyRequestMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovPolicy(uint64(l))
	}
	if m.PolicyType != nil {
		l = m.PolicyType.Size()
		n += 1 + l + sovPolicy(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovPolicy(uint64(l))
	}
	return n
}

func (m *PolicyResultMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovPolicy(uint64(l))
	}
	if m.PolicyType != nil {
		l = m.PolicyType.Size()
		n += 1 + l + sovPolicy(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovPolicy(uint64(l))
	}
	return n
}

func (m *PolicyStatusMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovPolicy(uint64(l))
	}
	if m.PolicyType != nil {
		l = m.PolicyType.Size()
		n += 1 + l + sovPolicy(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovPolicy(uint64(l))
	}
	return n
}

func (m *PolicyAckMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovPolicy(uint64(l))
	}
	if m.PolicyType != nil {
		l = m.PolicyType.Size()
		n += 1 + l + sovPolicy(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovPolicy(uint64(l))
	}
	return n
}

func sovPolicy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPolicy(x uint64) (n int) {
	return sovPolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PolicyType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyRequestMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyRequestMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyRequestMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyType == nil {
				m.PolicyType = &PolicyType{}
			}
			if err := m.PolicyType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &RequestMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyResultMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyResultMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyResultMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyType == nil {
				m.PolicyType = &PolicyType{}
			}
			if err := m.PolicyType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &ResultMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyStatusMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyStatusMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyStatusMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyType == nil {
				m.PolicyType = &PolicyType{}
			}
			if err := m.PolicyType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &StatusMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyAckMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyAckMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyAckMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyType == nil {
				m.PolicyType = &PolicyType{}
			}
			if err := m.PolicyType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &AckMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPolicy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPolicy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPolicy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPolicy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPolicy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPolicy = fmt.Errorf("proto: unexpected end of group")
)
