// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/a1t/a1/ei.proto

// Package onos.a1t.a1 defines the interior gRPC interfaces for xApps to interact with A1T.

package a1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EIRequestMessage struct {
	Header  *Header         `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Message *RequestMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *EIRequestMessage) Reset()         { *m = EIRequestMessage{} }
func (m *EIRequestMessage) String() string { return proto.CompactTextString(m) }
func (*EIRequestMessage) ProtoMessage()    {}
func (*EIRequestMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_628d83a4c6742c6e, []int{0}
}
func (m *EIRequestMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EIRequestMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EIRequestMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EIRequestMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EIRequestMessage.Merge(m, src)
}
func (m *EIRequestMessage) XXX_Size() int {
	return m.Size()
}
func (m *EIRequestMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EIRequestMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EIRequestMessage proto.InternalMessageInfo

func (m *EIRequestMessage) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *EIRequestMessage) GetMessage() *RequestMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type EIResultMessage struct {
	Header  *Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Message *ResultMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *EIResultMessage) Reset()         { *m = EIResultMessage{} }
func (m *EIResultMessage) String() string { return proto.CompactTextString(m) }
func (*EIResultMessage) ProtoMessage()    {}
func (*EIResultMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_628d83a4c6742c6e, []int{1}
}
func (m *EIResultMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EIResultMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EIResultMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EIResultMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EIResultMessage.Merge(m, src)
}
func (m *EIResultMessage) XXX_Size() int {
	return m.Size()
}
func (m *EIResultMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EIResultMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EIResultMessage proto.InternalMessageInfo

func (m *EIResultMessage) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *EIResultMessage) GetMessage() *ResultMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type EIStatusMessage struct {
	Header  *Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Message *StatusMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *EIStatusMessage) Reset()         { *m = EIStatusMessage{} }
func (m *EIStatusMessage) String() string { return proto.CompactTextString(m) }
func (*EIStatusMessage) ProtoMessage()    {}
func (*EIStatusMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_628d83a4c6742c6e, []int{2}
}
func (m *EIStatusMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EIStatusMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EIStatusMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EIStatusMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EIStatusMessage.Merge(m, src)
}
func (m *EIStatusMessage) XXX_Size() int {
	return m.Size()
}
func (m *EIStatusMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EIStatusMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EIStatusMessage proto.InternalMessageInfo

func (m *EIStatusMessage) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *EIStatusMessage) GetMessage() *StatusMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type EIAckMessage struct {
	Header  *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Message *AckMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *EIAckMessage) Reset()         { *m = EIAckMessage{} }
func (m *EIAckMessage) String() string { return proto.CompactTextString(m) }
func (*EIAckMessage) ProtoMessage()    {}
func (*EIAckMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_628d83a4c6742c6e, []int{3}
}
func (m *EIAckMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EIAckMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EIAckMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EIAckMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EIAckMessage.Merge(m, src)
}
func (m *EIAckMessage) XXX_Size() int {
	return m.Size()
}
func (m *EIAckMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EIAckMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EIAckMessage proto.InternalMessageInfo

func (m *EIAckMessage) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *EIAckMessage) GetMessage() *AckMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*EIRequestMessage)(nil), "onos.a1t.a1.EIRequestMessage")
	golang_proto.RegisterType((*EIRequestMessage)(nil), "onos.a1t.a1.EIRequestMessage")
	proto.RegisterType((*EIResultMessage)(nil), "onos.a1t.a1.EIResultMessage")
	golang_proto.RegisterType((*EIResultMessage)(nil), "onos.a1t.a1.EIResultMessage")
	proto.RegisterType((*EIStatusMessage)(nil), "onos.a1t.a1.EIStatusMessage")
	golang_proto.RegisterType((*EIStatusMessage)(nil), "onos.a1t.a1.EIStatusMessage")
	proto.RegisterType((*EIAckMessage)(nil), "onos.a1t.a1.EIAckMessage")
	golang_proto.RegisterType((*EIAckMessage)(nil), "onos.a1t.a1.EIAckMessage")
}

func init() { proto.RegisterFile("onos/a1t/a1/ei.proto", fileDescriptor_628d83a4c6742c6e) }
func init() { golang_proto.RegisterFile("onos/a1t/a1/ei.proto", fileDescriptor_628d83a4c6742c6e) }

var fileDescriptor_628d83a4c6742c6e = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0xcf, 0xcb, 0x2f,
	0xd6, 0x4f, 0x34, 0x2c, 0xd1, 0x4f, 0x34, 0xd4, 0x4f, 0xcd, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x06, 0x89, 0xea, 0x25, 0x1a, 0x96, 0xe8, 0x25, 0x1a, 0x4a, 0x89, 0xa4, 0xe7, 0xa7,
	0xe7, 0x83, 0xc5, 0xf5, 0x41, 0x2c, 0x88, 0x12, 0x29, 0x14, 0x8d, 0x89, 0x86, 0x10, 0x51, 0xa5,
	0x32, 0x2e, 0x01, 0x57, 0xcf, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0xdf, 0xd4, 0xe2, 0xe2,
	0xc4, 0xf4, 0x54, 0x21, 0x6d, 0x2e, 0xb6, 0x8c, 0xd4, 0xc4, 0x94, 0xd4, 0x22, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0x6e, 0x23, 0x61, 0x3d, 0x24, 0xd3, 0xf5, 0x3c, 0xc0, 0x52, 0x41, 0x50, 0x25, 0x42,
	0xa6, 0x5c, 0xec, 0xb9, 0x10, 0x7d, 0x12, 0x4c, 0x60, 0xd5, 0xd2, 0x28, 0xaa, 0x51, 0x8d, 0x0e,
	0x82, 0xa9, 0x55, 0x2a, 0xe1, 0xe2, 0x07, 0xd9, 0x5b, 0x5c, 0x9a, 0x43, 0x9e, 0xb5, 0x26, 0xe8,
	0xd6, 0x4a, 0xa1, 0x59, 0x8b, 0x64, 0x32, 0x9a, 0xad, 0xc1, 0x25, 0x89, 0x25, 0xa5, 0xc5, 0xb4,
	0xb0, 0x15, 0xc5, 0x64, 0x84, 0xad, 0x79, 0x5c, 0x3c, 0xae, 0x9e, 0x8e, 0xc9, 0xd9, 0x64, 0x59,
	0x69, 0x88, 0x6e, 0xa5, 0x38, 0x8a, 0x6a, 0x84, 0xb1, 0x70, 0xfb, 0x8c, 0x76, 0xb2, 0x70, 0x71,
	0xba, 0x7a, 0x06, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0x79, 0x71, 0xb1, 0xbb, 0x7a, 0x06,
	0x96, 0xa6, 0x16, 0x55, 0x0a, 0xc9, 0xa0, 0x68, 0x45, 0x0b, 0x7f, 0x29, 0x59, 0x0c, 0x59, 0xe4,
	0xa8, 0xd3, 0x60, 0x34, 0x60, 0x14, 0xf2, 0xe5, 0xe2, 0x72, 0xf5, 0xf4, 0xca, 0x4f, 0x0a, 0x4e,
	0x2d, 0x29, 0x2d, 0xa0, 0xdc, 0x38, 0x3f, 0x2e, 0x6e, 0xb0, 0x71, 0xa1, 0x05, 0x29, 0x89, 0x25,
	0xa9, 0xd4, 0x33, 0xcf, 0x25, 0x35, 0x27, 0x95, 0x1a, 0xe6, 0x05, 0x83, 0x32, 0x07, 0xc8, 0xbb,
	0xe0, 0x78, 0xa5, 0x52, 0x18, 0xfa, 0x70, 0x09, 0x22, 0x19, 0xea, 0x97, 0x5f, 0x92, 0x99, 0x86,
	0x69, 0x2a, 0x4a, 0x4a, 0x92, 0x92, 0x44, 0x93, 0x45, 0x4a, 0x4b, 0x7e, 0x5c, 0xc2, 0x60, 0xd3,
	0x20, 0xce, 0x70, 0x49, 0xcd, 0xc9, 0x2c, 0x23, 0xec, 0x4a, 0xdc, 0xe6, 0x39, 0xc9, 0x9c, 0x78,
	0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x1c,
	0x78, 0x2c, 0xc7, 0x78, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x49, 0x6c, 0xe0, 0x42,
	0xc3, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x96, 0x2e, 0x23, 0x17, 0x85, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EIServiceClient is the client API for EIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EIServiceClient interface {
	EIQuery(ctx context.Context, opts ...grpc.CallOption) (EIService_EIQueryClient, error)
	EIJobSetup(ctx context.Context, opts ...grpc.CallOption) (EIService_EIJobSetupClient, error)
	EIJobUpdate(ctx context.Context, opts ...grpc.CallOption) (EIService_EIJobUpdateClient, error)
	EIJobDelete(ctx context.Context, opts ...grpc.CallOption) (EIService_EIJobDeleteClient, error)
	EIJobStatusQuery(ctx context.Context, opts ...grpc.CallOption) (EIService_EIJobStatusQueryClient, error)
	EIJobStatusNotify(ctx context.Context, in *EIStatusMessage, opts ...grpc.CallOption) (*EIAckMessage, error)
	EIJobResultDelivery(ctx context.Context, in *EIResultMessage, opts ...grpc.CallOption) (*EIAckMessage, error)
}

type eIServiceClient struct {
	cc *grpc.ClientConn
}

func NewEIServiceClient(cc *grpc.ClientConn) EIServiceClient {
	return &eIServiceClient{cc}
}

func (c *eIServiceClient) EIQuery(ctx context.Context, opts ...grpc.CallOption) (EIService_EIQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EIService_serviceDesc.Streams[0], "/onos.a1t.a1.EIService/EIQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &eIServiceEIQueryClient{stream}
	return x, nil
}

type EIService_EIQueryClient interface {
	Send(*EIResultMessage) error
	Recv() (*EIRequestMessage, error)
	grpc.ClientStream
}

type eIServiceEIQueryClient struct {
	grpc.ClientStream
}

func (x *eIServiceEIQueryClient) Send(m *EIResultMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eIServiceEIQueryClient) Recv() (*EIRequestMessage, error) {
	m := new(EIRequestMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eIServiceClient) EIJobSetup(ctx context.Context, opts ...grpc.CallOption) (EIService_EIJobSetupClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EIService_serviceDesc.Streams[1], "/onos.a1t.a1.EIService/EIJobSetup", opts...)
	if err != nil {
		return nil, err
	}
	x := &eIServiceEIJobSetupClient{stream}
	return x, nil
}

type EIService_EIJobSetupClient interface {
	Send(*EIResultMessage) error
	Recv() (*EIRequestMessage, error)
	grpc.ClientStream
}

type eIServiceEIJobSetupClient struct {
	grpc.ClientStream
}

func (x *eIServiceEIJobSetupClient) Send(m *EIResultMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eIServiceEIJobSetupClient) Recv() (*EIRequestMessage, error) {
	m := new(EIRequestMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eIServiceClient) EIJobUpdate(ctx context.Context, opts ...grpc.CallOption) (EIService_EIJobUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EIService_serviceDesc.Streams[2], "/onos.a1t.a1.EIService/EIJobUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &eIServiceEIJobUpdateClient{stream}
	return x, nil
}

type EIService_EIJobUpdateClient interface {
	Send(*EIResultMessage) error
	Recv() (*EIRequestMessage, error)
	grpc.ClientStream
}

type eIServiceEIJobUpdateClient struct {
	grpc.ClientStream
}

func (x *eIServiceEIJobUpdateClient) Send(m *EIResultMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eIServiceEIJobUpdateClient) Recv() (*EIRequestMessage, error) {
	m := new(EIRequestMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eIServiceClient) EIJobDelete(ctx context.Context, opts ...grpc.CallOption) (EIService_EIJobDeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EIService_serviceDesc.Streams[3], "/onos.a1t.a1.EIService/EIJobDelete", opts...)
	if err != nil {
		return nil, err
	}
	x := &eIServiceEIJobDeleteClient{stream}
	return x, nil
}

type EIService_EIJobDeleteClient interface {
	Send(*EIResultMessage) error
	Recv() (*EIRequestMessage, error)
	grpc.ClientStream
}

type eIServiceEIJobDeleteClient struct {
	grpc.ClientStream
}

func (x *eIServiceEIJobDeleteClient) Send(m *EIResultMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eIServiceEIJobDeleteClient) Recv() (*EIRequestMessage, error) {
	m := new(EIRequestMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eIServiceClient) EIJobStatusQuery(ctx context.Context, opts ...grpc.CallOption) (EIService_EIJobStatusQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EIService_serviceDesc.Streams[4], "/onos.a1t.a1.EIService/EIJobStatusQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &eIServiceEIJobStatusQueryClient{stream}
	return x, nil
}

type EIService_EIJobStatusQueryClient interface {
	Send(*EIResultMessage) error
	Recv() (*EIRequestMessage, error)
	grpc.ClientStream
}

type eIServiceEIJobStatusQueryClient struct {
	grpc.ClientStream
}

func (x *eIServiceEIJobStatusQueryClient) Send(m *EIResultMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eIServiceEIJobStatusQueryClient) Recv() (*EIRequestMessage, error) {
	m := new(EIRequestMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eIServiceClient) EIJobStatusNotify(ctx context.Context, in *EIStatusMessage, opts ...grpc.CallOption) (*EIAckMessage, error) {
	out := new(EIAckMessage)
	err := c.cc.Invoke(ctx, "/onos.a1t.a1.EIService/EIJobStatusNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eIServiceClient) EIJobResultDelivery(ctx context.Context, in *EIResultMessage, opts ...grpc.CallOption) (*EIAckMessage, error) {
	out := new(EIAckMessage)
	err := c.cc.Invoke(ctx, "/onos.a1t.a1.EIService/EIJobResultDelivery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EIServiceServer is the server API for EIService service.
type EIServiceServer interface {
	EIQuery(EIService_EIQueryServer) error
	EIJobSetup(EIService_EIJobSetupServer) error
	EIJobUpdate(EIService_EIJobUpdateServer) error
	EIJobDelete(EIService_EIJobDeleteServer) error
	EIJobStatusQuery(EIService_EIJobStatusQueryServer) error
	EIJobStatusNotify(context.Context, *EIStatusMessage) (*EIAckMessage, error)
	EIJobResultDelivery(context.Context, *EIResultMessage) (*EIAckMessage, error)
}

// UnimplementedEIServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEIServiceServer struct {
}

func (*UnimplementedEIServiceServer) EIQuery(srv EIService_EIQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method EIQuery not implemented")
}
func (*UnimplementedEIServiceServer) EIJobSetup(srv EIService_EIJobSetupServer) error {
	return status.Errorf(codes.Unimplemented, "method EIJobSetup not implemented")
}
func (*UnimplementedEIServiceServer) EIJobUpdate(srv EIService_EIJobUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method EIJobUpdate not implemented")
}
func (*UnimplementedEIServiceServer) EIJobDelete(srv EIService_EIJobDeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method EIJobDelete not implemented")
}
func (*UnimplementedEIServiceServer) EIJobStatusQuery(srv EIService_EIJobStatusQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method EIJobStatusQuery not implemented")
}
func (*UnimplementedEIServiceServer) EIJobStatusNotify(ctx context.Context, req *EIStatusMessage) (*EIAckMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EIJobStatusNotify not implemented")
}
func (*UnimplementedEIServiceServer) EIJobResultDelivery(ctx context.Context, req *EIResultMessage) (*EIAckMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EIJobResultDelivery not implemented")
}

func RegisterEIServiceServer(s *grpc.Server, srv EIServiceServer) {
	s.RegisterService(&_EIService_serviceDesc, srv)
}

func _EIService_EIQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EIServiceServer).EIQuery(&eIServiceEIQueryServer{stream})
}

type EIService_EIQueryServer interface {
	Send(*EIRequestMessage) error
	Recv() (*EIResultMessage, error)
	grpc.ServerStream
}

type eIServiceEIQueryServer struct {
	grpc.ServerStream
}

func (x *eIServiceEIQueryServer) Send(m *EIRequestMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eIServiceEIQueryServer) Recv() (*EIResultMessage, error) {
	m := new(EIResultMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EIService_EIJobSetup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EIServiceServer).EIJobSetup(&eIServiceEIJobSetupServer{stream})
}

type EIService_EIJobSetupServer interface {
	Send(*EIRequestMessage) error
	Recv() (*EIResultMessage, error)
	grpc.ServerStream
}

type eIServiceEIJobSetupServer struct {
	grpc.ServerStream
}

func (x *eIServiceEIJobSetupServer) Send(m *EIRequestMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eIServiceEIJobSetupServer) Recv() (*EIResultMessage, error) {
	m := new(EIResultMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EIService_EIJobUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EIServiceServer).EIJobUpdate(&eIServiceEIJobUpdateServer{stream})
}

type EIService_EIJobUpdateServer interface {
	Send(*EIRequestMessage) error
	Recv() (*EIResultMessage, error)
	grpc.ServerStream
}

type eIServiceEIJobUpdateServer struct {
	grpc.ServerStream
}

func (x *eIServiceEIJobUpdateServer) Send(m *EIRequestMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eIServiceEIJobUpdateServer) Recv() (*EIResultMessage, error) {
	m := new(EIResultMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EIService_EIJobDelete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EIServiceServer).EIJobDelete(&eIServiceEIJobDeleteServer{stream})
}

type EIService_EIJobDeleteServer interface {
	Send(*EIRequestMessage) error
	Recv() (*EIResultMessage, error)
	grpc.ServerStream
}

type eIServiceEIJobDeleteServer struct {
	grpc.ServerStream
}

func (x *eIServiceEIJobDeleteServer) Send(m *EIRequestMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eIServiceEIJobDeleteServer) Recv() (*EIResultMessage, error) {
	m := new(EIResultMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EIService_EIJobStatusQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EIServiceServer).EIJobStatusQuery(&eIServiceEIJobStatusQueryServer{stream})
}

type EIService_EIJobStatusQueryServer interface {
	Send(*EIRequestMessage) error
	Recv() (*EIResultMessage, error)
	grpc.ServerStream
}

type eIServiceEIJobStatusQueryServer struct {
	grpc.ServerStream
}

func (x *eIServiceEIJobStatusQueryServer) Send(m *EIRequestMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eIServiceEIJobStatusQueryServer) Recv() (*EIResultMessage, error) {
	m := new(EIResultMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EIService_EIJobStatusNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EIStatusMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIServiceServer).EIJobStatusNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.a1t.a1.EIService/EIJobStatusNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIServiceServer).EIJobStatusNotify(ctx, req.(*EIStatusMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EIService_EIJobResultDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EIResultMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EIServiceServer).EIJobResultDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.a1t.a1.EIService/EIJobResultDelivery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EIServiceServer).EIJobResultDelivery(ctx, req.(*EIResultMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _EIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.a1t.a1.EIService",
	HandlerType: (*EIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EIJobStatusNotify",
			Handler:    _EIService_EIJobStatusNotify_Handler,
		},
		{
			MethodName: "EIJobResultDelivery",
			Handler:    _EIService_EIJobResultDelivery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EIQuery",
			Handler:       _EIService_EIQuery_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "EIJobSetup",
			Handler:       _EIService_EIJobSetup_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "EIJobUpdate",
			Handler:       _EIService_EIJobUpdate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "EIJobDelete",
			Handler:       _EIService_EIJobDelete_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "EIJobStatusQuery",
			Handler:       _EIService_EIJobStatusQuery_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "onos/a1t/a1/ei.proto",
}

func (m *EIRequestMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EIRequestMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EIRequestMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EIResultMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EIResultMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EIResultMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EIStatusMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EIStatusMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EIStatusMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EIAckMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EIAckMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EIAckMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEi(dAtA []byte, offset int, v uint64) int {
	offset -= sovEi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EIRequestMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovEi(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovEi(uint64(l))
	}
	return n
}

func (m *EIResultMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovEi(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovEi(uint64(l))
	}
	return n
}

func (m *EIStatusMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovEi(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovEi(uint64(l))
	}
	return n
}

func (m *EIAckMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovEi(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovEi(uint64(l))
	}
	return n
}

func sovEi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEi(x uint64) (n int) {
	return sovEi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EIRequestMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EIRequestMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EIRequestMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &RequestMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EIResultMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EIResultMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EIResultMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &ResultMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EIStatusMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EIStatusMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EIStatusMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &StatusMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EIAckMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EIAckMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EIAckMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &AckMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEi = fmt.Errorf("proto: unexpected end of group")
)
