// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/config/v2/transaction.proto

package v2

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TransactionState is the transaction state of a transaction phase
type TransactionState int32

const (
	// TRANSACTION_PENDING indicates the transaction is pending
	TransactionState_TRANSACTION_PENDING TransactionState = 0
	// TRANSACTION_COMPLETE indicates the transaction is complete
	TransactionState_TRANSACTION_COMPLETE TransactionState = 2
	// TRANSACTION_FAILED indicates the transaction failed
	TransactionState_TRANSACTION_FAILED TransactionState = 3
	// TRANSACTION_VALIDATING indicates the transaction is in the validating state
	TransactionState_TRANSACTION_VALIDATING TransactionState = 4
	// TRANSACTION_APPLYING indicates the transaction is in the applying state
	TransactionState_TRANSACTION_APPLYING TransactionState = 5
)

var TransactionState_name = map[int32]string{
	0: "TRANSACTION_PENDING",
	2: "TRANSACTION_COMPLETE",
	3: "TRANSACTION_FAILED",
	4: "TRANSACTION_VALIDATING",
	5: "TRANSACTION_APPLYING",
}

var TransactionState_value = map[string]int32{
	"TRANSACTION_PENDING":    0,
	"TRANSACTION_COMPLETE":   2,
	"TRANSACTION_FAILED":     3,
	"TRANSACTION_VALIDATING": 4,
	"TRANSACTION_APPLYING":   5,
}

func (x TransactionState) String() string {
	return proto.EnumName(TransactionState_name, int32(x))
}

func (TransactionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c3a2d73bdadccc35, []int{0}
}

// TransactionPhase is the phase of a Transaction
type TransactionPhase int32

const (
	// TRANSACTION_CHANGE indicates the transaction has been requested
	TransactionPhase_TRANSACTION_CHANGE TransactionPhase = 0
	// TRANSACTION_ROLLBACK indicates a rollback has been requested for the transaction
	TransactionPhase_TRANSACTION_ROLLBACK TransactionPhase = 1
)

var TransactionPhase_name = map[int32]string{
	0: "TRANSACTION_CHANGE",
	1: "TRANSACTION_ROLLBACK",
}

var TransactionPhase_value = map[string]int32{
	"TRANSACTION_CHANGE":   0,
	"TRANSACTION_ROLLBACK": 1,
}

func (x TransactionPhase) String() string {
	return proto.EnumName(TransactionPhase_name, int32(x))
}

func (TransactionPhase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c3a2d73bdadccc35, []int{1}
}

// TransactionEventType transaction event types for transaction store
type TransactionEventType int32

const (
	TransactionEventType_TRANSACTION_EVENT_UNKNOWN TransactionEventType = 0
	TransactionEventType_TRANSACTION_CREATED       TransactionEventType = 1
	TransactionEventType_TRANSACTION_UPDATED       TransactionEventType = 2
	TransactionEventType_TRANSACTION_DELETED       TransactionEventType = 3
	TransactionEventType_TRANSACTION_REPLAYED      TransactionEventType = 4
)

var TransactionEventType_name = map[int32]string{
	0: "TRANSACTION_EVENT_UNKNOWN",
	1: "TRANSACTION_CREATED",
	2: "TRANSACTION_UPDATED",
	3: "TRANSACTION_DELETED",
	4: "TRANSACTION_REPLAYED",
}

var TransactionEventType_value = map[string]int32{
	"TRANSACTION_EVENT_UNKNOWN": 0,
	"TRANSACTION_CREATED":       1,
	"TRANSACTION_UPDATED":       2,
	"TRANSACTION_DELETED":       3,
	"TRANSACTION_REPLAYED":      4,
}

func (x TransactionEventType) String() string {
	return proto.EnumName(TransactionEventType_name, int32(x))
}

func (TransactionEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c3a2d73bdadccc35, []int{2}
}

// Transaction refers to a multi-target transactional change
type Transaction struct {
	// 'id' is the unique identifier of the transaction
	// This field should be set prior to persisting the object.
	ID TransactionID `protobuf:"bytes,1,opt,name=id,proto3,casttype=TransactionID" json:"id,omitempty"`
	// 'index' is a monotonically increasing, globally unique index of the change
	// The index is provided by the store, is static and unique for each unique change identifier,
	// and should not be modified by client code.
	Index Index `protobuf:"varint,2,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
	// 'revision' is the change revision number
	// The revision number is provided by the store and should not be modified by client code.
	// Each unique state of the change will be assigned a unique revision number which can be
	// used for optimistic concurrency control when updating or deleting the change state.
	Revision Revision `protobuf:"varint,3,opt,name=revision,proto3,casttype=Revision" json:"revision,omitempty"`
	// 'status' is the current lifecycle status of the transaction
	Status TransactionStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status"`
	// 'created' is the time at which the transaction was created
	Created time.Time `protobuf:"bytes,5,opt,name=created,proto3,stdtime" json:"created"`
	// 'updated' is the time at which the transaction was last updated
	Updated time.Time `protobuf:"bytes,6,opt,name=updated,proto3,stdtime" json:"updated"`
	// 'changes' is a set of changes to apply to targets
	// The list of changes should contain only a single change per target/version pair.
	Changes []Change `protobuf:"bytes,7,rep,name=changes,proto3" json:"changes"`
	// 'deleted' is a flag indicating whether this transaction is being deleted by a snapshot
	Deleted bool `protobuf:"varint,8,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// 'dependency' is a reference to the transaction on which this transaction is dependent
	Dependency *TransactionRef `protobuf:"bytes,9,opt,name=dependency,proto3" json:"dependency,omitempty"`
	// 'dependents' is a list of references to transactions that depend on this transaction
	Dependents []TransactionRef `protobuf:"bytes,10,rep,name=dependents,proto3" json:"dependents"`
	// 'username' is the name of the user that made the transaction
	Username string `protobuf:"bytes,11,opt,name=username,proto3" json:"username,omitempty"`
	// atomic determines if a transaction is atomic or not
	Atomic bool `protobuf:"varint,12,opt,name=atomic,proto3" json:"atomic,omitempty"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3a2d73bdadccc35, []int{0}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetID() TransactionID {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Transaction) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Transaction) GetRevision() Revision {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *Transaction) GetStatus() TransactionStatus {
	if m != nil {
		return m.Status
	}
	return TransactionStatus{}
}

func (m *Transaction) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *Transaction) GetUpdated() time.Time {
	if m != nil {
		return m.Updated
	}
	return time.Time{}
}

func (m *Transaction) GetChanges() []Change {
	if m != nil {
		return m.Changes
	}
	return nil
}

func (m *Transaction) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *Transaction) GetDependency() *TransactionRef {
	if m != nil {
		return m.Dependency
	}
	return nil
}

func (m *Transaction) GetDependents() []TransactionRef {
	if m != nil {
		return m.Dependents
	}
	return nil
}

func (m *Transaction) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Transaction) GetAtomic() bool {
	if m != nil {
		return m.Atomic
	}
	return false
}

// TransactionRef is a reference to a transaction
type TransactionRef struct {
	// Types that are valid to be assigned to Id:
	//	*TransactionRef_None
	//	*TransactionRef_TransactionID
	Id isTransactionRef_Id `protobuf_oneof:"id"`
}

func (m *TransactionRef) Reset()         { *m = TransactionRef{} }
func (m *TransactionRef) String() string { return proto.CompactTextString(m) }
func (*TransactionRef) ProtoMessage()    {}
func (*TransactionRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3a2d73bdadccc35, []int{1}
}
func (m *TransactionRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionRef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionRef.Merge(m, src)
}
func (m *TransactionRef) XXX_Size() int {
	return m.Size()
}
func (m *TransactionRef) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionRef.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionRef proto.InternalMessageInfo

type isTransactionRef_Id interface {
	isTransactionRef_Id()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TransactionRef_None struct {
	None *types.Empty `protobuf:"bytes,1,opt,name=none,proto3,oneof" json:"none,omitempty"`
}
type TransactionRef_TransactionID struct {
	TransactionID TransactionID `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3,oneof,casttype=TransactionID" json:"transaction_id,omitempty"`
}

func (*TransactionRef_None) isTransactionRef_Id()          {}
func (*TransactionRef_TransactionID) isTransactionRef_Id() {}

func (m *TransactionRef) GetId() isTransactionRef_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TransactionRef) GetNone() *types.Empty {
	if x, ok := m.GetId().(*TransactionRef_None); ok {
		return x.None
	}
	return nil
}

func (m *TransactionRef) GetTransactionID() TransactionID {
	if x, ok := m.GetId().(*TransactionRef_TransactionID); ok {
		return x.TransactionID
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TransactionRef) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TransactionRef_None)(nil),
		(*TransactionRef_TransactionID)(nil),
	}
}

// Change represents a configuration change to a single target
type Change struct {
	// 'target_id' is the identifier of the target to which this change applies
	TargetID TargetID `protobuf:"bytes,1,opt,name=target_id,json=targetId,proto3,casttype=TargetID" json:"target_id,omitempty"`
	// 'target_version' is an optional target version to which to apply this change
	TargetVersion TargetVersion `protobuf:"bytes,2,opt,name=target_version,json=targetVersion,proto3,casttype=TargetVersion" json:"target_version,omitempty"`
	// 'target_type' is an optional target type to which to apply this change
	TargetType TargetType `protobuf:"bytes,3,opt,name=target_type,json=targetType,proto3,casttype=TargetType" json:"target_type,omitempty"`
	// 'values' is a set of change values to apply
	Values []ChangeValue `protobuf:"bytes,4,rep,name=values,proto3" json:"values"`
}

func (m *Change) Reset()         { *m = Change{} }
func (m *Change) String() string { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()    {}
func (*Change) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3a2d73bdadccc35, []int{2}
}
func (m *Change) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Change) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Change.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Change) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change.Merge(m, src)
}
func (m *Change) XXX_Size() int {
	return m.Size()
}
func (m *Change) XXX_DiscardUnknown() {
	xxx_messageInfo_Change.DiscardUnknown(m)
}

var xxx_messageInfo_Change proto.InternalMessageInfo

func (m *Change) GetTargetID() TargetID {
	if m != nil {
		return m.TargetID
	}
	return ""
}

func (m *Change) GetTargetVersion() TargetVersion {
	if m != nil {
		return m.TargetVersion
	}
	return ""
}

func (m *Change) GetTargetType() TargetType {
	if m != nil {
		return m.TargetType
	}
	return ""
}

func (m *Change) GetValues() []ChangeValue {
	if m != nil {
		return m.Values
	}
	return nil
}

// ChangeValue is an individual Path/Value and removed flag combination in a Change
type ChangeValue struct {
	// 'path' is the path to change
	Path string `protobuf:"bytes,1,opt,name=path,json=Path,proto3" json:"Path,omitempty"`
	// 'value' is the change value
	Value TypedValue `protobuf:"bytes,2,opt,name=value,json=Value,proto3" json:"Value,omitempty"`
	// 'delete' indicates whether this is a delete
	Delete bool `protobuf:"varint,3,opt,name=delete,proto3" json:"Delete,omitempty"`
}

func (m *ChangeValue) Reset()         { *m = ChangeValue{} }
func (m *ChangeValue) String() string { return proto.CompactTextString(m) }
func (*ChangeValue) ProtoMessage()    {}
func (*ChangeValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3a2d73bdadccc35, []int{3}
}
func (m *ChangeValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeValue.Merge(m, src)
}
func (m *ChangeValue) XXX_Size() int {
	return m.Size()
}
func (m *ChangeValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeValue.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeValue proto.InternalMessageInfo

func (m *ChangeValue) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ChangeValue) GetValue() TypedValue {
	if m != nil {
		return m.Value
	}
	return TypedValue{}
}

func (m *ChangeValue) GetDelete() bool {
	if m != nil {
		return m.Delete
	}
	return false
}

// TransactionStatus is the status of a Transaction
type TransactionStatus struct {
	// 'phase' is the current phase of the
	Phase TransactionPhase `protobuf:"varint,1,opt,name=phase,proto3,enum=onos.config.v2.TransactionPhase" json:"phase,omitempty"`
	// 'state' is the state of the transaction within a Phase
	State TransactionState `protobuf:"varint,2,opt,name=state,proto3,enum=onos.config.v2.TransactionState" json:"state,omitempty"`
}

func (m *TransactionStatus) Reset()         { *m = TransactionStatus{} }
func (m *TransactionStatus) String() string { return proto.CompactTextString(m) }
func (*TransactionStatus) ProtoMessage()    {}
func (*TransactionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3a2d73bdadccc35, []int{4}
}
func (m *TransactionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionStatus.Merge(m, src)
}
func (m *TransactionStatus) XXX_Size() int {
	return m.Size()
}
func (m *TransactionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionStatus proto.InternalMessageInfo

func (m *TransactionStatus) GetPhase() TransactionPhase {
	if m != nil {
		return m.Phase
	}
	return TransactionPhase_TRANSACTION_CHANGE
}

func (m *TransactionStatus) GetState() TransactionState {
	if m != nil {
		return m.State
	}
	return TransactionState_TRANSACTION_PENDING
}

// TransactionEvent transaction store event
type TransactionEvent struct {
	Type        TransactionEventType `protobuf:"varint,1,opt,name=type,proto3,enum=onos.config.v2.TransactionEventType" json:"type,omitempty"`
	Transaction Transaction          `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction"`
}

func (m *TransactionEvent) Reset()         { *m = TransactionEvent{} }
func (m *TransactionEvent) String() string { return proto.CompactTextString(m) }
func (*TransactionEvent) ProtoMessage()    {}
func (*TransactionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3a2d73bdadccc35, []int{5}
}
func (m *TransactionEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionEvent.Merge(m, src)
}
func (m *TransactionEvent) XXX_Size() int {
	return m.Size()
}
func (m *TransactionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionEvent proto.InternalMessageInfo

func (m *TransactionEvent) GetType() TransactionEventType {
	if m != nil {
		return m.Type
	}
	return TransactionEventType_TRANSACTION_EVENT_UNKNOWN
}

func (m *TransactionEvent) GetTransaction() Transaction {
	if m != nil {
		return m.Transaction
	}
	return Transaction{}
}

func init() {
	proto.RegisterEnum("onos.config.v2.TransactionState", TransactionState_name, TransactionState_value)
	proto.RegisterEnum("onos.config.v2.TransactionPhase", TransactionPhase_name, TransactionPhase_value)
	proto.RegisterEnum("onos.config.v2.TransactionEventType", TransactionEventType_name, TransactionEventType_value)
	proto.RegisterType((*Transaction)(nil), "onos.config.v2.Transaction")
	proto.RegisterType((*TransactionRef)(nil), "onos.config.v2.TransactionRef")
	proto.RegisterType((*Change)(nil), "onos.config.v2.Change")
	proto.RegisterType((*ChangeValue)(nil), "onos.config.v2.ChangeValue")
	proto.RegisterType((*TransactionStatus)(nil), "onos.config.v2.TransactionStatus")
	proto.RegisterType((*TransactionEvent)(nil), "onos.config.v2.TransactionEvent")
}

func init() { proto.RegisterFile("onos/config/v2/transaction.proto", fileDescriptor_c3a2d73bdadccc35) }

var fileDescriptor_c3a2d73bdadccc35 = []byte{
	// 936 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x41, 0x6f, 0xe2, 0x46,
	0x18, 0xc5, 0xc4, 0x10, 0xf8, 0xd8, 0x50, 0x76, 0x1a, 0x25, 0x2e, 0x51, 0x31, 0x45, 0x55, 0x8b,
	0xa2, 0x08, 0xa4, 0x54, 0x5d, 0x6d, 0x2f, 0x5b, 0xd9, 0xd8, 0xdd, 0x58, 0xa1, 0x04, 0xcd, 0x7a,
	0x53, 0xed, 0x29, 0xf2, 0xe2, 0x09, 0xb1, 0x14, 0x6c, 0x0b, 0x0f, 0xa8, 0x9c, 0xfb, 0x07, 0xb6,
	0xea, 0xad, 0x3f, 0xa2, 0xbf, 0x63, 0x4f, 0xd5, 0x1e, 0x7b, 0x72, 0x2b, 0xa2, 0x5e, 0xf2, 0x13,
	0x72, 0xaa, 0x66, 0xc6, 0xb0, 0x8e, 0xb3, 0xa2, 0xda, 0x9b, 0x67, 0xde, 0x7b, 0xdf, 0xbc, 0xef,
	0x9b, 0x37, 0x86, 0x66, 0xe0, 0x07, 0x51, 0x77, 0x14, 0xf8, 0x97, 0xde, 0xb8, 0x3b, 0x3f, 0xee,
	0xd2, 0xa9, 0xe3, 0x47, 0xce, 0x88, 0x7a, 0x81, 0xdf, 0x09, 0xa7, 0x01, 0x0d, 0x50, 0x95, 0x31,
	0x3a, 0x82, 0xd1, 0x99, 0x1f, 0xd7, 0xd5, 0x71, 0x10, 0x8c, 0xaf, 0x49, 0x97, 0xa3, 0xaf, 0x67,
	0x97, 0x5d, 0xea, 0x4d, 0x48, 0x44, 0x9d, 0x49, 0x28, 0x04, 0xf5, 0x83, 0x2c, 0x81, 0x4c, 0x42,
	0xba, 0x48, 0xc0, 0xdd, 0x71, 0x30, 0x0e, 0xf8, 0x67, 0x97, 0x7d, 0x25, 0xbb, 0xf5, 0x8c, 0x8b,
	0xb9, 0x73, 0x3d, 0x23, 0x02, 0x6b, 0xfd, 0x29, 0x43, 0xc5, 0x7e, 0xef, 0x0a, 0x7d, 0x0d, 0x79,
	0xcf, 0x55, 0xa4, 0xa6, 0xd4, 0x2e, 0xeb, 0xfb, 0xcb, 0x58, 0xcd, 0x5b, 0xc6, 0x5d, 0xac, 0xee,
	0xa4, 0x28, 0x96, 0x81, 0xf3, 0x9e, 0x8b, 0x54, 0x28, 0x78, 0xbe, 0x4b, 0x7e, 0x56, 0xf2, 0x4d,
	0xa9, 0x2d, 0xeb, 0xe5, 0xbb, 0x58, 0x2d, 0x58, 0x6c, 0x03, 0x8b, 0x7d, 0xd4, 0x86, 0xd2, 0x94,
	0xcc, 0xbd, 0xc8, 0x0b, 0x7c, 0x65, 0x8b, 0x73, 0x1e, 0xdd, 0xc5, 0x6a, 0x09, 0x27, 0x7b, 0x78,
	0x8d, 0xa2, 0xef, 0xa1, 0x18, 0x51, 0x87, 0xce, 0x22, 0x45, 0x6e, 0x4a, 0xed, 0xca, 0xf1, 0x17,
	0x9d, 0xfb, 0x43, 0xe9, 0xa4, 0x4e, 0x7f, 0xc1, 0x89, 0xba, 0xfc, 0x36, 0x56, 0x73, 0x38, 0x91,
	0xa1, 0x67, 0xb0, 0x3d, 0x9a, 0x12, 0x87, 0x12, 0x57, 0x29, 0xf0, 0x0a, 0xf5, 0x8e, 0x98, 0x52,
	0x67, 0x35, 0xa5, 0x8e, 0xbd, 0x1a, 0xa3, 0x5e, 0x62, 0xd2, 0x37, 0x7f, 0xab, 0x12, 0x5e, 0x89,
	0x98, 0x7e, 0x16, 0xba, 0x5c, 0x5f, 0xfc, 0x18, 0x7d, 0x22, 0x42, 0x4f, 0x60, 0x7b, 0x74, 0xe5,
	0xf8, 0x63, 0x12, 0x29, 0xdb, 0xcd, 0xad, 0x76, 0xe5, 0x78, 0x2f, 0xdb, 0x41, 0x8f, 0xc3, 0x89,
	0xed, 0x15, 0x19, 0x29, 0xb0, 0xed, 0x92, 0x6b, 0xc2, 0xce, 0x2d, 0x35, 0xa5, 0x76, 0x09, 0xaf,
	0x96, 0xe8, 0x19, 0x80, 0x4b, 0x42, 0xe2, 0xbb, 0xc4, 0x1f, 0x2d, 0x94, 0x32, 0x37, 0xd5, 0xd8,
	0x30, 0x16, 0x4c, 0x2e, 0x71, 0x4a, 0x81, 0x8c, 0xf7, 0x7a, 0x1a, 0x29, 0xc0, 0x4d, 0xfd, 0x8f,
	0x3e, 0x31, 0x97, 0xd2, 0xa1, 0x3a, 0x94, 0x66, 0x11, 0x99, 0xfa, 0xce, 0x84, 0x28, 0x15, 0x16,
	0x09, 0xbc, 0x5e, 0xa3, 0x3d, 0x28, 0x3a, 0x34, 0x98, 0x78, 0x23, 0xe5, 0x11, 0xb7, 0x9e, 0xac,
	0x5a, 0xbf, 0x4a, 0x50, 0xbd, 0x5f, 0x18, 0x1d, 0x81, 0xec, 0x07, 0x3e, 0xe1, 0xa9, 0x62, 0xb3,
	0xc9, 0xce, 0xd6, 0x64, 0x09, 0x3e, 0xc9, 0x61, 0xce, 0x42, 0xa7, 0x50, 0x4d, 0x3d, 0x93, 0x0b,
	0xcf, 0xe5, 0x09, 0x2b, 0xeb, 0xad, 0x65, 0x36, 0x87, 0x0f, 0x82, 0x79, 0x92, 0xc3, 0x3b, 0x29,
	0xad, 0xe5, 0xea, 0x32, 0x8b, 0x73, 0xeb, 0x5f, 0x09, 0x8a, 0xe2, 0x06, 0xd0, 0xb7, 0x50, 0xa6,
	0xce, 0x74, 0x4c, 0xe8, 0xc5, 0x3a, 0xe6, 0xca, 0x32, 0x56, 0x4b, 0x36, 0xdf, 0xe4, 0x35, 0xd7,
	0xdf, 0xb8, 0x24, 0xa8, 0x96, 0x8b, 0x9e, 0x42, 0x35, 0x91, 0xcd, 0xc9, 0x94, 0x47, 0x5a, 0x98,
	0x7a, 0xcc, 0x3d, 0x70, 0xe4, 0x5c, 0x00, 0x78, 0x87, 0xa6, 0x97, 0xa8, 0x0b, 0x95, 0x44, 0x49,
	0x17, 0x21, 0xe1, 0x2f, 0xa1, 0xac, 0x57, 0xef, 0x62, 0x15, 0x84, 0xcc, 0x5e, 0x84, 0x04, 0x03,
	0x5d, 0x7f, 0xa3, 0xef, 0xa0, 0xc8, 0x1f, 0x28, 0x7b, 0x0d, 0xec, 0xda, 0x0e, 0x3e, 0x9c, 0xa5,
	0x73, 0xc6, 0x59, 0xbd, 0x03, 0x21, 0x68, 0xfd, 0x21, 0x41, 0x25, 0x85, 0xa2, 0xaf, 0x40, 0x0e,
	0x1d, 0x7a, 0x95, 0xf4, 0x89, 0x6e, 0x63, 0xb5, 0x3a, 0x74, 0xe8, 0xd5, 0x51, 0x30, 0xf1, 0x28,
	0xff, 0x6d, 0x60, 0x99, 0xad, 0x91, 0x05, 0x05, 0x5e, 0x81, 0x37, 0xc5, 0xd2, 0x9f, 0x0d, 0xca,
	0x22, 0x24, 0xae, 0x38, 0x70, 0x9f, 0x1d, 0x78, 0x1b, 0xab, 0x9f, 0xf0, 0x65, 0xaa, 0x52, 0x41,
	0x1c, 0x79, 0x04, 0x45, 0x91, 0x61, 0xde, 0x69, 0x49, 0xdf, 0xbd, 0x8d, 0xd5, 0x9a, 0xc1, 0x77,
	0x52, 0xe4, 0x84, 0xd3, 0xfa, 0x45, 0x82, 0xc7, 0x0f, 0x1e, 0x37, 0x7a, 0x02, 0x85, 0xf0, 0xca,
	0x89, 0x44, 0x60, 0xaa, 0xc7, 0xcd, 0x0d, 0xb9, 0x1d, 0x32, 0x1e, 0x16, 0x74, 0xa6, 0x63, 0x3f,
	0x04, 0xd1, 0xc6, 0x66, 0x1d, 0x3b, 0x89, 0x60, 0x41, 0x67, 0x91, 0xad, 0xa5, 0x30, 0x73, 0x4e,
	0x7c, 0x8a, 0x9e, 0x82, 0xcc, 0x2f, 0x4c, 0x78, 0xf8, 0x72, 0x43, 0x2d, 0xce, 0xe7, 0xd7, 0xc8,
	0x15, 0xa8, 0x07, 0x95, 0x54, 0x08, 0x93, 0x99, 0x1e, 0x6c, 0x28, 0x90, 0xdc, 0x62, 0x5a, 0x75,
	0xf8, 0xdb, 0x7d, 0x4f, 0xdc, 0x2f, 0xda, 0x87, 0x4f, 0x6d, 0xac, 0x0d, 0x5e, 0x68, 0x3d, 0xdb,
	0x3a, 0x1b, 0x5c, 0x0c, 0xcd, 0x81, 0x61, 0x0d, 0x9e, 0xd7, 0x72, 0x48, 0x81, 0xdd, 0x34, 0xd0,
	0x3b, 0xfb, 0x71, 0xd8, 0x37, 0x6d, 0xb3, 0x96, 0x47, 0x7b, 0x80, 0xd2, 0xc8, 0x0f, 0x9a, 0xd5,
	0x37, 0x8d, 0xda, 0x16, 0xaa, 0xc3, 0x5e, 0x7a, 0xff, 0x5c, 0xeb, 0x5b, 0x86, 0x66, 0xb3, 0x6a,
	0x72, 0xb6, 0x9a, 0x36, 0x1c, 0xf6, 0x5f, 0x31, 0xa4, 0x70, 0x68, 0xdc, 0x33, 0xc5, 0x87, 0x9f,
	0x3d, 0xa1, 0x77, 0xa2, 0x0d, 0x9e, 0x9b, 0x0f, 0x3d, 0xe1, 0xb3, 0x7e, 0x5f, 0xd7, 0x7a, 0xa7,
	0x35, 0xe9, 0xf0, 0x77, 0x09, 0x76, 0x3f, 0x34, 0x3f, 0xf4, 0x39, 0x7c, 0x96, 0x96, 0x98, 0xe7,
	0xe6, 0xc0, 0xbe, 0x78, 0x39, 0x38, 0x1d, 0x9c, 0xfd, 0x34, 0xa8, 0xe5, 0xb2, 0xed, 0xf7, 0xb0,
	0xa9, 0xd9, 0xa6, 0x51, 0x93, 0xb2, 0xc0, 0xcb, 0xa1, 0xc1, 0x81, 0x7c, 0x16, 0x30, 0x4c, 0x36,
	0x15, 0xd6, 0x7e, 0xd6, 0x9c, 0x39, 0xec, 0x6b, 0xaf, 0x4c, 0xa3, 0x26, 0xeb, 0xca, 0xdb, 0x65,
	0x43, 0x7a, 0xb7, 0x6c, 0x48, 0xff, 0x2c, 0x1b, 0xd2, 0x9b, 0x9b, 0x46, 0xee, 0xdd, 0x4d, 0x23,
	0xf7, 0xd7, 0x4d, 0x23, 0xf7, 0xba, 0xc8, 0x7f, 0x58, 0xdf, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff,
	0x11, 0x0e, 0x53, 0x99, 0xd5, 0x07, 0x00, 0x00,
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Atomic {
		i--
		if m.Atomic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Dependents) > 0 {
		for iNdEx := len(m.Dependents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dependents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransaction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Dependency != nil {
		{
			size, err := m.Dependency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransaction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Changes) > 0 {
		for iNdEx := len(m.Changes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Changes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransaction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Updated, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTransaction(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintTransaction(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTransaction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Revision != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.Revision))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size := m.Id.Size()
			i -= size
			if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TransactionRef_None) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionRef_None) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.None != nil {
		{
			size, err := m.None.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransaction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *TransactionRef_TransactionID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionRef_TransactionID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.TransactionID)
	copy(dAtA[i:], m.TransactionID)
	i = encodeVarintTransaction(dAtA, i, uint64(len(m.TransactionID)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *Change) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransaction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TargetType) > 0 {
		i -= len(m.TargetType)
		copy(dAtA[i:], m.TargetType)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.TargetType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TargetVersion) > 0 {
		i -= len(m.TargetVersion)
		copy(dAtA[i:], m.TargetVersion)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.TargetVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TargetID) > 0 {
		i -= len(m.TargetID)
		copy(dAtA[i:], m.TargetID)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.TargetID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChangeValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Delete {
		i--
		if m.Delete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTransaction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.Phase != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.Phase))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTransaction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Type != 0 {
		i = encodeVarintTransaction(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransaction(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransaction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovTransaction(uint64(m.Index))
	}
	if m.Revision != 0 {
		n += 1 + sovTransaction(uint64(m.Revision))
	}
	l = m.Status.Size()
	n += 1 + l + sovTransaction(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovTransaction(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated)
	n += 1 + l + sovTransaction(uint64(l))
	if len(m.Changes) > 0 {
		for _, e := range m.Changes {
			l = e.Size()
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	if m.Deleted {
		n += 2
	}
	if m.Dependency != nil {
		l = m.Dependency.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if len(m.Dependents) > 0 {
		for _, e := range m.Dependents {
			l = e.Size()
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Atomic {
		n += 2
	}
	return n
}

func (m *TransactionRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += m.Id.Size()
	}
	return n
}

func (m *TransactionRef_None) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.None != nil {
		l = m.None.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}
func (m *TransactionRef_TransactionID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransactionID)
	n += 1 + l + sovTransaction(uint64(l))
	return n
}
func (m *Change) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TargetID)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.TargetVersion)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.TargetType)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	return n
}

func (m *ChangeValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovTransaction(uint64(l))
	if m.Delete {
		n += 2
	}
	return n
}

func (m *TransactionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Phase != 0 {
		n += 1 + sovTransaction(uint64(m.Phase))
	}
	if m.State != 0 {
		n += 1 + sovTransaction(uint64(m.State))
	}
	return n
}

func (m *TransactionEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTransaction(uint64(m.Type))
	}
	l = m.Transaction.Size()
	n += 1 + l + sovTransaction(uint64(l))
	return n
}

func sovTransaction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransaction(x uint64) (n int) {
	return sovTransaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = TransactionID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= Revision(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Updated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Changes = append(m.Changes, Change{})
			if err := m.Changes[len(m.Changes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dependency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dependency == nil {
				m.Dependency = &TransactionRef{}
			}
			if err := m.Dependency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dependents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dependents = append(m.Dependents, TransactionRef{})
			if err := m.Dependents[len(m.Dependents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atomic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Atomic = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Id = &TransactionRef_None{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = &TransactionRef_TransactionID{TransactionID(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Change) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Change: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Change: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetID = TargetID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetVersion = TargetVersion(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetType = TargetType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, ChangeValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Delete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= TransactionPhase(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= TransactionState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TransactionEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransaction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransaction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransaction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransaction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransaction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransaction = fmt.Errorf("proto: unexpected end of group")
)
