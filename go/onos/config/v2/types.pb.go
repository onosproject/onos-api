// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/config/v2/types.proto

package v2

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Phase is the phase of a NetworkChange
type Phase int32

const (
	// CHANGE indicates the change has been requested
	Phase_CHANGE Phase = 0
	// ROLLBACK indicates a rollback has been requested for the change
	Phase_ROLLBACK Phase = 1
)

var Phase_name = map[int32]string{
	0: "CHANGE",
	1: "ROLLBACK",
}

var Phase_value = map[string]int32{
	"CHANGE":   0,
	"ROLLBACK": 1,
}

func (x Phase) String() string {
	return proto.EnumName(Phase_name, int32(x))
}

func (Phase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f062853b34af6d81, []int{0}
}

// State is the state of a phase
type State int32

const (
	// PENDING indicates the phase is pending
	State_PENDING State = 0
	// COMPLETE indicates the phase is complete
	State_COMPLETE State = 2
	// FAILED indicates the phase failed
	State_FAILED State = 3
)

var State_name = map[int32]string{
	0: "PENDING",
	2: "COMPLETE",
	3: "FAILED",
}

var State_value = map[string]int32{
	"PENDING":  0,
	"COMPLETE": 2,
	"FAILED":   3,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f062853b34af6d81, []int{1}
}

// Reason is a reason for a FAILED state
type Reason int32

const (
	// NONE indicates no error has occurred
	Reason_NONE Reason = 0
	// ERROR indicates an error occurred when applying the change
	Reason_ERROR Reason = 1
)

var Reason_name = map[int32]string{
	0: "NONE",
	1: "ERROR",
}

var Reason_value = map[string]int32{
	"NONE":  0,
	"ERROR": 1,
}

func (x Reason) String() string {
	return proto.EnumName(Reason_name, int32(x))
}

func (Reason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f062853b34af6d81, []int{2}
}

// ValueType is the type for a value
type ValueType int32

const (
	ValueType_EMPTY            ValueType = 0
	ValueType_STRING           ValueType = 1
	ValueType_INT              ValueType = 2
	ValueType_UINT             ValueType = 3
	ValueType_BOOL             ValueType = 4
	ValueType_DECIMAL          ValueType = 5
	ValueType_FLOAT            ValueType = 6
	ValueType_BYTES            ValueType = 7
	ValueType_LEAFLIST_STRING  ValueType = 8
	ValueType_LEAFLIST_INT     ValueType = 9
	ValueType_LEAFLIST_UINT    ValueType = 10
	ValueType_LEAFLIST_BOOL    ValueType = 11
	ValueType_LEAFLIST_DECIMAL ValueType = 12
	ValueType_LEAFLIST_FLOAT   ValueType = 13
	ValueType_LEAFLIST_BYTES   ValueType = 14
)

var ValueType_name = map[int32]string{
	0:  "EMPTY",
	1:  "STRING",
	2:  "INT",
	3:  "UINT",
	4:  "BOOL",
	5:  "DECIMAL",
	6:  "FLOAT",
	7:  "BYTES",
	8:  "LEAFLIST_STRING",
	9:  "LEAFLIST_INT",
	10: "LEAFLIST_UINT",
	11: "LEAFLIST_BOOL",
	12: "LEAFLIST_DECIMAL",
	13: "LEAFLIST_FLOAT",
	14: "LEAFLIST_BYTES",
}

var ValueType_value = map[string]int32{
	"EMPTY":            0,
	"STRING":           1,
	"INT":              2,
	"UINT":             3,
	"BOOL":             4,
	"DECIMAL":          5,
	"FLOAT":            6,
	"BYTES":            7,
	"LEAFLIST_STRING":  8,
	"LEAFLIST_INT":     9,
	"LEAFLIST_UINT":    10,
	"LEAFLIST_BOOL":    11,
	"LEAFLIST_DECIMAL": 12,
	"LEAFLIST_FLOAT":   13,
	"LEAFLIST_BYTES":   14,
}

func (x ValueType) String() string {
	return proto.EnumName(ValueType_name, int32(x))
}

func (ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f062853b34af6d81, []int{3}
}

// Status is the status of a NetworkChange
type Status struct {
	// 'phase' is the current phase of the
	Phase Phase `protobuf:"varint,1,opt,name=phase,proto3,enum=onos.config.v2.Phase" json:"phase,omitempty"`
	// 'state' is the state of the change within a Phase
	State State `protobuf:"varint,2,opt,name=state,proto3,enum=onos.config.v2.State" json:"state,omitempty"`
	// 'reason' is a failure reason
	Reason Reason `protobuf:"varint,3,opt,name=reason,proto3,enum=onos.config.v2.Reason" json:"reason,omitempty"`
	// message is a result message
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_f062853b34af6d81, []int{0}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetPhase() Phase {
	if m != nil {
		return m.Phase
	}
	return Phase_CHANGE
}

func (m *Status) GetState() State {
	if m != nil {
		return m.State
	}
	return State_PENDING
}

func (m *Status) GetReason() Reason {
	if m != nil {
		return m.Reason
	}
	return Reason_NONE
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// TypedValue is a value represented as a byte array
type TypedValue struct {
	// 'bytes' is the bytes array
	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,json=Bytes,proto3" json:"Bytes,omitempty"`
	// 'type' is the value type
	Type ValueType `protobuf:"varint,2,opt,name=type,json=Type,proto3,enum=onos.config.v2.ValueType" json:"Type,omitempty"`
	// 'type_opts' is a set of type options
	TypeOpts []int32 `protobuf:"varint,3,rep,packed,name=type_opts,json=TypeOpts,proto3" json:"TypeOpts,omitempty"`
}

func (m *TypedValue) Reset()         { *m = TypedValue{} }
func (m *TypedValue) String() string { return proto.CompactTextString(m) }
func (*TypedValue) ProtoMessage()    {}
func (*TypedValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_f062853b34af6d81, []int{1}
}
func (m *TypedValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TypedValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TypedValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TypedValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypedValue.Merge(m, src)
}
func (m *TypedValue) XXX_Size() int {
	return m.Size()
}
func (m *TypedValue) XXX_DiscardUnknown() {
	xxx_messageInfo_TypedValue.DiscardUnknown(m)
}

var xxx_messageInfo_TypedValue proto.InternalMessageInfo

func (m *TypedValue) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *TypedValue) GetType() ValueType {
	if m != nil {
		return m.Type
	}
	return ValueType_EMPTY
}

func (m *TypedValue) GetTypeOpts() []int32 {
	if m != nil {
		return m.TypeOpts
	}
	return nil
}

// PathValue is an individual Path/Value combination
type PathValue struct {
	// 'path' is the path to change
	Path string `protobuf:"bytes,1,opt,name=path,json=Path,proto3" json:"Path,omitempty"`
	// 'value' is the change value
	Value *TypedValue `protobuf:"bytes,2,opt,name=value,json=Value,proto3" json:"Value,omitempty"`
}

func (m *PathValue) Reset()         { *m = PathValue{} }
func (m *PathValue) String() string { return proto.CompactTextString(m) }
func (*PathValue) ProtoMessage()    {}
func (*PathValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_f062853b34af6d81, []int{2}
}
func (m *PathValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PathValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PathValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PathValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathValue.Merge(m, src)
}
func (m *PathValue) XXX_Size() int {
	return m.Size()
}
func (m *PathValue) XXX_DiscardUnknown() {
	xxx_messageInfo_PathValue.DiscardUnknown(m)
}

var xxx_messageInfo_PathValue proto.InternalMessageInfo

func (m *PathValue) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *PathValue) GetValue() *TypedValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterEnum("onos.config.v2.Phase", Phase_name, Phase_value)
	proto.RegisterEnum("onos.config.v2.State", State_name, State_value)
	proto.RegisterEnum("onos.config.v2.Reason", Reason_name, Reason_value)
	proto.RegisterEnum("onos.config.v2.ValueType", ValueType_name, ValueType_value)
	proto.RegisterType((*Status)(nil), "onos.config.v2.Status")
	proto.RegisterType((*TypedValue)(nil), "onos.config.v2.TypedValue")
	proto.RegisterType((*PathValue)(nil), "onos.config.v2.PathValue")
}

func init() { proto.RegisterFile("onos/config/v2/types.proto", fileDescriptor_f062853b34af6d81) }

var fileDescriptor_f062853b34af6d81 = []byte{
	// 564 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xcd, 0x6e, 0xda, 0x40,
	0x18, 0x64, 0xe3, 0x1f, 0xf0, 0x17, 0x42, 0xb6, 0x9b, 0x34, 0x72, 0x23, 0xd5, 0x49, 0x73, 0xa8,
	0x52, 0x5a, 0x19, 0x89, 0x3c, 0x81, 0x4d, 0x4c, 0x8a, 0x6a, 0x6c, 0x64, 0xdc, 0x4a, 0x39, 0x45,
	0x4e, 0xeb, 0x42, 0xa4, 0x82, 0xad, 0x78, 0x83, 0x44, 0x9f, 0xa2, 0x0f, 0x52, 0xa9, 0xaf, 0xd1,
	0x63, 0x8e, 0x3d, 0xa1, 0x0a, 0x6e, 0x48, 0x7d, 0x87, 0xea, 0x5b, 0x03, 0x05, 0xd4, 0xdb, 0xb7,
	0x33, 0xe3, 0x99, 0xd9, 0xfd, 0x64, 0x38, 0x4e, 0x86, 0x49, 0x56, 0xfb, 0x98, 0x0c, 0x3f, 0xdf,
	0xf5, 0x6a, 0xa3, 0x7a, 0x8d, 0x8f, 0xd3, 0x38, 0x33, 0xd3, 0xfb, 0x84, 0x27, 0xac, 0x82, 0x9c,
	0x99, 0x73, 0xe6, 0xa8, 0x7e, 0x7c, 0xd8, 0x4b, 0x7a, 0x89, 0xa0, 0x6a, 0x38, 0xe5, 0xaa, 0xb3,
	0xef, 0x04, 0xd4, 0x2e, 0x8f, 0xf8, 0x43, 0xc6, 0x5e, 0x83, 0x92, 0xf6, 0xa3, 0x2c, 0xd6, 0xc9,
	0x29, 0x39, 0xaf, 0xd4, 0x9f, 0x9a, 0x9b, 0x06, 0x66, 0x07, 0xc9, 0x20, 0xd7, 0xa0, 0x38, 0xe3,
	0x11, 0x8f, 0xf5, 0x9d, 0xff, 0x8b, 0xd1, 0x33, 0x0e, 0x72, 0x0d, 0x33, 0x41, 0xbd, 0x8f, 0xa3,
	0x2c, 0x19, 0xea, 0x92, 0x50, 0x1f, 0x6d, 0xab, 0x03, 0xc1, 0x06, 0x0b, 0x15, 0xd3, 0xa1, 0x38,
	0x88, 0xb3, 0x2c, 0xea, 0xc5, 0xba, 0x7c, 0x4a, 0xce, 0xb5, 0x60, 0x79, 0x3c, 0xfb, 0x41, 0x00,
	0xc2, 0x71, 0x1a, 0x7f, 0xfa, 0x10, 0x7d, 0x79, 0x88, 0xd9, 0x2b, 0x50, 0x6e, 0xc7, 0x3c, 0xce,
	0x44, 0xe5, 0xb2, 0x7d, 0x30, 0x9f, 0x9c, 0xec, 0xdb, 0x08, 0xbc, 0x49, 0x06, 0x77, 0x3c, 0x1e,
	0xa4, 0x7c, 0x1c, 0x28, 0x02, 0x60, 0x16, 0xc8, 0xf8, 0x3a, 0x8b, 0xbe, 0xcf, 0xb6, 0x1b, 0x08,
	0x3f, 0x74, 0xb6, 0xd9, 0x7c, 0x72, 0x52, 0xc1, 0x69, 0xcd, 0x43, 0xc6, 0x33, 0xbb, 0x00, 0x0d,
	0x2d, 0x6e, 0x92, 0x94, 0x67, 0xba, 0x74, 0x2a, 0x9d, 0x2b, 0xf6, 0xd1, 0x7c, 0x72, 0xc2, 0x90,
	0xf4, 0x53, 0xbe, 0x1e, 0x5a, 0x5a, 0x62, 0x67, 0x5f, 0x41, 0xeb, 0x44, 0xbc, 0x9f, 0xf7, 0x7d,
	0x09, 0x72, 0x1a, 0xf1, 0xbe, 0xa8, 0xab, 0xe5, 0x49, 0x48, 0xae, 0x27, 0xe1, 0x99, 0x39, 0xa0,
	0x8c, 0xf0, 0x03, 0xd1, 0x76, 0xb7, 0x7e, 0xbc, 0xdd, 0xf6, 0xdf, 0x13, 0xe4, 0x77, 0x16, 0xe3,
	0xfa, 0x9d, 0x05, 0x50, 0x7d, 0x01, 0x8a, 0x58, 0x1a, 0x03, 0x50, 0x1b, 0x6f, 0x2d, 0xef, 0xca,
	0xa1, 0x05, 0x56, 0x86, 0x52, 0xe0, 0xbb, 0xae, 0x6d, 0x35, 0xde, 0x51, 0x52, 0x35, 0x41, 0x11,
	0xab, 0x62, 0xbb, 0x50, 0xec, 0x38, 0xde, 0x65, 0xcb, 0xbb, 0xca, 0x35, 0x0d, 0xbf, 0xdd, 0x71,
	0x9d, 0xd0, 0xa1, 0x3b, 0xf8, 0x75, 0xd3, 0x6a, 0xb9, 0xce, 0x25, 0x95, 0xaa, 0xcf, 0x41, 0xcd,
	0x97, 0xc5, 0x4a, 0x20, 0x7b, 0xbe, 0x87, 0x8e, 0x1a, 0x28, 0x4e, 0x10, 0xf8, 0x01, 0x25, 0xd5,
	0x3f, 0x04, 0xb4, 0xd5, 0x53, 0x0a, 0xa2, 0xdd, 0x09, 0xaf, 0x69, 0x01, 0x3d, 0xba, 0x61, 0x80,
	0xee, 0x84, 0x15, 0x41, 0x6a, 0x79, 0x21, 0xdd, 0x41, 0x8b, 0xf7, 0x38, 0x49, 0x38, 0xd9, 0xbe,
	0xef, 0x52, 0x19, 0x7b, 0x5c, 0x3a, 0x8d, 0x56, 0xdb, 0x72, 0xa9, 0x82, 0x06, 0x4d, 0xd7, 0xb7,
	0x42, 0xaa, 0xe2, 0x68, 0x5f, 0x87, 0x4e, 0x97, 0x16, 0xd9, 0x01, 0xec, 0xbb, 0x8e, 0xd5, 0x74,
	0x5b, 0xdd, 0xf0, 0x66, 0x61, 0x5a, 0x62, 0x14, 0xca, 0x2b, 0x10, 0x3d, 0x35, 0xf6, 0x04, 0xf6,
	0x56, 0x88, 0x88, 0x81, 0x0d, 0x48, 0xe4, 0xed, 0xb2, 0x43, 0xa0, 0x2b, 0x68, 0x19, 0x5c, 0x66,
	0x0c, 0x2a, 0x2b, 0x34, 0x6f, 0xb0, 0xb7, 0x81, 0xe5, 0x55, 0x2a, 0xb6, 0xfe, 0x73, 0x6a, 0x90,
	0xc7, 0xa9, 0x41, 0x7e, 0x4f, 0x0d, 0xf2, 0x6d, 0x66, 0x14, 0x1e, 0x67, 0x46, 0xe1, 0xd7, 0xcc,
	0x28, 0xdc, 0xaa, 0xe2, 0xff, 0xba, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x23, 0x6d, 0x14, 0x41,
	0xa3, 0x03, 0x00, 0x00,
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.Reason != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x18
	}
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.Phase != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Phase))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TypedValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypedValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TypedValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TypeOpts) > 0 {
		dAtA2 := make([]byte, len(m.TypeOpts)*10)
		var j1 int
		for _, num1 := range m.TypeOpts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PathValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PathValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PathValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Phase != 0 {
		n += 1 + sovTypes(uint64(m.Phase))
	}
	if m.State != 0 {
		n += 1 + sovTypes(uint64(m.State))
	}
	if m.Reason != 0 {
		n += 1 + sovTypes(uint64(m.Reason))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *TypedValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if len(m.TypeOpts) > 0 {
		l = 0
		for _, e := range m.TypeOpts {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *PathValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= Phase(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= Reason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypedValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypedValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypedValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ValueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TypeOpts = append(m.TypeOpts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TypeOpts) == 0 {
					m.TypeOpts = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TypeOpts = append(m.TypeOpts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeOpts", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PathValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PathValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PathValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &TypedValue{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
