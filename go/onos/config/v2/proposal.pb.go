// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/config/v2/proposal.proto

package v2

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProposalInitializePhase_State int32

const (
	ProposalInitializePhase_INITIALIZING ProposalInitializePhase_State = 0
	ProposalInitializePhase_INITIALIZED  ProposalInitializePhase_State = 1
)

var ProposalInitializePhase_State_name = map[int32]string{
	0: "INITIALIZING",
	1: "INITIALIZED",
}

var ProposalInitializePhase_State_value = map[string]int32{
	"INITIALIZING": 0,
	"INITIALIZED":  1,
}

func (x ProposalInitializePhase_State) String() string {
	return proto.EnumName(ProposalInitializePhase_State_name, int32(x))
}

func (ProposalInitializePhase_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4000ba20b19ba7e8, []int{6, 0}
}

type ProposalValidatePhase_State int32

const (
	ProposalValidatePhase_VALIDATING ProposalValidatePhase_State = 0
	ProposalValidatePhase_VALIDATED  ProposalValidatePhase_State = 1
	ProposalValidatePhase_FAILED     ProposalValidatePhase_State = 2
)

var ProposalValidatePhase_State_name = map[int32]string{
	0: "VALIDATING",
	1: "VALIDATED",
	2: "FAILED",
}

var ProposalValidatePhase_State_value = map[string]int32{
	"VALIDATING": 0,
	"VALIDATED":  1,
	"FAILED":     2,
}

func (x ProposalValidatePhase_State) String() string {
	return proto.EnumName(ProposalValidatePhase_State_name, int32(x))
}

func (ProposalValidatePhase_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4000ba20b19ba7e8, []int{7, 0}
}

type ProposalCommitPhase_State int32

const (
	ProposalCommitPhase_COMMITTING ProposalCommitPhase_State = 0
	ProposalCommitPhase_COMMITTED  ProposalCommitPhase_State = 1
)

var ProposalCommitPhase_State_name = map[int32]string{
	0: "COMMITTING",
	1: "COMMITTED",
}

var ProposalCommitPhase_State_value = map[string]int32{
	"COMMITTING": 0,
	"COMMITTED":  1,
}

func (x ProposalCommitPhase_State) String() string {
	return proto.EnumName(ProposalCommitPhase_State_name, int32(x))
}

func (ProposalCommitPhase_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4000ba20b19ba7e8, []int{8, 0}
}

type ProposalApplyPhase_State int32

const (
	ProposalApplyPhase_APPLYING ProposalApplyPhase_State = 0
	ProposalApplyPhase_APPLIED  ProposalApplyPhase_State = 1
	ProposalApplyPhase_FAILED   ProposalApplyPhase_State = 2
)

var ProposalApplyPhase_State_name = map[int32]string{
	0: "APPLYING",
	1: "APPLIED",
	2: "FAILED",
}

var ProposalApplyPhase_State_value = map[string]int32{
	"APPLYING": 0,
	"APPLIED":  1,
	"FAILED":   2,
}

func (x ProposalApplyPhase_State) String() string {
	return proto.EnumName(ProposalApplyPhase_State_name, int32(x))
}

func (ProposalApplyPhase_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4000ba20b19ba7e8, []int{9, 0}
}

type ProposalAbortPhase_State int32

const (
	ProposalAbortPhase_ABORTING ProposalAbortPhase_State = 0
	ProposalAbortPhase_ABORTED  ProposalAbortPhase_State = 1
)

var ProposalAbortPhase_State_name = map[int32]string{
	0: "ABORTING",
	1: "ABORTED",
}

var ProposalAbortPhase_State_value = map[string]int32{
	"ABORTING": 0,
	"ABORTED":  1,
}

func (x ProposalAbortPhase_State) String() string {
	return proto.EnumName(ProposalAbortPhase_State_name, int32(x))
}

func (ProposalAbortPhase_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4000ba20b19ba7e8, []int{10, 0}
}

// EventType proposal event types for proposal store
type ProposalEvent_EventType int32

const (
	ProposalEvent_UNKNOWN  ProposalEvent_EventType = 0
	ProposalEvent_CREATED  ProposalEvent_EventType = 1
	ProposalEvent_UPDATED  ProposalEvent_EventType = 2
	ProposalEvent_DELETED  ProposalEvent_EventType = 3
	ProposalEvent_REPLAYED ProposalEvent_EventType = 4
)

var ProposalEvent_EventType_name = map[int32]string{
	0: "UNKNOWN",
	1: "CREATED",
	2: "UPDATED",
	3: "DELETED",
	4: "REPLAYED",
}

var ProposalEvent_EventType_value = map[string]int32{
	"UNKNOWN":  0,
	"CREATED":  1,
	"UPDATED":  2,
	"DELETED":  3,
	"REPLAYED": 4,
}

func (x ProposalEvent_EventType) String() string {
	return proto.EnumName(ProposalEvent_EventType_name, int32(x))
}

func (ProposalEvent_EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4000ba20b19ba7e8, []int{11, 0}
}

type Proposal struct {
	ObjectMeta `protobuf:"bytes,1,opt,name=meta,proto3,embedded=meta" json:"meta"`
	// 'id' is the unique identifier of the proposal
	ID ProposalID `protobuf:"bytes,2,opt,name=id,proto3,casttype=ProposalID" json:"id,omitempty"`
	// 'target_id' is the proposal's target identifier
	TargetID TargetID `protobuf:"bytes,3,opt,name=target_id,json=targetId,proto3,casttype=TargetID" json:"target_id,omitempty"`
	// 'transaction_index' is the unique index of the transaction
	TransactionIndex Index `protobuf:"varint,4,opt,name=transaction_index,json=transactionIndex,proto3,casttype=Index" json:"transaction_index,omitempty"`
	// 'details' is the proposal details
	//
	// Types that are valid to be assigned to Details:
	//	*Proposal_Change
	//	*Proposal_Rollback
	Details isProposal_Details `protobuf_oneof:"details"`
	// 'status' is the current lifecycle status of the proposal
	Status ProposalStatus `protobuf:"bytes,7,opt,name=status,proto3" json:"status"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_4000ba20b19ba7e8, []int{0}
}
func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return m.Size()
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

type isProposal_Details interface {
	isProposal_Details()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Proposal_Change struct {
	Change *ChangeProposal `protobuf:"bytes,5,opt,name=change,proto3,oneof" json:"change,omitempty"`
}
type Proposal_Rollback struct {
	Rollback *RollbackProposal `protobuf:"bytes,6,opt,name=rollback,proto3,oneof" json:"rollback,omitempty"`
}

func (*Proposal_Change) isProposal_Details()   {}
func (*Proposal_Rollback) isProposal_Details() {}

func (m *Proposal) GetDetails() isProposal_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Proposal) GetID() ProposalID {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Proposal) GetTargetID() TargetID {
	if m != nil {
		return m.TargetID
	}
	return ""
}

func (m *Proposal) GetTransactionIndex() Index {
	if m != nil {
		return m.TransactionIndex
	}
	return 0
}

func (m *Proposal) GetChange() *ChangeProposal {
	if x, ok := m.GetDetails().(*Proposal_Change); ok {
		return x.Change
	}
	return nil
}

func (m *Proposal) GetRollback() *RollbackProposal {
	if x, ok := m.GetDetails().(*Proposal_Rollback); ok {
		return x.Rollback
	}
	return nil
}

func (m *Proposal) GetStatus() ProposalStatus {
	if m != nil {
		return m.Status
	}
	return ProposalStatus{}
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Proposal) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Proposal_Change)(nil),
		(*Proposal_Rollback)(nil),
	}
}

type ChangeProposal struct {
	// 'changes' is the proposed change values
	Values map[string]*PathValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ChangeProposal) Reset()         { *m = ChangeProposal{} }
func (m *ChangeProposal) String() string { return proto.CompactTextString(m) }
func (*ChangeProposal) ProtoMessage()    {}
func (*ChangeProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_4000ba20b19ba7e8, []int{1}
}
func (m *ChangeProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeProposal.Merge(m, src)
}
func (m *ChangeProposal) XXX_Size() int {
	return m.Size()
}
func (m *ChangeProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeProposal proto.InternalMessageInfo

func (m *ChangeProposal) GetValues() map[string]*PathValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type RollbackProposal struct {
	// 'rollback_index' is the index of the transaction to roll back
	RollbackIndex Index `protobuf:"varint,1,opt,name=rollback_index,json=rollbackIndex,proto3,casttype=Index" json:"rollback_index,omitempty"`
}

func (m *RollbackProposal) Reset()         { *m = RollbackProposal{} }
func (m *RollbackProposal) String() string { return proto.CompactTextString(m) }
func (*RollbackProposal) ProtoMessage()    {}
func (*RollbackProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_4000ba20b19ba7e8, []int{2}
}
func (m *RollbackProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollbackProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollbackProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollbackProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackProposal.Merge(m, src)
}
func (m *RollbackProposal) XXX_Size() int {
	return m.Size()
}
func (m *RollbackProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackProposal proto.InternalMessageInfo

func (m *RollbackProposal) GetRollbackIndex() Index {
	if m != nil {
		return m.RollbackIndex
	}
	return 0
}

// ProposalStatus is the status of a Proposal
type ProposalStatus struct {
	// 'phases' is the proposal phases
	Phases ProposalPhases `protobuf:"bytes,1,opt,name=phases,proto3" json:"phases"`
	// 'prev_index' is the index of the previous proposal associated with this target
	PrevIndex Index `protobuf:"varint,2,opt,name=prev_index,json=prevIndex,proto3,casttype=Index" json:"prev_index,omitempty"`
	// 'next_index' is the index of the next proposal associated with this target
	NextIndex Index `protobuf:"varint,3,opt,name=next_index,json=nextIndex,proto3,casttype=Index" json:"next_index,omitempty"`
	// 'rollback_index' is a reference to the index to which to roll back
	RollbackIndex Index `protobuf:"varint,4,opt,name=rollback_index,json=rollbackIndex,proto3,casttype=Index" json:"rollback_index,omitempty"`
	// 'rollback_values' is the set of values to use to roll back the proposal
	RollbackValues map[string]*PathValue `protobuf:"bytes,5,rep,name=rollback_values,json=rollbackValues,proto3" json:"rollback_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ProposalStatus) Reset()         { *m = ProposalStatus{} }
func (m *ProposalStatus) String() string { return proto.CompactTextString(m) }
func (*ProposalStatus) ProtoMessage()    {}
func (*ProposalStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_4000ba20b19ba7e8, []int{3}
}
func (m *ProposalStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalStatus.Merge(m, src)
}
func (m *ProposalStatus) XXX_Size() int {
	return m.Size()
}
func (m *ProposalStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalStatus proto.InternalMessageInfo

func (m *ProposalStatus) GetPhases() ProposalPhases {
	if m != nil {
		return m.Phases
	}
	return ProposalPhases{}
}

func (m *ProposalStatus) GetPrevIndex() Index {
	if m != nil {
		return m.PrevIndex
	}
	return 0
}

func (m *ProposalStatus) GetNextIndex() Index {
	if m != nil {
		return m.NextIndex
	}
	return 0
}

func (m *ProposalStatus) GetRollbackIndex() Index {
	if m != nil {
		return m.RollbackIndex
	}
	return 0
}

func (m *ProposalStatus) GetRollbackValues() map[string]*PathValue {
	if m != nil {
		return m.RollbackValues
	}
	return nil
}

type ProposalPhases struct {
	// 'initialize' is the proposal initialization phase status
	Initialize *ProposalInitializePhase `protobuf:"bytes,1,opt,name=initialize,proto3" json:"initialize,omitempty"`
	// 'validate' is the proposal validation phase status
	Validate *ProposalValidatePhase `protobuf:"bytes,2,opt,name=validate,proto3" json:"validate,omitempty"`
	// 'commit' is the proposal commit phase status
	Commit *ProposalCommitPhase `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	// 'apply' is the proposal apply phase status
	Apply *ProposalApplyPhase `protobuf:"bytes,4,opt,name=apply,proto3" json:"apply,omitempty"`
	// 'abort' is the proposal abort phase status
	Abort *ProposalAbortPhase `protobuf:"bytes,5,opt,name=abort,proto3" json:"abort,omitempty"`
}

func (m *ProposalPhases) Reset()         { *m = ProposalPhases{} }
func (m *ProposalPhases) String() string { return proto.CompactTextString(m) }
func (*ProposalPhases) ProtoMessage()    {}
func (*ProposalPhases) Descriptor() ([]byte, []int) {
	return fileDescriptor_4000ba20b19ba7e8, []int{4}
}
func (m *ProposalPhases) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalPhases) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalPhases.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalPhases) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalPhases.Merge(m, src)
}
func (m *ProposalPhases) XXX_Size() int {
	return m.Size()
}
func (m *ProposalPhases) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalPhases.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalPhases proto.InternalMessageInfo

func (m *ProposalPhases) GetInitialize() *ProposalInitializePhase {
	if m != nil {
		return m.Initialize
	}
	return nil
}

func (m *ProposalPhases) GetValidate() *ProposalValidatePhase {
	if m != nil {
		return m.Validate
	}
	return nil
}

func (m *ProposalPhases) GetCommit() *ProposalCommitPhase {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *ProposalPhases) GetApply() *ProposalApplyPhase {
	if m != nil {
		return m.Apply
	}
	return nil
}

func (m *ProposalPhases) GetAbort() *ProposalAbortPhase {
	if m != nil {
		return m.Abort
	}
	return nil
}

type ProposalPhaseStatus struct {
	Start *time.Time `protobuf:"bytes,1,opt,name=start,proto3,stdtime" json:"start,omitempty"`
	End   *time.Time `protobuf:"bytes,2,opt,name=end,proto3,stdtime" json:"end,omitempty"`
}

func (m *ProposalPhaseStatus) Reset()         { *m = ProposalPhaseStatus{} }
func (m *ProposalPhaseStatus) String() string { return proto.CompactTextString(m) }
func (*ProposalPhaseStatus) ProtoMessage()    {}
func (*ProposalPhaseStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_4000ba20b19ba7e8, []int{5}
}
func (m *ProposalPhaseStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalPhaseStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalPhaseStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalPhaseStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalPhaseStatus.Merge(m, src)
}
func (m *ProposalPhaseStatus) XXX_Size() int {
	return m.Size()
}
func (m *ProposalPhaseStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalPhaseStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalPhaseStatus proto.InternalMessageInfo

func (m *ProposalPhaseStatus) GetStart() *time.Time {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *ProposalPhaseStatus) GetEnd() *time.Time {
	if m != nil {
		return m.End
	}
	return nil
}

type ProposalInitializePhase struct {
	ProposalPhaseStatus `protobuf:"bytes,1,opt,name=status,proto3,embedded=status" json:"status"`
	State               ProposalInitializePhase_State `protobuf:"varint,2,opt,name=state,proto3,enum=onos.config.v2.ProposalInitializePhase_State" json:"state,omitempty"`
}

func (m *ProposalInitializePhase) Reset()         { *m = ProposalInitializePhase{} }
func (m *ProposalInitializePhase) String() string { return proto.CompactTextString(m) }
func (*ProposalInitializePhase) ProtoMessage()    {}
func (*ProposalInitializePhase) Descriptor() ([]byte, []int) {
	return fileDescriptor_4000ba20b19ba7e8, []int{6}
}
func (m *ProposalInitializePhase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalInitializePhase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalInitializePhase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalInitializePhase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalInitializePhase.Merge(m, src)
}
func (m *ProposalInitializePhase) XXX_Size() int {
	return m.Size()
}
func (m *ProposalInitializePhase) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalInitializePhase.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalInitializePhase proto.InternalMessageInfo

func (m *ProposalInitializePhase) GetState() ProposalInitializePhase_State {
	if m != nil {
		return m.State
	}
	return ProposalInitializePhase_INITIALIZING
}

type ProposalValidatePhase struct {
	ProposalPhaseStatus `protobuf:"bytes,1,opt,name=status,proto3,embedded=status" json:"status"`
	State               ProposalValidatePhase_State `protobuf:"varint,2,opt,name=state,proto3,enum=onos.config.v2.ProposalValidatePhase_State" json:"state,omitempty"`
	Failure             *Failure                    `protobuf:"bytes,3,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (m *ProposalValidatePhase) Reset()         { *m = ProposalValidatePhase{} }
func (m *ProposalValidatePhase) String() string { return proto.CompactTextString(m) }
func (*ProposalValidatePhase) ProtoMessage()    {}
func (*ProposalValidatePhase) Descriptor() ([]byte, []int) {
	return fileDescriptor_4000ba20b19ba7e8, []int{7}
}
func (m *ProposalValidatePhase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalValidatePhase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalValidatePhase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalValidatePhase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalValidatePhase.Merge(m, src)
}
func (m *ProposalValidatePhase) XXX_Size() int {
	return m.Size()
}
func (m *ProposalValidatePhase) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalValidatePhase.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalValidatePhase proto.InternalMessageInfo

func (m *ProposalValidatePhase) GetState() ProposalValidatePhase_State {
	if m != nil {
		return m.State
	}
	return ProposalValidatePhase_VALIDATING
}

func (m *ProposalValidatePhase) GetFailure() *Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

type ProposalCommitPhase struct {
	ProposalPhaseStatus `protobuf:"bytes,1,opt,name=status,proto3,embedded=status" json:"status"`
	State               ProposalCommitPhase_State `protobuf:"varint,2,opt,name=state,proto3,enum=onos.config.v2.ProposalCommitPhase_State" json:"state,omitempty"`
}

func (m *ProposalCommitPhase) Reset()         { *m = ProposalCommitPhase{} }
func (m *ProposalCommitPhase) String() string { return proto.CompactTextString(m) }
func (*ProposalCommitPhase) ProtoMessage()    {}
func (*ProposalCommitPhase) Descriptor() ([]byte, []int) {
	return fileDescriptor_4000ba20b19ba7e8, []int{8}
}
func (m *ProposalCommitPhase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalCommitPhase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalCommitPhase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalCommitPhase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalCommitPhase.Merge(m, src)
}
func (m *ProposalCommitPhase) XXX_Size() int {
	return m.Size()
}
func (m *ProposalCommitPhase) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalCommitPhase.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalCommitPhase proto.InternalMessageInfo

func (m *ProposalCommitPhase) GetState() ProposalCommitPhase_State {
	if m != nil {
		return m.State
	}
	return ProposalCommitPhase_COMMITTING
}

type ProposalApplyPhase struct {
	ProposalPhaseStatus `protobuf:"bytes,1,opt,name=status,proto3,embedded=status" json:"status"`
	State               ProposalApplyPhase_State `protobuf:"varint,2,opt,name=state,proto3,enum=onos.config.v2.ProposalApplyPhase_State" json:"state,omitempty"`
	Term                MastershipTerm           `protobuf:"varint,3,opt,name=term,proto3,casttype=MastershipTerm" json:"term,omitempty"`
	Failure             *Failure                 `protobuf:"bytes,4,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (m *ProposalApplyPhase) Reset()         { *m = ProposalApplyPhase{} }
func (m *ProposalApplyPhase) String() string { return proto.CompactTextString(m) }
func (*ProposalApplyPhase) ProtoMessage()    {}
func (*ProposalApplyPhase) Descriptor() ([]byte, []int) {
	return fileDescriptor_4000ba20b19ba7e8, []int{9}
}
func (m *ProposalApplyPhase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalApplyPhase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalApplyPhase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalApplyPhase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalApplyPhase.Merge(m, src)
}
func (m *ProposalApplyPhase) XXX_Size() int {
	return m.Size()
}
func (m *ProposalApplyPhase) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalApplyPhase.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalApplyPhase proto.InternalMessageInfo

func (m *ProposalApplyPhase) GetState() ProposalApplyPhase_State {
	if m != nil {
		return m.State
	}
	return ProposalApplyPhase_APPLYING
}

func (m *ProposalApplyPhase) GetTerm() MastershipTerm {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *ProposalApplyPhase) GetFailure() *Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

type ProposalAbortPhase struct {
	ProposalPhaseStatus `protobuf:"bytes,1,opt,name=status,proto3,embedded=status" json:"status"`
	State               ProposalAbortPhase_State `protobuf:"varint,2,opt,name=state,proto3,enum=onos.config.v2.ProposalAbortPhase_State" json:"state,omitempty"`
}

func (m *ProposalAbortPhase) Reset()         { *m = ProposalAbortPhase{} }
func (m *ProposalAbortPhase) String() string { return proto.CompactTextString(m) }
func (*ProposalAbortPhase) ProtoMessage()    {}
func (*ProposalAbortPhase) Descriptor() ([]byte, []int) {
	return fileDescriptor_4000ba20b19ba7e8, []int{10}
}
func (m *ProposalAbortPhase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalAbortPhase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalAbortPhase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalAbortPhase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalAbortPhase.Merge(m, src)
}
func (m *ProposalAbortPhase) XXX_Size() int {
	return m.Size()
}
func (m *ProposalAbortPhase) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalAbortPhase.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalAbortPhase proto.InternalMessageInfo

func (m *ProposalAbortPhase) GetState() ProposalAbortPhase_State {
	if m != nil {
		return m.State
	}
	return ProposalAbortPhase_ABORTING
}

// ProposalEvent proposal store event
type ProposalEvent struct {
	Type     ProposalEvent_EventType `protobuf:"varint,1,opt,name=type,proto3,enum=onos.config.v2.ProposalEvent_EventType" json:"type,omitempty"`
	Proposal Proposal                `protobuf:"bytes,2,opt,name=proposal,proto3" json:"proposal"`
}

func (m *ProposalEvent) Reset()         { *m = ProposalEvent{} }
func (m *ProposalEvent) String() string { return proto.CompactTextString(m) }
func (*ProposalEvent) ProtoMessage()    {}
func (*ProposalEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_4000ba20b19ba7e8, []int{11}
}
func (m *ProposalEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalEvent.Merge(m, src)
}
func (m *ProposalEvent) XXX_Size() int {
	return m.Size()
}
func (m *ProposalEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalEvent proto.InternalMessageInfo

func (m *ProposalEvent) GetType() ProposalEvent_EventType {
	if m != nil {
		return m.Type
	}
	return ProposalEvent_UNKNOWN
}

func (m *ProposalEvent) GetProposal() Proposal {
	if m != nil {
		return m.Proposal
	}
	return Proposal{}
}

func init() {
	proto.RegisterEnum("onos.config.v2.ProposalInitializePhase_State", ProposalInitializePhase_State_name, ProposalInitializePhase_State_value)
	proto.RegisterEnum("onos.config.v2.ProposalValidatePhase_State", ProposalValidatePhase_State_name, ProposalValidatePhase_State_value)
	proto.RegisterEnum("onos.config.v2.ProposalCommitPhase_State", ProposalCommitPhase_State_name, ProposalCommitPhase_State_value)
	proto.RegisterEnum("onos.config.v2.ProposalApplyPhase_State", ProposalApplyPhase_State_name, ProposalApplyPhase_State_value)
	proto.RegisterEnum("onos.config.v2.ProposalAbortPhase_State", ProposalAbortPhase_State_name, ProposalAbortPhase_State_value)
	proto.RegisterEnum("onos.config.v2.ProposalEvent_EventType", ProposalEvent_EventType_name, ProposalEvent_EventType_value)
	proto.RegisterType((*Proposal)(nil), "onos.config.v2.Proposal")
	proto.RegisterType((*ChangeProposal)(nil), "onos.config.v2.ChangeProposal")
	proto.RegisterMapType((map[string]*PathValue)(nil), "onos.config.v2.ChangeProposal.ValuesEntry")
	proto.RegisterType((*RollbackProposal)(nil), "onos.config.v2.RollbackProposal")
	proto.RegisterType((*ProposalStatus)(nil), "onos.config.v2.ProposalStatus")
	proto.RegisterMapType((map[string]*PathValue)(nil), "onos.config.v2.ProposalStatus.RollbackValuesEntry")
	proto.RegisterType((*ProposalPhases)(nil), "onos.config.v2.ProposalPhases")
	proto.RegisterType((*ProposalPhaseStatus)(nil), "onos.config.v2.ProposalPhaseStatus")
	proto.RegisterType((*ProposalInitializePhase)(nil), "onos.config.v2.ProposalInitializePhase")
	proto.RegisterType((*ProposalValidatePhase)(nil), "onos.config.v2.ProposalValidatePhase")
	proto.RegisterType((*ProposalCommitPhase)(nil), "onos.config.v2.ProposalCommitPhase")
	proto.RegisterType((*ProposalApplyPhase)(nil), "onos.config.v2.ProposalApplyPhase")
	proto.RegisterType((*ProposalAbortPhase)(nil), "onos.config.v2.ProposalAbortPhase")
	proto.RegisterType((*ProposalEvent)(nil), "onos.config.v2.ProposalEvent")
}

func init() { proto.RegisterFile("onos/config/v2/proposal.proto", fileDescriptor_4000ba20b19ba7e8) }

var fileDescriptor_4000ba20b19ba7e8 = []byte{
	// 1115 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4f, 0x6f, 0xe3, 0xd4,
	0x17, 0x8d, 0x9d, 0x3f, 0x4d, 0x6e, 0xa6, 0x99, 0xfc, 0xde, 0xcc, 0x4f, 0x63, 0x02, 0x24, 0x95,
	0x81, 0x21, 0x0c, 0xc2, 0x01, 0x23, 0x46, 0xd5, 0x0c, 0x1a, 0x94, 0x34, 0x99, 0xc1, 0x22, 0x6d,
	0x23, 0x13, 0x8a, 0x06, 0x90, 0x46, 0x6e, 0xf2, 0x9a, 0x9a, 0x49, 0x6c, 0xcb, 0x7e, 0x8d, 0xa6,
	0xec, 0xd8, 0xb1, 0x63, 0x3e, 0x00, 0x6b, 0x16, 0x7c, 0x09, 0x56, 0x48, 0xb3, 0x41, 0x2a, 0x2b,
	0x58, 0x05, 0xd4, 0x7e, 0x8b, 0xae, 0xd0, 0xfb, 0x63, 0xd7, 0x4e, 0x9b, 0x4c, 0x17, 0x15, 0x9b,
	0xc8, 0xef, 0xdd, 0x73, 0xae, 0xef, 0x3d, 0xe7, 0xfa, 0xbd, 0xc0, 0xeb, 0xae, 0xe3, 0x06, 0x8d,
	0x81, 0xeb, 0xec, 0xd9, 0xa3, 0xc6, 0x54, 0x6f, 0x78, 0xbe, 0xeb, 0xb9, 0x81, 0x35, 0xd6, 0x3c,
	0xdf, 0x25, 0x2e, 0x2a, 0xd1, 0xb0, 0xc6, 0xc3, 0xda, 0x54, 0xaf, 0xdc, 0x1c, 0xb9, 0x23, 0x97,
	0x85, 0x1a, 0xf4, 0x89, 0xa3, 0x2a, 0xaf, 0xce, 0x25, 0x71, 0x77, 0xbf, 0xc5, 0x03, 0x22, 0x82,
	0x95, 0xb9, 0xe0, 0xd4, 0x1a, 0x1f, 0x60, 0x11, 0x7b, 0x6d, 0x2e, 0xb6, 0x67, 0xd9, 0xe3, 0x03,
	0x3f, 0x8c, 0xd6, 0x46, 0xae, 0x3b, 0x1a, 0xe3, 0x06, 0x5b, 0xed, 0x1e, 0xec, 0x35, 0x88, 0x3d,
	0xc1, 0x01, 0xb1, 0x26, 0x1e, 0x07, 0xa8, 0x3f, 0xa5, 0x21, 0xdf, 0x13, 0x05, 0xa3, 0x75, 0xc8,
	0x4c, 0x30, 0xb1, 0x14, 0x69, 0x4d, 0xaa, 0x17, 0xf5, 0x8a, 0x96, 0xac, 0x5c, 0xdb, 0x66, 0x35,
	0x6d, 0x62, 0x62, 0xb5, 0xf2, 0x2f, 0x66, 0xb5, 0xd4, 0xd1, 0xac, 0x26, 0x99, 0x8c, 0x81, 0xde,
	0x04, 0xd9, 0x1e, 0x2a, 0xf2, 0x9a, 0x54, 0x2f, 0xb4, 0x6e, 0x1e, 0xcf, 0x6a, 0xb2, 0xd1, 0x3e,
	0x9d, 0xd5, 0x20, 0xcc, 0x6c, 0xb4, 0x4d, 0xd9, 0x1e, 0xa2, 0x8f, 0xa0, 0x40, 0x2c, 0x7f, 0x84,
	0xc9, 0x13, 0x7b, 0xa8, 0xa4, 0x19, 0x58, 0x39, 0x9e, 0xd5, 0xf2, 0x7d, 0xb6, 0xc9, 0x28, 0xd1,
	0xb3, 0x99, 0xe7, 0x50, 0x63, 0x88, 0xee, 0xc2, 0xff, 0x88, 0x6f, 0x39, 0x81, 0x35, 0x20, 0xb6,
	0xeb, 0x3c, 0xb1, 0x9d, 0x21, 0x7e, 0xa6, 0x64, 0xd6, 0xa4, 0x7a, 0xa6, 0x55, 0x38, 0x9d, 0xd5,
	0xb2, 0x06, 0xdd, 0x30, 0xcb, 0x31, 0x0c, 0xdb, 0x41, 0xeb, 0x90, 0x1b, 0xec, 0x5b, 0xce, 0x08,
	0x2b, 0x59, 0xd6, 0x50, 0x75, 0xbe, 0xa1, 0x0d, 0x16, 0x0d, 0x8b, 0xfc, 0x34, 0x65, 0x0a, 0x3c,
	0x7a, 0x00, 0x79, 0xdf, 0x1d, 0x8f, 0x77, 0xad, 0xc1, 0x53, 0x25, 0xc7, 0xb8, 0x6b, 0xf3, 0x5c,
	0x53, 0xc4, 0x63, 0xec, 0x88, 0x83, 0x3e, 0x86, 0x5c, 0x40, 0x2c, 0x72, 0x10, 0x28, 0x2b, 0x17,
	0xbf, 0x39, 0x64, 0x7d, 0xce, 0x50, 0xad, 0x0c, 0x95, 0xd3, 0x14, 0x9c, 0x56, 0x01, 0x56, 0x86,
	0x98, 0x58, 0xf6, 0x38, 0x50, 0x7f, 0x91, 0xa0, 0x94, 0xac, 0x12, 0xb5, 0x20, 0xc7, 0xfc, 0x0f,
	0x14, 0x69, 0x2d, 0x5d, 0x2f, 0xea, 0x77, 0x96, 0x77, 0xa5, 0xed, 0x30, 0x70, 0xc7, 0x21, 0xfe,
	0xa1, 0x29, 0x98, 0x95, 0x3e, 0x14, 0x63, 0xdb, 0xa8, 0x0c, 0xe9, 0xa7, 0xf8, 0x90, 0xd9, 0x5e,
	0x30, 0xe9, 0x23, 0x6a, 0x40, 0x96, 0x41, 0x99, 0xa5, 0x45, 0xfd, 0x95, 0x73, 0xf5, 0x5b, 0x64,
	0x9f, 0x65, 0x30, 0x39, 0xee, 0x9e, 0xbc, 0x2e, 0xa9, 0x6d, 0x28, 0xcf, 0xab, 0x82, 0xde, 0x87,
	0x52, 0xa8, 0x8a, 0x30, 0x4e, 0x9a, 0x37, 0x6e, 0x35, 0x04, 0xb0, 0xa5, 0xfa, 0x63, 0x1a, 0x4a,
	0x49, 0x79, 0xa8, 0x9c, 0xde, 0xbe, 0x15, 0xb0, 0x96, 0x97, 0xca, 0xd9, 0x63, 0xa8, 0x50, 0x4e,
	0xce, 0x41, 0x75, 0x00, 0xcf, 0xc7, 0x53, 0xf1, 0x7a, 0x79, 0xfe, 0xf5, 0x05, 0x1a, 0xe4, 0x03,
	0x53, 0x07, 0x70, 0xf0, 0x33, 0x22, 0x90, 0xe9, 0x73, 0x48, 0x1a, 0xe4, 0xc8, 0xf3, 0x6d, 0x65,
	0x96, 0xb7, 0x85, 0xbe, 0x86, 0xeb, 0x11, 0x43, 0xf8, 0x97, 0x65, 0xfe, 0xe9, 0xcb, 0x67, 0x23,
	0x1a, 0xb4, 0xb8, 0x8f, 0xd1, 0xcb, 0xf9, 0x66, 0xe5, 0x1b, 0xb8, 0x71, 0x01, 0xec, 0xaa, 0x7c,
	0xfd, 0x5d, 0x3e, 0x73, 0x84, 0x2b, 0x8c, 0x1e, 0x01, 0xd8, 0x8e, 0x4d, 0x6c, 0x6b, 0x6c, 0x7f,
	0x87, 0x85, 0x2b, 0x6f, 0x2f, 0x6a, 0xc4, 0x88, 0x90, 0x8c, 0x6d, 0xc6, 0xa8, 0xa8, 0x09, 0xf9,
	0xa9, 0x35, 0xb6, 0x87, 0x16, 0x09, 0x6b, 0x7a, 0x6b, 0x51, 0x9a, 0x1d, 0x81, 0xe3, 0x49, 0x22,
	0x1a, 0xba, 0x0f, 0xb9, 0x81, 0x3b, 0x99, 0xd8, 0x84, 0x39, 0x56, 0xd4, 0xdf, 0x58, 0x94, 0x60,
	0x83, 0xa1, 0x38, 0x5d, 0x50, 0xd0, 0x3a, 0x64, 0x2d, 0xcf, 0x1b, 0x1f, 0x32, 0xff, 0x8a, 0xba,
	0xba, 0x88, 0xdb, 0xa4, 0x20, 0x4e, 0xe5, 0x04, 0xc6, 0xdc, 0x75, 0x7d, 0x22, 0x0e, 0x97, 0xc5,
	0x4c, 0x0a, 0x0a, 0x99, 0xf4, 0x59, 0xfd, 0x5e, 0x82, 0x1b, 0x09, 0x3d, 0xc5, 0x98, 0xdf, 0x85,
	0x6c, 0x40, 0x2c, 0x9f, 0x44, 0xe7, 0x2f, 0x3f, 0xbc, 0xb5, 0xf0, 0xf0, 0xd6, 0xfa, 0xe1, 0xe1,
	0xdd, 0xca, 0x3c, 0xff, 0xbb, 0x26, 0x99, 0x1c, 0x8e, 0x74, 0x48, 0x63, 0x67, 0x28, 0xe4, 0x7b,
	0x39, 0x8b, 0x82, 0xd5, 0x3f, 0x24, 0xb8, 0xb5, 0xc0, 0x1f, 0xd4, 0x89, 0x4e, 0x2f, 0x69, 0xb9,
	0xa0, 0xb1, 0xe2, 0x63, 0x37, 0x82, 0x20, 0xa3, 0x0d, 0xd6, 0x8e, 0xf0, 0xb5, 0xa4, 0xbf, 0x77,
	0xc9, 0xf1, 0xd0, 0x68, 0x42, 0x6c, 0x72, 0xae, 0x7a, 0x07, 0xb2, 0x6c, 0x8d, 0xca, 0x70, 0xcd,
	0xd8, 0x32, 0xfa, 0x46, 0xb3, 0x6b, 0x7c, 0x65, 0x6c, 0x3d, 0x2a, 0xa7, 0xd0, 0x75, 0x28, 0x46,
	0x3b, 0x9d, 0x76, 0x59, 0x52, 0x7f, 0x90, 0xe1, 0xff, 0x17, 0x0e, 0xcb, 0x55, 0x75, 0xd4, 0x4c,
	0x76, 0xf4, 0xee, 0xa5, 0x26, 0x35, 0xd1, 0x0f, 0xfa, 0x00, 0x56, 0xc4, 0x0d, 0x2d, 0xa6, 0xf5,
	0xd6, 0x7c, 0x92, 0x87, 0x3c, 0x6c, 0x86, 0x38, 0x55, 0x0f, 0x25, 0x28, 0x01, 0xec, 0x34, 0xbb,
	0x46, 0xbb, 0xd9, 0xe7, 0x02, 0xac, 0x42, 0x41, 0xac, 0x69, 0xfb, 0x08, 0x20, 0xf7, 0xb0, 0x69,
	0x74, 0x3b, 0xed, 0xb2, 0xac, 0xfe, 0x16, 0x1b, 0xb1, 0xd8, 0xd8, 0x5f, 0x95, 0x10, 0x9f, 0x24,
	0x85, 0x78, 0xe7, 0x12, 0x5f, 0x5c, 0xd2, 0xd6, 0xdb, 0xb1, 0x9e, 0x36, 0xb6, 0x37, 0x37, 0x8d,
	0xfe, 0x59, 0x4f, 0x62, 0xcd, 0x2c, 0xfd, 0x59, 0x06, 0x74, 0xfe, 0x13, 0xbc, 0xaa, 0x36, 0x1e,
	0x24, 0xdb, 0xa8, 0xbf, 0xfc, 0xe3, 0x4f, 0x9a, 0x79, 0x1b, 0x32, 0x04, 0xfb, 0x13, 0x71, 0x53,
	0xa0, 0xd3, 0x59, 0xad, 0xb4, 0x69, 0x05, 0x04, 0xfb, 0xc1, 0xbe, 0xed, 0xf5, 0xb1, 0x3f, 0x31,
	0x59, 0x3c, 0x6e, 0x7a, 0xe6, 0x92, 0xa6, 0x6b, 0xa1, 0x40, 0xd7, 0x20, 0xdf, 0xec, 0xf5, 0xba,
	0x8f, 0xb9, 0x3c, 0x45, 0x58, 0xa1, 0x2b, 0xe3, 0x9c, 0xe1, 0xbf, 0x4a, 0x31, 0xa1, 0xa2, 0x13,
	0xe7, 0x3f, 0x17, 0x2a, 0x7a, 0x73, 0xd2, 0x6e, 0x35, 0xde, 0x4d, 0x6b, 0xdb, 0xec, 0x9f, 0x75,
	0x43, 0x57, 0xcc, 0xea, 0x3f, 0x25, 0x58, 0x0d, 0xf3, 0x74, 0xa6, 0xd8, 0x21, 0xe8, 0x3e, 0x64,
	0xc8, 0xa1, 0xc7, 0xaf, 0x97, 0xd2, 0xe2, 0xeb, 0x85, 0x81, 0x35, 0xf6, 0xdb, 0x3f, 0xf4, 0xb0,
	0xc9, 0x48, 0xe8, 0x1e, 0xe4, 0xc3, 0x3f, 0xe2, 0xe2, 0x64, 0x54, 0x16, 0x25, 0x10, 0xff, 0x17,
	0x22, 0xbc, 0xba, 0x09, 0x85, 0x28, 0x1d, 0x2d, 0xf2, 0x8b, 0xad, 0xcf, 0xb6, 0xb6, 0xbf, 0xdc,
	0xe2, 0x15, 0x6f, 0x98, 0x1d, 0xf1, 0xc1, 0xd1, 0x48, 0x8f, 0x7f, 0x7d, 0x32, 0x5d, 0xb4, 0x3b,
	0xdd, 0x0e, 0x5d, 0xa4, 0x69, 0x9b, 0x66, 0xa7, 0xd7, 0x6d, 0x3e, 0xee, 0xb4, 0xcb, 0x99, 0x96,
	0xf2, 0xe2, 0xb8, 0x2a, 0x1d, 0x1d, 0x57, 0xa5, 0x7f, 0x8e, 0xab, 0xd2, 0xf3, 0x93, 0x6a, 0xea,
	0xe8, 0xa4, 0x9a, 0xfa, 0xeb, 0xa4, 0x9a, 0xda, 0xcd, 0xb1, 0x43, 0xfa, 0xc3, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x7c, 0x47, 0x87, 0xd2, 0x43, 0x0c, 0x00, 0x00,
}

func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.Details != nil {
		{
			size := m.Details.Size()
			i -= size
			if _, err := m.Details.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TransactionIndex != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.TransactionIndex))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TargetID) > 0 {
		i -= len(m.TargetID)
		copy(dAtA[i:], m.TargetID)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.TargetID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Proposal_Change) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_Change) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Change != nil {
		{
			size, err := m.Change.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Proposal_Rollback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal_Rollback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Rollback != nil {
		{
			size, err := m.Rollback.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ChangeProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for k := range m.Values {
			v := m.Values[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintProposal(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintProposal(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintProposal(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RollbackProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollbackProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollbackProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RollbackIndex != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.RollbackIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProposalStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RollbackValues) > 0 {
		for k := range m.RollbackValues {
			v := m.RollbackValues[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintProposal(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintProposal(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintProposal(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.RollbackIndex != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.RollbackIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.NextIndex != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.NextIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.PrevIndex != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.PrevIndex))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Phases.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProposalPhases) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalPhases) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalPhases) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Abort != nil {
		{
			size, err := m.Abort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Apply != nil {
		{
			size, err := m.Apply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Commit != nil {
		{
			size, err := m.Commit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Validate != nil {
		{
			size, err := m.Validate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Initialize != nil {
		{
			size, err := m.Initialize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalPhaseStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalPhaseStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalPhaseStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.End != nil {
		n13, err13 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.End, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.End):])
		if err13 != nil {
			return 0, err13
		}
		i -= n13
		i = encodeVarintProposal(dAtA, i, uint64(n13))
		i--
		dAtA[i] = 0x12
	}
	if m.Start != nil {
		n14, err14 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Start, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Start):])
		if err14 != nil {
			return 0, err14
		}
		i -= n14
		i = encodeVarintProposal(dAtA, i, uint64(n14))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalInitializePhase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalInitializePhase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalInitializePhase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ProposalPhaseStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProposalValidatePhase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalValidatePhase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalValidatePhase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ProposalPhaseStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProposalCommitPhase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalCommitPhase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalCommitPhase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ProposalPhaseStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProposalApplyPhase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalApplyPhase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalApplyPhase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Term != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x18
	}
	if m.State != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ProposalPhaseStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProposalAbortPhase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalAbortPhase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalAbortPhase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ProposalPhaseStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProposalEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Type != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Proposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovProposal(uint64(l))
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.TargetID)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.TransactionIndex != 0 {
		n += 1 + sovProposal(uint64(m.TransactionIndex))
	}
	if m.Details != nil {
		n += m.Details.Size()
	}
	l = m.Status.Size()
	n += 1 + l + sovProposal(uint64(l))
	return n
}

func (m *Proposal_Change) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != nil {
		l = m.Change.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}
func (m *Proposal_Rollback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rollback != nil {
		l = m.Rollback.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}
func (m *ChangeProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for k, v := range m.Values {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovProposal(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovProposal(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovProposal(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RollbackProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RollbackIndex != 0 {
		n += 1 + sovProposal(uint64(m.RollbackIndex))
	}
	return n
}

func (m *ProposalStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Phases.Size()
	n += 1 + l + sovProposal(uint64(l))
	if m.PrevIndex != 0 {
		n += 1 + sovProposal(uint64(m.PrevIndex))
	}
	if m.NextIndex != 0 {
		n += 1 + sovProposal(uint64(m.NextIndex))
	}
	if m.RollbackIndex != 0 {
		n += 1 + sovProposal(uint64(m.RollbackIndex))
	}
	if len(m.RollbackValues) > 0 {
		for k, v := range m.RollbackValues {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovProposal(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovProposal(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovProposal(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ProposalPhases) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Initialize != nil {
		l = m.Initialize.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Validate != nil {
		l = m.Validate.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Commit != nil {
		l = m.Commit.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Apply != nil {
		l = m.Apply.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Abort != nil {
		l = m.Abort.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *ProposalPhaseStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Start)
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.End != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.End)
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *ProposalInitializePhase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProposalPhaseStatus.Size()
	n += 1 + l + sovProposal(uint64(l))
	if m.State != 0 {
		n += 1 + sovProposal(uint64(m.State))
	}
	return n
}

func (m *ProposalValidatePhase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProposalPhaseStatus.Size()
	n += 1 + l + sovProposal(uint64(l))
	if m.State != 0 {
		n += 1 + sovProposal(uint64(m.State))
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *ProposalCommitPhase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProposalPhaseStatus.Size()
	n += 1 + l + sovProposal(uint64(l))
	if m.State != 0 {
		n += 1 + sovProposal(uint64(m.State))
	}
	return n
}

func (m *ProposalApplyPhase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProposalPhaseStatus.Size()
	n += 1 + l + sovProposal(uint64(l))
	if m.State != 0 {
		n += 1 + sovProposal(uint64(m.State))
	}
	if m.Term != 0 {
		n += 1 + sovProposal(uint64(m.Term))
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *ProposalAbortPhase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProposalPhaseStatus.Size()
	n += 1 + l + sovProposal(uint64(l))
	if m.State != 0 {
		n += 1 + sovProposal(uint64(m.State))
	}
	return n
}

func (m *ProposalEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovProposal(uint64(m.Type))
	}
	l = m.Proposal.Size()
	n += 1 + l + sovProposal(uint64(l))
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = ProposalID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetID = TargetID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionIndex", wireType)
			}
			m.TransactionIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Change", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeProposal{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Details = &Proposal_Change{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RollbackProposal{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Details = &Proposal_Rollback{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Values == nil {
				m.Values = make(map[string]*PathValue)
			}
			var mapkey string
			var mapvalue *PathValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProposal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProposal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProposal
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthProposal
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProposal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthProposal
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthProposal
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PathValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProposal(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthProposal
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Values[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollbackProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollbackProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollbackProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollbackIndex", wireType)
			}
			m.RollbackIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RollbackIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Phases.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevIndex", wireType)
			}
			m.PrevIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextIndex", wireType)
			}
			m.NextIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollbackIndex", wireType)
			}
			m.RollbackIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RollbackIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollbackValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RollbackValues == nil {
				m.RollbackValues = make(map[string]*PathValue)
			}
			var mapkey string
			var mapvalue *PathValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProposal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProposal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProposal
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthProposal
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProposal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthProposal
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthProposal
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PathValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProposal(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthProposal
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RollbackValues[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalPhases) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalPhases: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalPhases: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initialize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Initialize == nil {
				m.Initialize = &ProposalInitializePhase{}
			}
			if err := m.Initialize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validate == nil {
				m.Validate = &ProposalValidatePhase{}
			}
			if err := m.Validate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commit == nil {
				m.Commit = &ProposalCommitPhase{}
			}
			if err := m.Commit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Apply == nil {
				m.Apply = &ProposalApplyPhase{}
			}
			if err := m.Apply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Abort == nil {
				m.Abort = &ProposalAbortPhase{}
			}
			if err := m.Abort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalPhaseStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalPhaseStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalPhaseStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Start == nil {
				m.Start = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Start, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.End == nil {
				m.End = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.End, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalInitializePhase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalInitializePhase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalInitializePhase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPhaseStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProposalPhaseStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ProposalInitializePhase_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalValidatePhase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalValidatePhase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalValidatePhase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPhaseStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProposalPhaseStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ProposalValidatePhase_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalCommitPhase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalCommitPhase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalCommitPhase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPhaseStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProposalPhaseStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ProposalCommitPhase_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalApplyPhase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalApplyPhase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalApplyPhase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPhaseStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProposalPhaseStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ProposalApplyPhase_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= MastershipTerm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalAbortPhase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalAbortPhase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalAbortPhase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPhaseStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProposalPhaseStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ProposalAbortPhase_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ProposalEvent_EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
