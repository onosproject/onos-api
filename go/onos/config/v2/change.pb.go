// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/config/v2/change.proto

package v2

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Change represents a configuration change to a single target
type Change struct {
	// 'target_version' is an optional target version to which to apply this change
	TargetVersion TargetVersion `protobuf:"bytes,2,opt,name=target_version,json=targetVersion,proto3,casttype=TargetVersion" json:"target_version,omitempty"`
	// 'target_type' is an optional target type to which to apply this change
	TargetType TargetType `protobuf:"bytes,3,opt,name=target_type,json=targetType,proto3,casttype=TargetType" json:"target_type,omitempty"`
	// 'values' is a set of change values to apply
	Values map[string]ChangeValue `protobuf:"bytes,4,rep,name=values,proto3" json:"values" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Change) Reset()         { *m = Change{} }
func (m *Change) String() string { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()    {}
func (*Change) Descriptor() ([]byte, []int) {
	return fileDescriptor_29f35241fe2201df, []int{0}
}
func (m *Change) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Change) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Change.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Change) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change.Merge(m, src)
}
func (m *Change) XXX_Size() int {
	return m.Size()
}
func (m *Change) XXX_DiscardUnknown() {
	xxx_messageInfo_Change.DiscardUnknown(m)
}

var xxx_messageInfo_Change proto.InternalMessageInfo

func (m *Change) GetTargetVersion() TargetVersion {
	if m != nil {
		return m.TargetVersion
	}
	return ""
}

func (m *Change) GetTargetType() TargetType {
	if m != nil {
		return m.TargetType
	}
	return ""
}

func (m *Change) GetValues() map[string]ChangeValue {
	if m != nil {
		return m.Values
	}
	return nil
}

// ChangeValue represents a change requested for an individual path/value
type ChangeValue struct {
	// 'value' is the change value
	Value TypedValue `protobuf:"bytes,1,opt,name=value,json=Value,proto3" json:"Value,omitempty"`
	// 'delete' indicates whether this is a delete
	Delete bool `protobuf:"varint,2,opt,name=delete,proto3" json:"Delete,omitempty"`
}

func (m *ChangeValue) Reset()         { *m = ChangeValue{} }
func (m *ChangeValue) String() string { return proto.CompactTextString(m) }
func (*ChangeValue) ProtoMessage()    {}
func (*ChangeValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_29f35241fe2201df, []int{1}
}
func (m *ChangeValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeValue.Merge(m, src)
}
func (m *ChangeValue) XXX_Size() int {
	return m.Size()
}
func (m *ChangeValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeValue.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeValue proto.InternalMessageInfo

func (m *ChangeValue) GetValue() TypedValue {
	if m != nil {
		return m.Value
	}
	return TypedValue{}
}

func (m *ChangeValue) GetDelete() bool {
	if m != nil {
		return m.Delete
	}
	return false
}

func init() {
	proto.RegisterType((*Change)(nil), "onos.config.v2.Change")
	proto.RegisterMapType((map[string]ChangeValue)(nil), "onos.config.v2.Change.ValuesEntry")
	proto.RegisterType((*ChangeValue)(nil), "onos.config.v2.ChangeValue")
}

func init() { proto.RegisterFile("onos/config/v2/change.proto", fileDescriptor_29f35241fe2201df) }

var fileDescriptor_29f35241fe2201df = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x3f, 0x4b, 0xf3, 0x50,
	0x14, 0xc6, 0x73, 0xfb, 0x27, 0xbc, 0xef, 0x09, 0xad, 0xf5, 0x52, 0x30, 0xa4, 0x90, 0x94, 0x4e,
	0x1d, 0x4a, 0x82, 0x71, 0x29, 0x4e, 0x12, 0x75, 0x70, 0x0d, 0xa5, 0xab, 0xd4, 0xf6, 0x1a, 0x8b,
	0x6d, 0x6e, 0x48, 0xaf, 0x81, 0x7c, 0x01, 0x37, 0xc1, 0x8f, 0xd5, 0xb1, 0xa3, 0x53, 0x90, 0x76,
	0xeb, 0x47, 0xe8, 0x24, 0x39, 0x37, 0x4a, 0x2c, 0x6e, 0xe7, 0xe6, 0x79, 0x9e, 0xdf, 0x79, 0x0e,
	0x81, 0x0e, 0x0f, 0xf9, 0xca, 0x99, 0xf2, 0xf0, 0x71, 0x1e, 0x38, 0x89, 0xeb, 0x4c, 0x9f, 0x26,
	0x61, 0xc0, 0xec, 0x28, 0xe6, 0x82, 0xd3, 0x66, 0x2e, 0xda, 0x52, 0xb4, 0x13, 0xd7, 0x68, 0x07,
	0x3c, 0xe0, 0x28, 0x39, 0xf9, 0x24, 0x5d, 0x86, 0x71, 0x84, 0x48, 0x26, 0x8b, 0x97, 0x82, 0xd0,
	0x7b, 0xab, 0x80, 0x7a, 0x8d, 0x48, 0x3a, 0x84, 0xa6, 0x98, 0xc4, 0x01, 0x13, 0xf7, 0x09, 0x8b,
	0x57, 0x73, 0x1e, 0xea, 0x95, 0x2e, 0xe9, 0xff, 0xf7, 0x4e, 0x0f, 0x99, 0xd5, 0x18, 0xa1, 0x32,
	0x96, 0x82, 0xdf, 0x10, 0xe5, 0x27, 0x75, 0x40, 0x2b, 0x92, 0x22, 0x8d, 0x98, 0x5e, 0xc5, 0x58,
	0xf3, 0x90, 0x59, 0x20, 0x63, 0xa3, 0x34, 0x62, 0x3e, 0x88, 0x9f, 0x99, 0x5e, 0x81, 0x8a, 0x25,
	0x56, 0x7a, 0xad, 0x5b, 0xed, 0x6b, 0x6e, 0xcf, 0xfe, 0x7d, 0x88, 0x2d, 0x2b, 0xd9, 0x63, 0x34,
	0xdd, 0x86, 0x22, 0x4e, 0xbd, 0xda, 0x3a, 0xb3, 0x14, 0xbf, 0xc8, 0x19, 0x63, 0xd0, 0x4a, 0x22,
	0x6d, 0x41, 0xf5, 0x99, 0xa5, 0x3a, 0xc9, 0x37, 0xfb, 0xf9, 0x48, 0xcf, 0xa1, 0x8e, 0x56, 0x3c,
	0x42, 0x73, 0x3b, 0x7f, 0x6f, 0x40, 0x86, 0x2f, 0x9d, 0x97, 0x95, 0x21, 0xe9, 0xbd, 0x12, 0xd0,
	0x4a, 0x12, 0xbd, 0xfb, 0xc6, 0x10, 0xc4, 0x18, 0xc7, 0x98, 0xfc, 0x9c, 0x19, 0x5a, 0xbd, 0xb3,
	0xbc, 0xe0, 0x3e, 0xb3, 0x4e, 0xf0, 0x39, 0xe0, 0xcb, 0xb9, 0x60, 0xcb, 0x48, 0xa4, 0x7e, 0x5d,
	0xa2, 0x06, 0xa0, 0xce, 0xd8, 0x82, 0x09, 0x59, 0xe9, 0x9f, 0xd7, 0xde, 0x67, 0x56, 0xeb, 0x06,
	0xbf, 0x94, 0xcc, 0x85, 0xc7, 0xd3, 0xd7, 0x5b, 0x93, 0x6c, 0xb6, 0x26, 0xf9, 0xdc, 0x9a, 0xe4,
	0x7d, 0x67, 0x2a, 0x9b, 0x9d, 0xa9, 0x7c, 0xec, 0x4c, 0xe5, 0x41, 0xc5, 0x3f, 0x77, 0xf1, 0x15,
	0x00, 0x00, 0xff, 0xff, 0xea, 0xf3, 0x0b, 0x51, 0x1a, 0x02, 0x00, 0x00,
}

func (m *Change) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for k := range m.Values {
			v := m.Values[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintChange(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintChange(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TargetType) > 0 {
		i -= len(m.TargetType)
		copy(dAtA[i:], m.TargetType)
		i = encodeVarintChange(dAtA, i, uint64(len(m.TargetType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TargetVersion) > 0 {
		i -= len(m.TargetVersion)
		copy(dAtA[i:], m.TargetVersion)
		i = encodeVarintChange(dAtA, i, uint64(len(m.TargetVersion)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ChangeValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Delete {
		i--
		if m.Delete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintChange(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintChange(dAtA []byte, offset int, v uint64) int {
	offset -= sovChange(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Change) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TargetVersion)
	if l > 0 {
		n += 1 + l + sovChange(uint64(l))
	}
	l = len(m.TargetType)
	if l > 0 {
		n += 1 + l + sovChange(uint64(l))
	}
	if len(m.Values) > 0 {
		for k, v := range m.Values {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovChange(uint64(len(k))) + 1 + l + sovChange(uint64(l))
			n += mapEntrySize + 1 + sovChange(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ChangeValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Value.Size()
	n += 1 + l + sovChange(uint64(l))
	if m.Delete {
		n += 2
	}
	return n
}

func sovChange(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChange(x uint64) (n int) {
	return sovChange(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Change) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Change: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Change: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetVersion = TargetVersion(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetType = TargetType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Values == nil {
				m.Values = make(map[string]ChangeValue)
			}
			var mapkey string
			mapvalue := &ChangeValue{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChange
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChange
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthChange
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthChange
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChange
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthChange
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthChange
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ChangeValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipChange(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthChange
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Values[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Delete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChange(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChange
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChange
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChange
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChange
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChange        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChange          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChange = fmt.Errorf("proto: unexpected end of group")
)
