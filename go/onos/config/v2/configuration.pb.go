// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/config/v2/configuration.proto

package v2

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PathState is the state of a configuration path
type PathState int32

const (
	PathState_PATH_UPDATE_PENDING  PathState = 0
	PathState_PATH_UPDATE_COMPLETE PathState = 1
)

var PathState_name = map[int32]string{
	0: "PATH_UPDATE_PENDING",
	1: "PATH_UPDATE_COMPLETE",
}

var PathState_value = map[string]int32{
	"PATH_UPDATE_PENDING":  0,
	"PATH_UPDATE_COMPLETE": 1,
}

func (x PathState) String() string {
	return proto.EnumName(PathState_name, int32(x))
}

func (PathState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1b457d3c759d10b, []int{0}
}

// ConfigurationState is the configuration state of a configuration phase
type ConfigurationState int32

const (
	// CONFIGURATION_PENDING indicates the configuration is PENDING
	ConfigurationState_CONFIGURATION_PENDING ConfigurationState = 0
	// CONFIGURATION_SYNCHRONIZING indicates the configuration is synchronizing
	ConfigurationState_CONFIGURATION_SYNCHRONIZING ConfigurationState = 1
	// CONFIGURATION_COMPLETE indicates the configuration is complete
	ConfigurationState_CONFIGURATION_COMPLETE ConfigurationState = 2
	// CONFIGURATION_FAILED indicates the configuration is failed
	ConfigurationState_CONFIGURATION_FAILED ConfigurationState = 3
)

var ConfigurationState_name = map[int32]string{
	0: "CONFIGURATION_PENDING",
	1: "CONFIGURATION_SYNCHRONIZING",
	2: "CONFIGURATION_COMPLETE",
	3: "CONFIGURATION_FAILED",
}

var ConfigurationState_value = map[string]int32{
	"CONFIGURATION_PENDING":       0,
	"CONFIGURATION_SYNCHRONIZING": 1,
	"CONFIGURATION_COMPLETE":      2,
	"CONFIGURATION_FAILED":        3,
}

func (x ConfigurationState) String() string {
	return proto.EnumName(ConfigurationState_name, int32(x))
}

func (ConfigurationState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1b457d3c759d10b, []int{1}
}

// ConfigurationEventType configuration event types for configuration store
type ConfigurationEvent_ConfigurationEventType int32

const (
	// CONFIGURATION_EVENT_UNKNOWN indicates unknown configuration store event
	ConfigurationEvent_CONFIGURATION_EVENT_UNKNOWN ConfigurationEvent_ConfigurationEventType = 0
	// CONFIGURATION_CREATED indicates the configuration entry in the store is created
	ConfigurationEvent_CONFIGURATION_CREATED ConfigurationEvent_ConfigurationEventType = 1
	// CONFIGURATION_UPDATED indicates the configuration entry in the store is updated
	ConfigurationEvent_CONFIGURATION_UPDATED ConfigurationEvent_ConfigurationEventType = 2
	// CONFIGURATION_DELETED indicates the configuration entry in the store is deleted
	ConfigurationEvent_CONFIGURATION_DELETED ConfigurationEvent_ConfigurationEventType = 3
	// CONFIGURATION_REPLAYED
	ConfigurationEvent_CONFIGURATION_REPLAYED ConfigurationEvent_ConfigurationEventType = 4
)

var ConfigurationEvent_ConfigurationEventType_name = map[int32]string{
	0: "CONFIGURATION_EVENT_UNKNOWN",
	1: "CONFIGURATION_CREATED",
	2: "CONFIGURATION_UPDATED",
	3: "CONFIGURATION_DELETED",
	4: "CONFIGURATION_REPLAYED",
}

var ConfigurationEvent_ConfigurationEventType_value = map[string]int32{
	"CONFIGURATION_EVENT_UNKNOWN": 0,
	"CONFIGURATION_CREATED":       1,
	"CONFIGURATION_UPDATED":       2,
	"CONFIGURATION_DELETED":       3,
	"CONFIGURATION_REPLAYED":      4,
}

func (x ConfigurationEvent_ConfigurationEventType) String() string {
	return proto.EnumName(ConfigurationEvent_ConfigurationEventType_name, int32(x))
}

func (ConfigurationEvent_ConfigurationEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1b457d3c759d10b, []int{4, 0}
}

// Configuration represents complete desired target configuration
type Configuration struct {
	ObjectMeta `protobuf:"bytes,1,opt,name=meta,proto3,embedded=meta" json:"meta"`
	// 'id' is a unique configuration identifier
	ID ConfigurationID `protobuf:"bytes,2,opt,name=id,proto3,casttype=ConfigurationID" json:"id,omitempty"`
	// 'target_id' is the target to which the desired target configuration applies
	TargetID TargetID `protobuf:"bytes,3,opt,name=target_id,json=targetId,proto3,casttype=TargetID" json:"target_id,omitempty"`
	// 'target_version' is the version to which desired target configuration applies
	TargetVersion TargetVersion `protobuf:"bytes,4,opt,name=target_version,json=targetVersion,proto3,casttype=TargetVersion" json:"target_version,omitempty"`
	// 'target_type' is an optional target type to which to apply this desired target configuration
	TargetType TargetType `protobuf:"bytes,5,opt,name=target_type,json=targetType,proto3,casttype=TargetType" json:"target_type,omitempty"`
	// 'values' is a map of path/values to set
	Values map[string]*PathValue `protobuf:"bytes,6,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 'ConfigurationStatus' is the current lifecycle status of the configuration
	Status ConfigurationStatus `protobuf:"bytes,7,opt,name=status,proto3" json:"status"`
}

func (m *Configuration) Reset()         { *m = Configuration{} }
func (m *Configuration) String() string { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()    {}
func (*Configuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1b457d3c759d10b, []int{0}
}
func (m *Configuration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Configuration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Configuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration.Merge(m, src)
}
func (m *Configuration) XXX_Size() int {
	return m.Size()
}
func (m *Configuration) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration proto.InternalMessageInfo

func (m *Configuration) GetID() ConfigurationID {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Configuration) GetTargetID() TargetID {
	if m != nil {
		return m.TargetID
	}
	return ""
}

func (m *Configuration) GetTargetVersion() TargetVersion {
	if m != nil {
		return m.TargetVersion
	}
	return ""
}

func (m *Configuration) GetTargetType() TargetType {
	if m != nil {
		return m.TargetType
	}
	return ""
}

func (m *Configuration) GetValues() map[string]*PathValue {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Configuration) GetStatus() ConfigurationStatus {
	if m != nil {
		return m.Status
	}
	return ConfigurationStatus{}
}

// ConfigurationStatus is the status of a Configuration
type ConfigurationStatus struct {
	// revision is the highest revision number that's been reconciled
	Revision Revision `protobuf:"varint,1,opt,name=revision,proto3,casttype=Revision" json:"revision,omitempty"`
	// 'state' is the state of the transaction within a Phase
	State ConfigurationState `protobuf:"varint,2,opt,name=state,proto3,enum=onos.config.v2.ConfigurationState" json:"state,omitempty"`
	// mastershipState mastership info
	MastershipState MastershipState `protobuf:"bytes,3,opt,name=mastership_state,json=mastershipState,proto3" json:"mastership_state"`
	// paths a set of path statuses
	Paths map[string]*PathStatus `protobuf:"bytes,4,rep,name=paths,proto3" json:"paths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ConfigurationStatus) Reset()         { *m = ConfigurationStatus{} }
func (m *ConfigurationStatus) String() string { return proto.CompactTextString(m) }
func (*ConfigurationStatus) ProtoMessage()    {}
func (*ConfigurationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1b457d3c759d10b, []int{1}
}
func (m *ConfigurationStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigurationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigurationStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigurationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigurationStatus.Merge(m, src)
}
func (m *ConfigurationStatus) XXX_Size() int {
	return m.Size()
}
func (m *ConfigurationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigurationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigurationStatus proto.InternalMessageInfo

func (m *ConfigurationStatus) GetRevision() Revision {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *ConfigurationStatus) GetState() ConfigurationState {
	if m != nil {
		return m.State
	}
	return ConfigurationState_CONFIGURATION_PENDING
}

func (m *ConfigurationStatus) GetMastershipState() MastershipState {
	if m != nil {
		return m.MastershipState
	}
	return MastershipState{}
}

func (m *ConfigurationStatus) GetPaths() map[string]*PathStatus {
	if m != nil {
		return m.Paths
	}
	return nil
}

// PathStatus is the status of a Configuration path
type PathStatus struct {
	State       PathState `protobuf:"varint,1,opt,name=state,proto3,enum=onos.config.v2.PathState" json:"state,omitempty"`
	UpdateIndex Index     `protobuf:"varint,3,opt,name=update_index,json=updateIndex,proto3,casttype=Index" json:"update_index,omitempty"`
}

func (m *PathStatus) Reset()         { *m = PathStatus{} }
func (m *PathStatus) String() string { return proto.CompactTextString(m) }
func (*PathStatus) ProtoMessage()    {}
func (*PathStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1b457d3c759d10b, []int{2}
}
func (m *PathStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PathStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PathStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PathStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathStatus.Merge(m, src)
}
func (m *PathStatus) XXX_Size() int {
	return m.Size()
}
func (m *PathStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PathStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PathStatus proto.InternalMessageInfo

func (m *PathStatus) GetState() PathState {
	if m != nil {
		return m.State
	}
	return PathState_PATH_UPDATE_PENDING
}

func (m *PathStatus) GetUpdateIndex() Index {
	if m != nil {
		return m.UpdateIndex
	}
	return 0
}

// Mastership state
type MastershipState struct {
	Term MastershipTerm `protobuf:"varint,1,opt,name=term,proto3,casttype=MastershipTerm" json:"term,omitempty"`
}

func (m *MastershipState) Reset()         { *m = MastershipState{} }
func (m *MastershipState) String() string { return proto.CompactTextString(m) }
func (*MastershipState) ProtoMessage()    {}
func (*MastershipState) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1b457d3c759d10b, []int{3}
}
func (m *MastershipState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MastershipState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MastershipState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MastershipState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MastershipState.Merge(m, src)
}
func (m *MastershipState) XXX_Size() int {
	return m.Size()
}
func (m *MastershipState) XXX_DiscardUnknown() {
	xxx_messageInfo_MastershipState.DiscardUnknown(m)
}

var xxx_messageInfo_MastershipState proto.InternalMessageInfo

func (m *MastershipState) GetTerm() MastershipTerm {
	if m != nil {
		return m.Term
	}
	return 0
}

// ConfigurationEvent configuration store event
type ConfigurationEvent struct {
	// ConfigurationEventType configuration event type
	Type          ConfigurationEvent_ConfigurationEventType `protobuf:"varint,1,opt,name=type,proto3,enum=onos.config.v2.ConfigurationEvent_ConfigurationEventType" json:"type,omitempty"`
	Configuration Configuration                             `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration"`
}

func (m *ConfigurationEvent) Reset()         { *m = ConfigurationEvent{} }
func (m *ConfigurationEvent) String() string { return proto.CompactTextString(m) }
func (*ConfigurationEvent) ProtoMessage()    {}
func (*ConfigurationEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1b457d3c759d10b, []int{4}
}
func (m *ConfigurationEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigurationEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigurationEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigurationEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigurationEvent.Merge(m, src)
}
func (m *ConfigurationEvent) XXX_Size() int {
	return m.Size()
}
func (m *ConfigurationEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigurationEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigurationEvent proto.InternalMessageInfo

func (m *ConfigurationEvent) GetType() ConfigurationEvent_ConfigurationEventType {
	if m != nil {
		return m.Type
	}
	return ConfigurationEvent_CONFIGURATION_EVENT_UNKNOWN
}

func (m *ConfigurationEvent) GetConfiguration() Configuration {
	if m != nil {
		return m.Configuration
	}
	return Configuration{}
}

func init() {
	proto.RegisterEnum("onos.config.v2.PathState", PathState_name, PathState_value)
	proto.RegisterEnum("onos.config.v2.ConfigurationState", ConfigurationState_name, ConfigurationState_value)
	proto.RegisterEnum("onos.config.v2.ConfigurationEvent_ConfigurationEventType", ConfigurationEvent_ConfigurationEventType_name, ConfigurationEvent_ConfigurationEventType_value)
	proto.RegisterType((*Configuration)(nil), "onos.config.v2.Configuration")
	proto.RegisterMapType((map[string]*PathValue)(nil), "onos.config.v2.Configuration.ValuesEntry")
	proto.RegisterType((*ConfigurationStatus)(nil), "onos.config.v2.ConfigurationStatus")
	proto.RegisterMapType((map[string]*PathStatus)(nil), "onos.config.v2.ConfigurationStatus.PathsEntry")
	proto.RegisterType((*PathStatus)(nil), "onos.config.v2.PathStatus")
	proto.RegisterType((*MastershipState)(nil), "onos.config.v2.MastershipState")
	proto.RegisterType((*ConfigurationEvent)(nil), "onos.config.v2.ConfigurationEvent")
}

func init() {
	proto.RegisterFile("onos/config/v2/configuration.proto", fileDescriptor_a1b457d3c759d10b)
}

var fileDescriptor_a1b457d3c759d10b = []byte{
	// 789 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x4f, 0x6f, 0xe2, 0x46,
	0x14, 0xc7, 0xc6, 0xa4, 0xf0, 0x58, 0x08, 0x9d, 0xdd, 0x6e, 0x8d, 0x57, 0xc5, 0x11, 0x95, 0x2a,
	0x12, 0x55, 0x50, 0x51, 0x55, 0x22, 0x3d, 0x54, 0x02, 0xec, 0x24, 0x56, 0x83, 0x41, 0x13, 0x27,
	0x55, 0x7a, 0x41, 0x4e, 0x98, 0x12, 0x37, 0x05, 0x23, 0x7b, 0x40, 0xe5, 0x0b, 0xf4, 0xdc, 0x4f,
	0xd1, 0xcf, 0x92, 0x63, 0x6e, 0xed, 0xc9, 0xaa, 0xc8, 0xa1, 0xf7, 0x1e, 0x39, 0x55, 0x9e, 0x71,
	0x09, 0x06, 0x9a, 0xee, 0x6d, 0xfc, 0x7e, 0x7f, 0xde, 0x9b, 0xdf, 0xd3, 0x00, 0x94, 0xdd, 0xb1,
	0xeb, 0xd7, 0x6e, 0xdd, 0xf1, 0x0f, 0xce, 0xb0, 0x36, 0xab, 0x47, 0xa7, 0xa9, 0x67, 0x53, 0xc7,
	0x1d, 0x57, 0x27, 0x9e, 0x4b, 0x5d, 0x94, 0x0f, 0x39, 0x55, 0x8e, 0x54, 0x67, 0x75, 0xe5, 0xcd,
	0xd0, 0x1d, 0xba, 0x0c, 0xaa, 0x85, 0x27, 0xce, 0x52, 0xde, 0x6d, 0x38, 0xb9, 0x37, 0x3f, 0x92,
	0x5b, 0x1a, 0x81, 0xca, 0x06, 0x38, 0xb3, 0x7f, 0x9a, 0x12, 0x8e, 0x95, 0xff, 0x4e, 0x42, 0xae,
	0xbd, 0xde, 0x16, 0x35, 0x40, 0x1a, 0x11, 0x6a, 0xcb, 0xc2, 0x81, 0x50, 0xc9, 0xd6, 0x95, 0x6a,
	0xbc, 0x7f, 0xb5, 0xcb, 0x9c, 0x3b, 0x84, 0xda, 0xad, 0xf4, 0x43, 0xa0, 0x26, 0x1e, 0x03, 0x55,
	0xc0, 0x4c, 0x81, 0x0e, 0x41, 0x74, 0x06, 0xb2, 0x78, 0x20, 0x54, 0x32, 0xad, 0xe2, 0x22, 0x50,
	0x45, 0x43, 0x5b, 0x06, 0xea, 0x7e, 0xcc, 0xde, 0xd0, 0xb0, 0xe8, 0x0c, 0xd0, 0x57, 0x90, 0xa1,
	0xb6, 0x37, 0x24, 0xb4, 0xef, 0x0c, 0xe4, 0x24, 0x53, 0xc8, 0x8b, 0x40, 0x4d, 0x5b, 0xac, 0xc8,
	0x74, 0xab, 0x33, 0x4e, 0x73, 0xaa, 0x31, 0x40, 0x0d, 0xc8, 0x47, 0xb2, 0x19, 0xf1, 0x7c, 0xc7,
	0x1d, 0xcb, 0x12, 0xd3, 0x7e, 0xb8, 0x0c, 0xd4, 0x1c, 0xe7, 0x5f, 0x71, 0x00, 0xe7, 0xe8, 0xfa,
	0x27, 0xaa, 0x41, 0x36, 0x52, 0xd2, 0xf9, 0x84, 0xc8, 0x29, 0x26, 0xcb, 0x2f, 0x03, 0x15, 0xb8,
	0xcc, 0x9a, 0x4f, 0x08, 0x06, 0xba, 0x3a, 0xa3, 0x26, 0xec, 0xb1, 0x9c, 0x7c, 0x79, 0xef, 0x20,
	0x59, 0xc9, 0xd6, 0x0f, 0x37, 0x83, 0x88, 0x5d, 0xab, 0x7a, 0xc5, 0xb8, 0xfa, 0x98, 0x7a, 0x73,
	0x1c, 0x09, 0x43, 0x0b, 0x9f, 0xda, 0x74, 0xea, 0xcb, 0x1f, 0xb0, 0x2c, 0x3f, 0x7d, 0xd1, 0xe2,
	0x82, 0x51, 0x5b, 0x52, 0x18, 0x2a, 0x8e, 0x84, 0x8a, 0x05, 0xd9, 0x35, 0x67, 0x54, 0x80, 0xe4,
	0x3d, 0x99, 0xb3, 0xd5, 0x64, 0x70, 0x78, 0x44, 0x35, 0x48, 0xb1, 0x6e, 0x2c, 0xf6, 0x6c, 0xbd,
	0xb8, 0xd9, 0xa2, 0x67, 0xd3, 0x3b, 0xe6, 0x80, 0x39, 0xef, 0x6b, 0xb1, 0x21, 0x94, 0xff, 0x12,
	0xe1, 0xf5, 0x8e, 0xde, 0xa8, 0x02, 0x69, 0x8f, 0xcc, 0x1c, 0x16, 0x6c, 0xd8, 0x43, 0x6a, 0xbd,
	0x0a, 0x17, 0x81, 0xa3, 0x1a, 0x5e, 0xa1, 0xa8, 0x01, 0xa9, 0x70, 0x42, 0xde, 0x36, 0x5f, 0x2f,
	0xff, 0xef, 0xcd, 0x08, 0xe6, 0x02, 0xd4, 0x83, 0xc2, 0xc8, 0xf6, 0x29, 0xf1, 0xfc, 0x3b, 0x67,
	0xd2, 0xe7, 0x26, 0x49, 0x36, 0xbb, 0xba, 0x69, 0xd2, 0x59, 0xf1, 0x98, 0x43, 0x14, 0xcd, 0xfe,
	0x28, 0x5e, 0x46, 0x1a, 0xa4, 0x26, 0x36, 0xbd, 0xf3, 0x65, 0x89, 0x2d, 0xaa, 0xfa, 0x1e, 0x29,
	0xb3, 0x58, 0xa2, 0x6d, 0x71, 0xb1, 0x62, 0x01, 0x3c, 0x17, 0x77, 0x04, 0xfd, 0x45, 0x3c, 0x68,
	0x65, 0x57, 0xd0, 0xdc, 0x7c, 0x3d, 0xe9, 0x7b, 0xee, 0x1a, 0xe5, 0x5b, 0xfb, 0x37, 0x35, 0x81,
	0xa5, 0x56, 0xfc, 0x2f, 0x8f, 0x55, 0x58, 0x9f, 0xc3, 0xab, 0xe9, 0x64, 0x60, 0x53, 0xd2, 0x77,
	0xc6, 0x03, 0xf2, 0x33, 0x0b, 0x4a, 0x6a, 0x65, 0x96, 0x81, 0x9a, 0x32, 0xc2, 0x02, 0xce, 0x72,
	0x98, 0x7d, 0x94, 0x8f, 0x61, 0x7f, 0x23, 0x32, 0xf4, 0x19, 0x48, 0x94, 0x78, 0xa3, 0x68, 0x9b,
	0x68, 0x19, 0xa8, 0xf9, 0x67, 0x8a, 0x45, 0xbc, 0x11, 0x66, 0x78, 0xf9, 0x77, 0x11, 0x50, 0x2c,
	0x27, 0x7d, 0x46, 0xc6, 0x14, 0x75, 0x40, 0x62, 0xcf, 0x85, 0xcf, 0x7b, 0xfc, 0x62, 0xb2, 0x4c,
	0xb1, 0xa3, 0xc4, 0x5e, 0x16, 0xb3, 0x41, 0x06, 0xe4, 0x62, 0x3f, 0x71, 0x51, 0x96, 0x9f, 0xbc,
	0xe8, 0x1b, 0xad, 0x3d, 0xae, 0x2c, 0xff, 0x26, 0xc0, 0xdb, 0xdd, 0xbd, 0x90, 0x0a, 0xef, 0xda,
	0x5d, 0xf3, 0xc4, 0x38, 0xbd, 0xc4, 0x4d, 0xcb, 0xe8, 0x9a, 0x7d, 0xfd, 0x4a, 0x37, 0xad, 0xfe,
	0xa5, 0xf9, 0xad, 0xd9, 0xfd, 0xce, 0x2c, 0x24, 0x50, 0x11, 0x3e, 0x8a, 0x13, 0xda, 0x58, 0x6f,
	0x5a, 0xba, 0x56, 0x10, 0xb6, 0xa1, 0xcb, 0x9e, 0xc6, 0x20, 0x71, 0x1b, 0xd2, 0xf4, 0x73, 0x3d,
	0x84, 0x92, 0x48, 0x81, 0xb7, 0x71, 0x08, 0xeb, 0xbd, 0xf3, 0xe6, 0xb5, 0xae, 0x15, 0xa4, 0xa3,
	0x6f, 0x20, 0xb3, 0x5a, 0x2b, 0xfa, 0x18, 0x5e, 0xf7, 0x9a, 0xd6, 0x59, 0xe4, 0xda, 0xef, 0xe9,
	0xa6, 0x66, 0x98, 0xa7, 0x85, 0x04, 0x92, 0xe1, 0xcd, 0x3a, 0xd0, 0xee, 0x76, 0x7a, 0xa1, 0x79,
	0x41, 0x38, 0xfa, 0x45, 0xd8, 0xd8, 0x0c, 0x77, 0xda, 0x9a, 0xe6, 0xd9, 0x6b, 0xeb, 0xfe, 0x17,
	0xd7, 0x66, 0xfb, 0x0c, 0x77, 0x4d, 0xe3, 0xfb, 0x90, 0x20, 0x6c, 0x8f, 0xbb, 0x6a, 0x27, 0x86,
	0x83, 0xc4, 0xb1, 0x93, 0xa6, 0x71, 0x1e, 0x5e, 0xb2, 0x25, 0x3f, 0x2c, 0x4a, 0xc2, 0xe3, 0xa2,
	0x24, 0xfc, 0xb9, 0x28, 0x09, 0xbf, 0x3e, 0x95, 0x12, 0x8f, 0x4f, 0xa5, 0xc4, 0x1f, 0x4f, 0xa5,
	0xc4, 0xcd, 0x1e, 0xfb, 0x2b, 0xf9, 0xf2, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x35, 0xa5, 0x83,
	0xfc, 0xcf, 0x06, 0x00, 0x00,
}

func (m *Configuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configuration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Configuration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintConfiguration(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Values) > 0 {
		for k := range m.Values {
			v := m.Values[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintConfiguration(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintConfiguration(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintConfiguration(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TargetType) > 0 {
		i -= len(m.TargetType)
		copy(dAtA[i:], m.TargetType)
		i = encodeVarintConfiguration(dAtA, i, uint64(len(m.TargetType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TargetVersion) > 0 {
		i -= len(m.TargetVersion)
		copy(dAtA[i:], m.TargetVersion)
		i = encodeVarintConfiguration(dAtA, i, uint64(len(m.TargetVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetID) > 0 {
		i -= len(m.TargetID)
		copy(dAtA[i:], m.TargetID)
		i = encodeVarintConfiguration(dAtA, i, uint64(len(m.TargetID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintConfiguration(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintConfiguration(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ConfigurationStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigurationStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigurationStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Paths) > 0 {
		for k := range m.Paths {
			v := m.Paths[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintConfiguration(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintConfiguration(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintConfiguration(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.MastershipState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintConfiguration(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.State != 0 {
		i = encodeVarintConfiguration(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.Revision != 0 {
		i = encodeVarintConfiguration(dAtA, i, uint64(m.Revision))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PathStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PathStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PathStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateIndex != 0 {
		i = encodeVarintConfiguration(dAtA, i, uint64(m.UpdateIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.State != 0 {
		i = encodeVarintConfiguration(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MastershipState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MastershipState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MastershipState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Term != 0 {
		i = encodeVarintConfiguration(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfigurationEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigurationEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigurationEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintConfiguration(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Type != 0 {
		i = encodeVarintConfiguration(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfiguration(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfiguration(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Configuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovConfiguration(uint64(l))
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovConfiguration(uint64(l))
	}
	l = len(m.TargetID)
	if l > 0 {
		n += 1 + l + sovConfiguration(uint64(l))
	}
	l = len(m.TargetVersion)
	if l > 0 {
		n += 1 + l + sovConfiguration(uint64(l))
	}
	l = len(m.TargetType)
	if l > 0 {
		n += 1 + l + sovConfiguration(uint64(l))
	}
	if len(m.Values) > 0 {
		for k, v := range m.Values {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovConfiguration(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovConfiguration(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovConfiguration(uint64(mapEntrySize))
		}
	}
	l = m.Status.Size()
	n += 1 + l + sovConfiguration(uint64(l))
	return n
}

func (m *ConfigurationStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Revision != 0 {
		n += 1 + sovConfiguration(uint64(m.Revision))
	}
	if m.State != 0 {
		n += 1 + sovConfiguration(uint64(m.State))
	}
	l = m.MastershipState.Size()
	n += 1 + l + sovConfiguration(uint64(l))
	if len(m.Paths) > 0 {
		for k, v := range m.Paths {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovConfiguration(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovConfiguration(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovConfiguration(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PathStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovConfiguration(uint64(m.State))
	}
	if m.UpdateIndex != 0 {
		n += 1 + sovConfiguration(uint64(m.UpdateIndex))
	}
	return n
}

func (m *MastershipState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovConfiguration(uint64(m.Term))
	}
	return n
}

func (m *ConfigurationEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovConfiguration(uint64(m.Type))
	}
	l = m.Configuration.Size()
	n += 1 + l + sovConfiguration(uint64(l))
	return n
}

func sovConfiguration(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfiguration(x uint64) (n int) {
	return sovConfiguration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Configuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Configuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Configuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = ConfigurationID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetID = TargetID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetVersion = TargetVersion(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetType = TargetType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Values == nil {
				m.Values = make(map[string]*PathValue)
			}
			var mapkey string
			var mapvalue *PathValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConfiguration
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfiguration
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthConfiguration
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthConfiguration
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfiguration
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthConfiguration
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthConfiguration
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PathValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipConfiguration(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthConfiguration
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Values[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigurationStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigurationStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigurationStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= Revision(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ConfigurationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MastershipState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MastershipState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paths == nil {
				m.Paths = make(map[string]*PathStatus)
			}
			var mapkey string
			var mapvalue *PathStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConfiguration
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfiguration
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthConfiguration
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthConfiguration
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfiguration
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthConfiguration
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthConfiguration
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PathStatus{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipConfiguration(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthConfiguration
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Paths[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PathStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PathStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PathStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PathState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateIndex", wireType)
			}
			m.UpdateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MastershipState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MastershipState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MastershipState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= MastershipTerm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigurationEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigurationEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigurationEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ConfigurationEvent_ConfigurationEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfiguration(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfiguration
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfiguration
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfiguration
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfiguration
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfiguration        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfiguration          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfiguration = fmt.Errorf("proto: unexpected end of group")
)
