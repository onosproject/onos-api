// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/config/v2/configuration.proto

package v2

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ConfigurationState is the configuration state of a configuration phase
type ConfigurationState int32

const (
	// CONFIGURATION_PENDING indicates the configuration is PENDING
	ConfigurationState_CONFIGURATION_PENDING ConfigurationState = 0
	// COMPLETE indicates the configuration is COMPLETE
	ConfigurationState_CONFIGURATION_COMPLETE ConfigurationState = 2
)

var ConfigurationState_name = map[int32]string{
	0: "CONFIGURATION_PENDING",
	2: "CONFIGURATION_COMPLETE",
}

var ConfigurationState_value = map[string]int32{
	"CONFIGURATION_PENDING":  0,
	"CONFIGURATION_COMPLETE": 2,
}

func (x ConfigurationState) String() string {
	return proto.EnumName(ConfigurationState_name, int32(x))
}

func (ConfigurationState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1b457d3c759d10b, []int{0}
}

// ConfigurationEventType configuration event types for configuration store
type ConfigurationEventType int32

const (
	ConfigurationEventType_CONFIGURATION_EVENT_UNKNOWN ConfigurationEventType = 0
	ConfigurationEventType_CONFIGURATION_CREATED       ConfigurationEventType = 1
	ConfigurationEventType_CONFIGURATION_UPDATED       ConfigurationEventType = 2
	ConfigurationEventType_CONFIGURATION_DELETED       ConfigurationEventType = 3
	ConfigurationEventType_CONFIGURATION_REPLAYED      ConfigurationEventType = 4
)

var ConfigurationEventType_name = map[int32]string{
	0: "CONFIGURATION_EVENT_UNKNOWN",
	1: "CONFIGURATION_CREATED",
	2: "CONFIGURATION_UPDATED",
	3: "CONFIGURATION_DELETED",
	4: "CONFIGURATION_REPLAYED",
}

var ConfigurationEventType_value = map[string]int32{
	"CONFIGURATION_EVENT_UNKNOWN": 0,
	"CONFIGURATION_CREATED":       1,
	"CONFIGURATION_UPDATED":       2,
	"CONFIGURATION_DELETED":       3,
	"CONFIGURATION_REPLAYED":      4,
}

func (x ConfigurationEventType) String() string {
	return proto.EnumName(ConfigurationEventType_name, int32(x))
}

func (ConfigurationEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1b457d3c759d10b, []int{1}
}

// Configuration represents complete desired target configuration
type Configuration struct {
	// 'id' is a unique configuration identifier
	ID ConfigurationID `protobuf:"bytes,1,opt,name=id,proto3,casttype=ConfigurationID" json:"id,omitempty"`
	// 'target_id' is the target to which the desired target configuration applies
	TargetID TargetID `protobuf:"bytes,2,opt,name=target_id,json=targetId,proto3,casttype=TargetID" json:"target_id,omitempty"`
	// 'target_version' is the version to which desired target configuration applies
	TargetVersion TargetVersion `protobuf:"bytes,3,opt,name=target_version,json=targetVersion,proto3,casttype=TargetVersion" json:"target_version,omitempty"`
	// 'target_type' is an optional target type to which to apply this desired target configuration
	TargetType TargetType `protobuf:"bytes,4,opt,name=target_type,json=targetType,proto3,casttype=TargetType" json:"target_type,omitempty"`
	// 'values' is a list of path/values to set
	Values []*PathValue `protobuf:"bytes,5,rep,name=values,proto3" json:"values,omitempty"`
	// 'ConfigurationStatus' is the current lifecycle status of the configuration
	Status ConfigurationStatus `protobuf:"bytes,6,opt,name=status,proto3" json:"status"`
}

func (m *Configuration) Reset()         { *m = Configuration{} }
func (m *Configuration) String() string { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()    {}
func (*Configuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1b457d3c759d10b, []int{0}
}
func (m *Configuration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Configuration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Configuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration.Merge(m, src)
}
func (m *Configuration) XXX_Size() int {
	return m.Size()
}
func (m *Configuration) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration proto.InternalMessageInfo

func (m *Configuration) GetID() ConfigurationID {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Configuration) GetTargetID() TargetID {
	if m != nil {
		return m.TargetID
	}
	return ""
}

func (m *Configuration) GetTargetVersion() TargetVersion {
	if m != nil {
		return m.TargetVersion
	}
	return ""
}

func (m *Configuration) GetTargetType() TargetType {
	if m != nil {
		return m.TargetType
	}
	return ""
}

func (m *Configuration) GetValues() []*PathValue {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Configuration) GetStatus() ConfigurationStatus {
	if m != nil {
		return m.Status
	}
	return ConfigurationStatus{}
}

// ConfigurationStatus is the status of a Configuration
type ConfigurationStatus struct {
	// 'state' is the state of the transaction within a Phase
	State ConfigurationState `protobuf:"varint,2,opt,name=state,proto3,enum=onos.config.v2.ConfigurationState" json:"state,omitempty"`
	// message is a result message
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// mastershipState mastership info
	MastershipState *MastershipState `protobuf:"bytes,5,opt,name=mastershipState,proto3" json:"mastershipState,omitempty"`
}

func (m *ConfigurationStatus) Reset()         { *m = ConfigurationStatus{} }
func (m *ConfigurationStatus) String() string { return proto.CompactTextString(m) }
func (*ConfigurationStatus) ProtoMessage()    {}
func (*ConfigurationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1b457d3c759d10b, []int{1}
}
func (m *ConfigurationStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigurationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigurationStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigurationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigurationStatus.Merge(m, src)
}
func (m *ConfigurationStatus) XXX_Size() int {
	return m.Size()
}
func (m *ConfigurationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigurationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigurationStatus proto.InternalMessageInfo

func (m *ConfigurationStatus) GetState() ConfigurationState {
	if m != nil {
		return m.State
	}
	return ConfigurationState_CONFIGURATION_PENDING
}

func (m *ConfigurationStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ConfigurationStatus) GetMastershipState() *MastershipState {
	if m != nil {
		return m.MastershipState
	}
	return nil
}

// Mastership state
type MastershipState struct {
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
}

func (m *MastershipState) Reset()         { *m = MastershipState{} }
func (m *MastershipState) String() string { return proto.CompactTextString(m) }
func (*MastershipState) ProtoMessage()    {}
func (*MastershipState) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1b457d3c759d10b, []int{2}
}
func (m *MastershipState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MastershipState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MastershipState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MastershipState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MastershipState.Merge(m, src)
}
func (m *MastershipState) XXX_Size() int {
	return m.Size()
}
func (m *MastershipState) XXX_DiscardUnknown() {
	xxx_messageInfo_MastershipState.DiscardUnknown(m)
}

var xxx_messageInfo_MastershipState proto.InternalMessageInfo

func (m *MastershipState) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

// ConfigurationEvent configuration store event
type ConfigurationEvent struct {
	Type          ConfigurationEventType `protobuf:"varint,1,opt,name=type,proto3,enum=onos.config.v2.ConfigurationEventType" json:"type,omitempty"`
	Configuration Configuration          `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration"`
}

func (m *ConfigurationEvent) Reset()         { *m = ConfigurationEvent{} }
func (m *ConfigurationEvent) String() string { return proto.CompactTextString(m) }
func (*ConfigurationEvent) ProtoMessage()    {}
func (*ConfigurationEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1b457d3c759d10b, []int{3}
}
func (m *ConfigurationEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigurationEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigurationEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigurationEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigurationEvent.Merge(m, src)
}
func (m *ConfigurationEvent) XXX_Size() int {
	return m.Size()
}
func (m *ConfigurationEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigurationEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigurationEvent proto.InternalMessageInfo

func (m *ConfigurationEvent) GetType() ConfigurationEventType {
	if m != nil {
		return m.Type
	}
	return ConfigurationEventType_CONFIGURATION_EVENT_UNKNOWN
}

func (m *ConfigurationEvent) GetConfiguration() Configuration {
	if m != nil {
		return m.Configuration
	}
	return Configuration{}
}

func init() {
	proto.RegisterEnum("onos.config.v2.ConfigurationState", ConfigurationState_name, ConfigurationState_value)
	proto.RegisterEnum("onos.config.v2.ConfigurationEventType", ConfigurationEventType_name, ConfigurationEventType_value)
	proto.RegisterType((*Configuration)(nil), "onos.config.v2.Configuration")
	proto.RegisterType((*ConfigurationStatus)(nil), "onos.config.v2.ConfigurationStatus")
	proto.RegisterType((*MastershipState)(nil), "onos.config.v2.MastershipState")
	proto.RegisterType((*ConfigurationEvent)(nil), "onos.config.v2.ConfigurationEvent")
}

func init() {
	proto.RegisterFile("onos/config/v2/configuration.proto", fileDescriptor_a1b457d3c759d10b)
}

var fileDescriptor_a1b457d3c759d10b = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xc1, 0x6e, 0xda, 0x4c,
	0x14, 0x85, 0x6d, 0xc7, 0xf0, 0x27, 0x17, 0x01, 0xfe, 0xa7, 0x6d, 0x64, 0xa8, 0x6a, 0x23, 0x57,
	0xad, 0x68, 0x16, 0xa0, 0xba, 0xaa, 0x14, 0x75, 0x07, 0xd8, 0x8d, 0xac, 0x24, 0x06, 0x4d, 0x0d,
	0x55, 0x57, 0xc8, 0x2d, 0x53, 0x62, 0xa9, 0x60, 0x64, 0x0f, 0x48, 0x79, 0x8b, 0xee, 0xbb, 0xef,
	0x13, 0xf4, 0x21, 0xb2, 0x8c, 0xba, 0xea, 0xca, 0xaa, 0xe0, 0x2d, 0x58, 0x55, 0x1e, 0xbb, 0x51,
	0x6c, 0xa2, 0x74, 0x77, 0x87, 0x73, 0xbe, 0xcb, 0xb9, 0x77, 0xc6, 0xa0, 0xf9, 0x73, 0x3f, 0x6c,
	0x7f, 0xf2, 0xe7, 0x9f, 0xbd, 0x69, 0x7b, 0xa5, 0xa7, 0xd5, 0x32, 0x70, 0xa9, 0xe7, 0xcf, 0x5b,
	0x8b, 0xc0, 0xa7, 0x3e, 0xaa, 0xc4, 0x9e, 0x56, 0xa2, 0xb4, 0x56, 0x7a, 0xfd, 0xe1, 0xd4, 0x9f,
	0xfa, 0x4c, 0x6a, 0xc7, 0x55, 0xe2, 0xaa, 0xd7, 0x73, 0x9d, 0xe8, 0xe5, 0x82, 0x84, 0x89, 0xa6,
	0xfd, 0x14, 0xa0, 0xdc, 0xbb, 0xdd, 0x19, 0xbd, 0x00, 0xc1, 0x9b, 0xc8, 0x7c, 0x83, 0x6f, 0x1e,
	0x74, 0x6b, 0xeb, 0x48, 0x15, 0x2c, 0x63, 0x1b, 0xa9, 0xd5, 0x8c, 0xc9, 0x32, 0xb0, 0xe0, 0x4d,
	0xd0, 0x6b, 0x38, 0xa0, 0x6e, 0x30, 0x25, 0x74, 0xec, 0x4d, 0x64, 0x81, 0x11, 0xf2, 0x3a, 0x52,
	0xf7, 0x1d, 0xf6, 0x23, 0xe3, 0x6e, 0x6a, 0xbc, 0x9f, 0x58, 0xad, 0x09, 0x3a, 0x86, 0x4a, 0x8a,
	0xad, 0x48, 0x10, 0x7a, 0xfe, 0x5c, 0xde, 0x63, 0xec, 0xff, 0xdb, 0x48, 0x2d, 0x27, 0xfe, 0x51,
	0x22, 0xe0, 0x32, 0xbd, 0x7d, 0x44, 0x6d, 0x28, 0xa5, 0x64, 0x3c, 0x83, 0x2c, 0x32, 0xac, 0xb2,
	0x8d, 0x54, 0x48, 0x30, 0xe7, 0x72, 0x41, 0x30, 0xd0, 0x9b, 0x1a, 0xbd, 0x84, 0xe2, 0xca, 0xfd,
	0xb2, 0x24, 0xa1, 0x5c, 0x68, 0xec, 0x35, 0x4b, 0x7a, 0xad, 0x95, 0xdd, 0x58, 0x6b, 0xe0, 0xd2,
	0x8b, 0x51, 0xec, 0xc0, 0xa9, 0x11, 0x75, 0xa0, 0x18, 0x52, 0x97, 0x2e, 0x43, 0xb9, 0xd8, 0xe0,
	0x9b, 0x25, 0xfd, 0x69, 0x1e, 0xc9, 0x6c, 0xe2, 0x1d, 0xb3, 0x76, 0xc5, 0xab, 0x48, 0xe5, 0x70,
	0x0a, 0x6a, 0x3f, 0x78, 0x78, 0x70, 0x87, 0x0b, 0x1d, 0x43, 0x21, 0x76, 0x10, 0xb6, 0xab, 0x8a,
	0xae, 0xfd, 0xb3, 0x33, 0xc1, 0x09, 0x80, 0x64, 0xf8, 0x6f, 0x46, 0xc2, 0xd0, 0x9d, 0xa6, 0x43,
	0xe3, 0xbf, 0x47, 0x64, 0x41, 0x75, 0xe6, 0x86, 0x94, 0x04, 0xe1, 0x85, 0xb7, 0x60, 0x8c, 0x5c,
	0x60, 0xb9, 0xd5, 0x7c, 0xf7, 0xf3, 0xac, 0x0d, 0xe7, 0x39, 0xed, 0x19, 0x54, 0x73, 0x1e, 0x84,
	0x40, 0xa4, 0x24, 0x98, 0xb1, 0xe7, 0x20, 0x62, 0x56, 0x6b, 0xdf, 0x78, 0x40, 0x99, 0xa4, 0xe6,
	0x8a, 0xcc, 0x29, 0x7a, 0x03, 0x22, 0xbb, 0x14, 0x9e, 0xcd, 0xf6, 0xfc, 0xde, 0xd9, 0x18, 0xc1,
	0x2e, 0x8b, 0x31, 0xc8, 0x82, 0x72, 0xe6, 0x79, 0xb3, 0x05, 0x95, 0xf4, 0x27, 0xf7, 0x36, 0x49,
	0x97, 0x9e, 0x25, 0x8f, 0x4e, 0x73, 0xe1, 0x92, 0x39, 0x6a, 0xf0, 0xa8, 0xd7, 0xb7, 0xdf, 0x5a,
	0x27, 0x43, 0xdc, 0x71, 0xac, 0xbe, 0x3d, 0x1e, 0x98, 0xb6, 0x61, 0xd9, 0x27, 0x12, 0x87, 0xea,
	0x70, 0x98, 0x95, 0x7a, 0xfd, 0xf3, 0xc1, 0x99, 0xe9, 0x98, 0x92, 0x70, 0xf4, 0x9d, 0x87, 0xc3,
	0xbb, 0x83, 0x23, 0x15, 0x1e, 0x67, 0x31, 0x73, 0x64, 0xda, 0xce, 0x78, 0x68, 0x9f, 0xda, 0xfd,
	0xf7, 0xb6, 0xc4, 0xed, 0xfe, 0x65, 0x0f, 0x9b, 0x1d, 0xc7, 0x34, 0x24, 0x7e, 0x57, 0x1a, 0x0e,
	0x0c, 0x26, 0x09, 0xbb, 0x92, 0x61, 0xc6, 0x59, 0x0c, 0x69, 0x6f, 0x37, 0x28, 0x36, 0x07, 0x67,
	0x9d, 0x0f, 0xa6, 0x21, 0x89, 0x5d, 0xf9, 0x6a, 0xad, 0xf0, 0xd7, 0x6b, 0x85, 0xff, 0xbd, 0x56,
	0xf8, 0xaf, 0x1b, 0x85, 0xbb, 0xde, 0x28, 0xdc, 0xaf, 0x8d, 0xc2, 0x7d, 0x2c, 0xb2, 0xef, 0xfc,
	0xd5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xad, 0xee, 0x4a, 0xef, 0x4f, 0x04, 0x00, 0x00,
}

func (m *Configuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configuration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Configuration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintConfiguration(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConfiguration(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TargetType) > 0 {
		i -= len(m.TargetType)
		copy(dAtA[i:], m.TargetType)
		i = encodeVarintConfiguration(dAtA, i, uint64(len(m.TargetType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetVersion) > 0 {
		i -= len(m.TargetVersion)
		copy(dAtA[i:], m.TargetVersion)
		i = encodeVarintConfiguration(dAtA, i, uint64(len(m.TargetVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TargetID) > 0 {
		i -= len(m.TargetID)
		copy(dAtA[i:], m.TargetID)
		i = encodeVarintConfiguration(dAtA, i, uint64(len(m.TargetID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintConfiguration(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigurationStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigurationStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigurationStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MastershipState != nil {
		{
			size, err := m.MastershipState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfiguration(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintConfiguration(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.State != 0 {
		i = encodeVarintConfiguration(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *MastershipState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MastershipState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MastershipState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Term != 0 {
		i = encodeVarintConfiguration(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfigurationEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigurationEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigurationEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintConfiguration(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Type != 0 {
		i = encodeVarintConfiguration(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfiguration(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfiguration(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Configuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovConfiguration(uint64(l))
	}
	l = len(m.TargetID)
	if l > 0 {
		n += 1 + l + sovConfiguration(uint64(l))
	}
	l = len(m.TargetVersion)
	if l > 0 {
		n += 1 + l + sovConfiguration(uint64(l))
	}
	l = len(m.TargetType)
	if l > 0 {
		n += 1 + l + sovConfiguration(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovConfiguration(uint64(l))
		}
	}
	l = m.Status.Size()
	n += 1 + l + sovConfiguration(uint64(l))
	return n
}

func (m *ConfigurationStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovConfiguration(uint64(m.State))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovConfiguration(uint64(l))
	}
	if m.MastershipState != nil {
		l = m.MastershipState.Size()
		n += 1 + l + sovConfiguration(uint64(l))
	}
	return n
}

func (m *MastershipState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovConfiguration(uint64(m.Term))
	}
	return n
}

func (m *ConfigurationEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovConfiguration(uint64(m.Type))
	}
	l = m.Configuration.Size()
	n += 1 + l + sovConfiguration(uint64(l))
	return n
}

func sovConfiguration(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfiguration(x uint64) (n int) {
	return sovConfiguration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Configuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Configuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Configuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = ConfigurationID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetID = TargetID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetVersion = TargetVersion(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetType = TargetType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &PathValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigurationStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigurationStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigurationStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ConfigurationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MastershipState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MastershipState == nil {
				m.MastershipState = &MastershipState{}
			}
			if err := m.MastershipState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MastershipState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MastershipState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MastershipState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigurationEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfiguration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigurationEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigurationEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ConfigurationEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfiguration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfiguration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfiguration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfiguration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfiguration(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfiguration
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfiguration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfiguration
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfiguration
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfiguration
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfiguration        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfiguration          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfiguration = fmt.Errorf("proto: unexpected end of group")
)
