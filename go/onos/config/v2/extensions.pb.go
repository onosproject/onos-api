// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/config/v2/extensions.proto

package v2

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TransactionCommand describes phases of the two-phase transaction commit protocol.
type TransactionCommand int32

const (
	TransactionCommand_PREPARE  TransactionCommand = 0
	TransactionCommand_COMMIT   TransactionCommand = 1
	TransactionCommand_ROLLBACK TransactionCommand = 2
)

var TransactionCommand_name = map[int32]string{
	0: "PREPARE",
	1: "COMMIT",
	2: "ROLLBACK",
}

var TransactionCommand_value = map[string]int32{
	"PREPARE":  0,
	"COMMIT":   1,
	"ROLLBACK": 2,
}

func (x TransactionCommand) String() string {
	return proto.EnumName(TransactionCommand_name, int32(x))
}

func (TransactionCommand) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ac6be9aa3eaafbdc, []int{0}
}

// TransactionInfo is a bi-directional extension carrying transaction information between the
// client and onos-config.
type TransactionInfo struct {
	ID    TransactionID `protobuf:"bytes,1,opt,name=id,proto3,casttype=TransactionID" json:"id,omitempty"`
	Index Index         `protobuf:"varint,2,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
}

func (m *TransactionInfo) Reset()         { *m = TransactionInfo{} }
func (m *TransactionInfo) String() string { return proto.CompactTextString(m) }
func (*TransactionInfo) ProtoMessage()    {}
func (*TransactionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac6be9aa3eaafbdc, []int{0}
}
func (m *TransactionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionInfo.Merge(m, src)
}
func (m *TransactionInfo) XXX_Size() int {
	return m.Size()
}
func (m *TransactionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionInfo proto.InternalMessageInfo

func (m *TransactionInfo) GetID() TransactionID {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *TransactionInfo) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

// TransactionMode is an extension for constraining the execution of a transaction for
// stronger consistency guarantees.
type TransactionMode struct {
	Sync   bool `protobuf:"varint,1,opt,name=sync,proto3" json:"sync,omitempty"`
	Atomic bool `protobuf:"varint,2,opt,name=atomic,proto3" json:"atomic,omitempty"`
}

func (m *TransactionMode) Reset()         { *m = TransactionMode{} }
func (m *TransactionMode) String() string { return proto.CompactTextString(m) }
func (*TransactionMode) ProtoMessage()    {}
func (*TransactionMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac6be9aa3eaafbdc, []int{1}
}
func (m *TransactionMode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionMode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionMode.Merge(m, src)
}
func (m *TransactionMode) XXX_Size() int {
	return m.Size()
}
func (m *TransactionMode) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionMode.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionMode proto.InternalMessageInfo

func (m *TransactionMode) GetSync() bool {
	if m != nil {
		return m.Sync
	}
	return false
}

func (m *TransactionMode) GetAtomic() bool {
	if m != nil {
		return m.Atomic
	}
	return false
}

// TransactionControl is a extension that if supported by targets enables atomic
// transactions across multiple targets.
type TransactionControl struct {
	Command TransactionCommand `protobuf:"varint,1,opt,name=command,proto3,enum=onos.config.v2.TransactionCommand" json:"command,omitempty"`
}

func (m *TransactionControl) Reset()         { *m = TransactionControl{} }
func (m *TransactionControl) String() string { return proto.CompactTextString(m) }
func (*TransactionControl) ProtoMessage()    {}
func (*TransactionControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac6be9aa3eaafbdc, []int{2}
}
func (m *TransactionControl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionControl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionControl.Merge(m, src)
}
func (m *TransactionControl) XXX_Size() int {
	return m.Size()
}
func (m *TransactionControl) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionControl.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionControl proto.InternalMessageInfo

func (m *TransactionControl) GetCommand() TransactionCommand {
	if m != nil {
		return m.Command
	}
	return TransactionCommand_PREPARE
}

func init() {
	proto.RegisterEnum("onos.config.v2.TransactionCommand", TransactionCommand_name, TransactionCommand_value)
	proto.RegisterType((*TransactionInfo)(nil), "onos.config.v2.TransactionInfo")
	proto.RegisterType((*TransactionMode)(nil), "onos.config.v2.TransactionMode")
	proto.RegisterType((*TransactionControl)(nil), "onos.config.v2.TransactionControl")
}

func init() { proto.RegisterFile("onos/config/v2/extensions.proto", fileDescriptor_ac6be9aa3eaafbdc) }

var fileDescriptor_ac6be9aa3eaafbdc = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x3f, 0x4f, 0xc2, 0x40,
	0x18, 0xc6, 0x7b, 0x0d, 0x7f, 0x5f, 0x15, 0xc9, 0xc5, 0x28, 0x71, 0xb8, 0x92, 0x2e, 0x12, 0x87,
	0x36, 0xc1, 0x51, 0x1d, 0x28, 0x30, 0x34, 0x42, 0x20, 0x17, 0x36, 0xa7, 0xda, 0x16, 0x72, 0x89,
	0xdc, 0x6b, 0x68, 0x43, 0xf0, 0x5b, 0xf8, 0xb1, 0x1c, 0x19, 0x9d, 0x1a, 0xd3, 0x7e, 0x0b, 0x26,
	0xd3, 0xab, 0x26, 0xd4, 0xed, 0xbd, 0xe7, 0x7e, 0xcf, 0x2f, 0x77, 0x2f, 0x18, 0x28, 0x31, 0xb2,
	0x7d, 0x94, 0x4b, 0xb1, 0xb2, 0xb7, 0x7d, 0x3b, 0xdc, 0xc5, 0xa1, 0x8c, 0x04, 0xca, 0xc8, 0x7a,
	0xdb, 0x60, 0x8c, 0xb4, 0x95, 0x03, 0x56, 0x01, 0x58, 0xdb, 0xfe, 0xf5, 0xc5, 0x0a, 0x57, 0xa8,
	0xae, 0xec, 0x7c, 0x2a, 0x28, 0xf3, 0x19, 0xce, 0x17, 0x1b, 0x4f, 0x46, 0x9e, 0x1f, 0x0b, 0x94,
	0xae, 0x5c, 0x22, 0xbd, 0x01, 0x5d, 0x04, 0x1d, 0xd2, 0x25, 0xbd, 0xa6, 0x73, 0x95, 0x26, 0x86,
	0xee, 0x8e, 0x0e, 0x89, 0x71, 0x76, 0x8c, 0x8d, 0xb8, 0x2e, 0x02, 0x6a, 0x40, 0x55, 0xc8, 0x20,
	0xdc, 0x75, 0xf4, 0x2e, 0xe9, 0x55, 0x9c, 0xe6, 0x21, 0x31, 0xaa, 0x6e, 0x1e, 0xf0, 0x22, 0x37,
	0x1f, 0x4b, 0xf2, 0x29, 0x06, 0x21, 0xa5, 0x50, 0x89, 0xde, 0xa5, 0xaf, 0xf4, 0x0d, 0xae, 0x66,
	0x7a, 0x09, 0x35, 0x2f, 0xc6, 0xb5, 0xf0, 0x95, 0xa8, 0xc1, 0x7f, 0x4f, 0x26, 0x07, 0x7a, 0x54,
	0x1f, 0xa2, 0x8c, 0x37, 0xf8, 0x4a, 0x1f, 0xa0, 0xee, 0xe3, 0x7a, 0xed, 0xc9, 0xe2, 0x8d, 0xad,
	0xbe, 0x69, 0x95, 0x7f, 0x6a, 0x95, 0x4a, 0x8a, 0xe4, 0x7f, 0x95, 0xdb, 0xfb, 0x7f, 0x4e, 0x95,
	0xd2, 0x13, 0xa8, 0xcf, 0xf9, 0x78, 0x3e, 0xe0, 0xe3, 0xb6, 0x46, 0x01, 0x6a, 0xc3, 0xd9, 0x74,
	0xea, 0x2e, 0xda, 0x84, 0x9e, 0x42, 0x83, 0xcf, 0x26, 0x13, 0x67, 0x30, 0x7c, 0x6a, 0xeb, 0x4e,
	0xe7, 0x33, 0x65, 0x64, 0x9f, 0x32, 0xf2, 0x9d, 0x32, 0xf2, 0x91, 0x31, 0x6d, 0x9f, 0x31, 0xed,
	0x2b, 0x63, 0xda, 0x4b, 0x4d, 0x6d, 0xf3, 0xee, 0x27, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x01, 0x84,
	0xd6, 0x96, 0x01, 0x00, 0x00,
}

func (m *TransactionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintExtensions(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintExtensions(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionMode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Atomic {
		i--
		if m.Atomic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Sync {
		i--
		if m.Sync {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionControl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionControl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionControl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Command != 0 {
		i = encodeVarintExtensions(dAtA, i, uint64(m.Command))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintExtensions(dAtA []byte, offset int, v uint64) int {
	offset -= sovExtensions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransactionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovExtensions(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovExtensions(uint64(m.Index))
	}
	return n
}

func (m *TransactionMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sync {
		n += 2
	}
	if m.Atomic {
		n += 2
	}
	return n
}

func (m *TransactionControl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Command != 0 {
		n += 1 + sovExtensions(uint64(m.Command))
	}
	return n
}

func sovExtensions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExtensions(x uint64) (n int) {
	return sovExtensions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransactionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtensions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtensions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtensions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtensions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = TransactionID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtensions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExtensions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExtensions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionMode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtensions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionMode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionMode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sync", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtensions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sync = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atomic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtensions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Atomic = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipExtensions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExtensions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionControl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtensions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionControl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionControl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			m.Command = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtensions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Command |= TransactionCommand(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExtensions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExtensions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExtensions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExtensions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtensions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtensions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExtensions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExtensions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExtensions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExtensions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExtensions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExtensions = fmt.Errorf("proto: unexpected end of group")
)
