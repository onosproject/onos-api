// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/config/v3/failure.proto

package v3

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Failure_Type int32

const (
	// UNKNOWN unknown failure
	Failure_UNKNOWN Failure_Type = 0
	// CANCELED
	Failure_CANCELED Failure_Type = 1
	// NOT_FOUND
	Failure_NOT_FOUND Failure_Type = 2
	// ALREADY_EXISTS
	Failure_ALREADY_EXISTS Failure_Type = 3
	// UNAUTHORIZED
	Failure_UNAUTHORIZED Failure_Type = 4
	// FORBIDDEN
	Failure_FORBIDDEN Failure_Type = 5
	// CONFLICT
	Failure_CONFLICT Failure_Type = 6
	// INVALID
	Failure_INVALID Failure_Type = 7
	// UNAVAILABLE
	Failure_UNAVAILABLE Failure_Type = 8
	// NOT_SUPPORTED
	Failure_NOT_SUPPORTED Failure_Type = 9
	// TIMEOUT
	Failure_TIMEOUT Failure_Type = 10
	// INTERNAL
	Failure_INTERNAL Failure_Type = 11
)

var Failure_Type_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "CANCELED",
	2:  "NOT_FOUND",
	3:  "ALREADY_EXISTS",
	4:  "UNAUTHORIZED",
	5:  "FORBIDDEN",
	6:  "CONFLICT",
	7:  "INVALID",
	8:  "UNAVAILABLE",
	9:  "NOT_SUPPORTED",
	10: "TIMEOUT",
	11: "INTERNAL",
}

var Failure_Type_value = map[string]int32{
	"UNKNOWN":        0,
	"CANCELED":       1,
	"NOT_FOUND":      2,
	"ALREADY_EXISTS": 3,
	"UNAUTHORIZED":   4,
	"FORBIDDEN":      5,
	"CONFLICT":       6,
	"INVALID":        7,
	"UNAVAILABLE":    8,
	"NOT_SUPPORTED":  9,
	"TIMEOUT":        10,
	"INTERNAL":       11,
}

func (x Failure_Type) String() string {
	return proto.EnumName(Failure_Type_name, int32(x))
}

func (Failure_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ec59d11644dc0800, []int{0, 0}
}

// Failure transaction failure type and description
type Failure struct {
	Type        Failure_Type `protobuf:"varint,1,opt,name=type,proto3,enum=onos.config.v3.Failure_Type" json:"type,omitempty"`
	Description string       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Failure) Reset()         { *m = Failure{} }
func (m *Failure) String() string { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()    {}
func (*Failure) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec59d11644dc0800, []int{0}
}
func (m *Failure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Failure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Failure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Failure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Failure.Merge(m, src)
}
func (m *Failure) XXX_Size() int {
	return m.Size()
}
func (m *Failure) XXX_DiscardUnknown() {
	xxx_messageInfo_Failure.DiscardUnknown(m)
}

var xxx_messageInfo_Failure proto.InternalMessageInfo

func (m *Failure) GetType() Failure_Type {
	if m != nil {
		return m.Type
	}
	return Failure_UNKNOWN
}

func (m *Failure) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterEnum("onos.config.v3.Failure_Type", Failure_Type_name, Failure_Type_value)
	proto.RegisterType((*Failure)(nil), "onos.config.v3.Failure")
}

func init() { proto.RegisterFile("onos/config/v3/failure.proto", fileDescriptor_ec59d11644dc0800) }

var fileDescriptor_ec59d11644dc0800 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xcd, 0x4e, 0x32, 0x31,
	0x18, 0x85, 0xa7, 0x7c, 0x7c, 0xfc, 0x74, 0x00, 0x6b, 0x57, 0x2c, 0xc8, 0x84, 0xb0, 0x62, 0x35,
	0x18, 0xb9, 0x82, 0x42, 0x3b, 0xb1, 0xb1, 0xb6, 0xa4, 0xb4, 0xf8, 0xb3, 0x21, 0x8a, 0x83, 0x99,
	0xc4, 0x30, 0x13, 0x40, 0x12, 0xee, 0xc2, 0x3b, 0xf0, 0x52, 0xdc, 0xba, 0x64, 0xe9, 0xd2, 0xc0,
	0x8d, 0x98, 0x0e, 0x2e, 0x74, 0xfb, 0x9e, 0xe7, 0x39, 0x27, 0x79, 0x61, 0x2b, 0x5d, 0xa4, 0xab,
	0xde, 0x2c, 0x5d, 0xcc, 0x93, 0xa7, 0xde, 0xa6, 0xdf, 0x9b, 0xdf, 0x27, 0xcf, 0x2f, 0xcb, 0x38,
	0xcc, 0x96, 0xe9, 0x3a, 0xc5, 0x0d, 0x97, 0x86, 0xc7, 0x34, 0xdc, 0xf4, 0x3b, 0x6f, 0x05, 0x58,
	0x8e, 0x8e, 0x04, 0x3e, 0x83, 0xc5, 0xf5, 0x36, 0x8b, 0x9b, 0xa0, 0x0d, 0xba, 0x8d, 0xf3, 0x56,
	0xf8, 0x17, 0x0d, 0x7f, 0xb0, 0xd0, 0x6c, 0xb3, 0x58, 0xe7, 0x24, 0x6e, 0x43, 0xff, 0x31, 0x5e,
	0xcd, 0x96, 0x49, 0xb6, 0x4e, 0xd2, 0x45, 0xb3, 0xd0, 0x06, 0xdd, 0xaa, 0xfe, 0x7d, 0xea, 0xbc,
	0x03, 0x58, 0x74, 0x02, 0xf6, 0x61, 0xd9, 0xca, 0x4b, 0xa9, 0xae, 0x25, 0xf2, 0x70, 0x0d, 0x56,
	0x86, 0x44, 0x0e, 0x99, 0x60, 0x14, 0x01, 0x5c, 0x87, 0x55, 0xa9, 0xcc, 0x34, 0x52, 0x56, 0x52,
	0x54, 0xc0, 0x18, 0x36, 0x88, 0xd0, 0x8c, 0xd0, 0xdb, 0x29, 0xbb, 0xe1, 0x63, 0x33, 0x46, 0xff,
	0x30, 0x82, 0x35, 0x2b, 0x89, 0x35, 0x17, 0x4a, 0xf3, 0x3b, 0x46, 0x51, 0xd1, 0x49, 0x91, 0xd2,
	0x03, 0x4e, 0x29, 0x93, 0xe8, 0x7f, 0xde, 0xa8, 0x64, 0x24, 0xf8, 0xd0, 0xa0, 0x92, 0x1b, 0xe3,
	0x72, 0x42, 0x04, 0xa7, 0xa8, 0x8c, 0x4f, 0xa0, 0x6f, 0x25, 0x99, 0x10, 0x2e, 0xc8, 0x40, 0x30,
	0x54, 0xc1, 0xa7, 0xb0, 0xee, 0xf6, 0xc6, 0x76, 0x34, 0x52, 0xda, 0x30, 0x8a, 0xaa, 0x4e, 0x30,
	0xfc, 0x8a, 0x29, 0x6b, 0x10, 0x74, 0x5d, 0x5c, 0x1a, 0xa6, 0x25, 0x11, 0xc8, 0x1f, 0x34, 0x3f,
	0xf6, 0x01, 0xd8, 0xed, 0x03, 0xf0, 0xb5, 0x0f, 0xc0, 0xeb, 0x21, 0xf0, 0x76, 0x87, 0xc0, 0xfb,
	0x3c, 0x04, 0xde, 0x43, 0x29, 0x7f, 0x69, 0xff, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xec, 0x82, 0x47,
	0xb8, 0x72, 0x01, 0x00, 0x00,
}

func (m *Failure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Failure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFailure(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintFailure(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFailure(dAtA []byte, offset int, v uint64) int {
	offset -= sovFailure(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Failure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovFailure(uint64(m.Type))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFailure(uint64(l))
	}
	return n
}

func sovFailure(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFailure(x uint64) (n int) {
	return sovFailure(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Failure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFailure
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Failure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Failure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Failure_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFailure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFailure
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFailure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFailure(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFailure
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFailure(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFailure
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFailure
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFailure
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFailure
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFailure
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFailure
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFailure        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFailure          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFailure = fmt.Errorf("proto: unexpected end of group")
)
