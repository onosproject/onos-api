// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/config/change/network/types.proto

package network

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	change "github.com/onosproject/onos-api/go/onos/config/change"
	device "github.com/onosproject/onos-api/go/onos/config/change/device"
	github_com_onosproject_onos_api_go_onos_config_change_device "github.com/onosproject/onos-api/go/onos/config/change/device"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NetworkChange specifies the configuration for a network change
// A network change is a configuration change that spans multiple devices. The change contains a list of
// per-device changes to be applied to the network.
type NetworkChange struct {
	// 'id' is the unique identifier of the change
	// This field should be set prior to persisting the object.
	ID ID `protobuf:"bytes,1,opt,name=id,proto3,casttype=ID" json:"id,omitempty"`
	// 'index' is a monotonically increasing, globally unique index of the change
	// The index is provided by the store, is static and unique for each unique change identifier,
	// and should not be modified by client code.
	Index Index `protobuf:"varint,2,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
	// 'revision' is the change revision number
	// The revision number is provided by the store and should not be modified by client code.
	// Each unique state of the change will be assigned a unique revision number which can be
	// used for optimistic concurrency control when updating or deleting the change state.
	Revision Revision `protobuf:"varint,3,opt,name=revision,proto3,casttype=Revision" json:"revision,omitempty"`
	// 'status' is the current lifecycle status of the change
	Status change.Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status"`
	// 'created' is the time at which the change was created
	Created time.Time `protobuf:"bytes,5,opt,name=created,proto3,stdtime" json:"created"`
	// 'updated' is the time at which the change was last updated
	Updated time.Time `protobuf:"bytes,6,opt,name=updated,proto3,stdtime" json:"updated"`
	// 'changes' is a set of changes to apply to devices
	// The list of changes should contain only a single change per device/version pair.
	Changes []*device.Change `protobuf:"bytes,7,rep,name=changes,proto3" json:"changes,omitempty"`
	// 'refs' is a set of references to stored device changes
	Refs []*DeviceChangeRef `protobuf:"bytes,8,rep,name=refs,proto3" json:"refs,omitempty"`
	// 'deleted' is a flag indicating whether this change is being deleted by a snapshot
	Deleted bool `protobuf:"varint,9,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// 'dependency' is a reference to the network change on which this change is dependent
	Dependency *NetworkChangeRef `protobuf:"bytes,10,opt,name=dependency,proto3" json:"dependency,omitempty"`
	// 'dependents' is a list of references to network changes that depend on this change
	Dependents []NetworkChangeRef `protobuf:"bytes,11,rep,name=dependents,proto3" json:"dependents"`
}

func (m *NetworkChange) Reset()         { *m = NetworkChange{} }
func (m *NetworkChange) String() string { return proto.CompactTextString(m) }
func (*NetworkChange) ProtoMessage()    {}
func (*NetworkChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e1b62e4e3a786e7, []int{0}
}
func (m *NetworkChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkChange.Merge(m, src)
}
func (m *NetworkChange) XXX_Size() int {
	return m.Size()
}
func (m *NetworkChange) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkChange.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkChange proto.InternalMessageInfo

func (m *NetworkChange) GetID() ID {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *NetworkChange) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *NetworkChange) GetRevision() Revision {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *NetworkChange) GetStatus() change.Status {
	if m != nil {
		return m.Status
	}
	return change.Status{}
}

func (m *NetworkChange) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *NetworkChange) GetUpdated() time.Time {
	if m != nil {
		return m.Updated
	}
	return time.Time{}
}

func (m *NetworkChange) GetChanges() []*device.Change {
	if m != nil {
		return m.Changes
	}
	return nil
}

func (m *NetworkChange) GetRefs() []*DeviceChangeRef {
	if m != nil {
		return m.Refs
	}
	return nil
}

func (m *NetworkChange) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *NetworkChange) GetDependency() *NetworkChangeRef {
	if m != nil {
		return m.Dependency
	}
	return nil
}

func (m *NetworkChange) GetDependents() []NetworkChangeRef {
	if m != nil {
		return m.Dependents
	}
	return nil
}

// NetworkChangeRef is a reference to a network change
type NetworkChangeRef struct {
	NetworkChangeID ID `protobuf:"bytes,1,opt,name=network_change_id,json=networkChangeId,proto3,casttype=ID" json:"network_change_id,omitempty"`
}

func (m *NetworkChangeRef) Reset()         { *m = NetworkChangeRef{} }
func (m *NetworkChangeRef) String() string { return proto.CompactTextString(m) }
func (*NetworkChangeRef) ProtoMessage()    {}
func (*NetworkChangeRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e1b62e4e3a786e7, []int{1}
}
func (m *NetworkChangeRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkChangeRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkChangeRef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkChangeRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkChangeRef.Merge(m, src)
}
func (m *NetworkChangeRef) XXX_Size() int {
	return m.Size()
}
func (m *NetworkChangeRef) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkChangeRef.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkChangeRef proto.InternalMessageInfo

func (m *NetworkChangeRef) GetNetworkChangeID() ID {
	if m != nil {
		return m.NetworkChangeID
	}
	return ""
}

// DeviceChangeRef is a reference to a device change
type DeviceChangeRef struct {
	// 'device_change_id' is the unique identifier of the device change
	DeviceChangeID github_com_onosproject_onos_api_go_onos_config_change_device.ID `protobuf:"bytes,1,opt,name=device_change_id,json=deviceChangeId,proto3,casttype=github.com/onosproject/onos-api/go/onos/config/change/device.ID" json:"device_change_id,omitempty"`
}

func (m *DeviceChangeRef) Reset()         { *m = DeviceChangeRef{} }
func (m *DeviceChangeRef) String() string { return proto.CompactTextString(m) }
func (*DeviceChangeRef) ProtoMessage()    {}
func (*DeviceChangeRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e1b62e4e3a786e7, []int{2}
}
func (m *DeviceChangeRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceChangeRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceChangeRef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceChangeRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceChangeRef.Merge(m, src)
}
func (m *DeviceChangeRef) XXX_Size() int {
	return m.Size()
}
func (m *DeviceChangeRef) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceChangeRef.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceChangeRef proto.InternalMessageInfo

func (m *DeviceChangeRef) GetDeviceChangeID() github_com_onosproject_onos_api_go_onos_config_change_device.ID {
	if m != nil {
		return m.DeviceChangeID
	}
	return ""
}

func init() {
	proto.RegisterType((*NetworkChange)(nil), "onos.config.change.network.NetworkChange")
	proto.RegisterType((*NetworkChangeRef)(nil), "onos.config.change.network.NetworkChangeRef")
	proto.RegisterType((*DeviceChangeRef)(nil), "onos.config.change.network.DeviceChangeRef")
}

func init() {
	proto.RegisterFile("onos/config/change/network/types.proto", fileDescriptor_4e1b62e4e3a786e7)
}

var fileDescriptor_4e1b62e4e3a786e7 = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0xeb, 0xae, 0x7f, 0xdd, 0xb1, 0x0e, 0x8b, 0x83, 0xa9, 0x50, 0x52, 0x2a, 0x81, 0x22,
	0x01, 0xb6, 0x34, 0x2e, 0x48, 0x48, 0x4c, 0x2a, 0xe5, 0x50, 0x09, 0x71, 0x30, 0x70, 0xe0, 0x34,
	0xb5, 0xb1, 0x9b, 0x19, 0xd6, 0x38, 0x4a, 0xdc, 0xc1, 0x4e, 0x7c, 0x85, 0x89, 0x4f, 0xb5, 0xe3,
	0x8e, 0x9c, 0x02, 0x4a, 0xaf, 0x7c, 0x82, 0x9e, 0x50, 0xec, 0xb4, 0xb4, 0xa3, 0x9b, 0xb4, 0x4b,
	0xe5, 0xbe, 0x79, 0x7e, 0xcf, 0xfb, 0xe6, 0xf1, 0x1b, 0xf8, 0x58, 0x85, 0x2a, 0xa1, 0xbe, 0x0a,
	0x27, 0x32, 0xa0, 0xfe, 0xf1, 0x28, 0x0c, 0x04, 0x0d, 0x85, 0xfe, 0xaa, 0xe2, 0x2f, 0x54, 0x9f,
	0x45, 0x22, 0x21, 0x51, 0xac, 0xb4, 0x42, 0x9d, 0x5c, 0x47, 0xac, 0x8e, 0x58, 0x1d, 0x29, 0x74,
	0x1d, 0x37, 0x50, 0x2a, 0x38, 0x11, 0xd4, 0x28, 0xc7, 0xb3, 0x09, 0xd5, 0x72, 0x2a, 0x12, 0x3d,
	0x9a, 0x46, 0x16, 0xee, 0xdc, 0x0b, 0x54, 0xa0, 0xcc, 0x91, 0xe6, 0xa7, 0xa2, 0xea, 0x6c, 0x69,
	0xbd, 0xd6, 0xb2, 0xf3, 0x68, 0xcb, 0x73, 0x2e, 0x4e, 0xa5, 0xbf, 0x21, 0xeb, 0xfd, 0xa9, 0xc0,
	0x3b, 0xef, 0xec, 0x24, 0xaf, 0x8d, 0x08, 0x3d, 0x80, 0x65, 0xc9, 0x31, 0xe8, 0x02, 0xaf, 0xd9,
	0xdf, 0xcd, 0x52, 0xb7, 0x3c, 0x1c, 0x2c, 0xcc, 0x2f, 0x2b, 0x4b, 0x8e, 0x5c, 0x58, 0x95, 0x21,
	0x17, 0xdf, 0x70, 0xb9, 0x0b, 0xbc, 0x4a, 0xbf, 0xb9, 0x48, 0xdd, 0xea, 0x30, 0x2f, 0x30, 0x5b,
	0x47, 0x1e, 0x6c, 0xc4, 0xe2, 0x54, 0x26, 0x52, 0x85, 0x78, 0xc7, 0x68, 0x76, 0x17, 0xa9, 0xdb,
	0x60, 0x45, 0x8d, 0xad, 0x9e, 0xa2, 0x17, 0xb0, 0x96, 0xe8, 0x91, 0x9e, 0x25, 0xb8, 0xd2, 0x05,
	0x5e, 0xeb, 0xa0, 0x43, 0xb6, 0xa4, 0xf4, 0xde, 0x28, 0xfa, 0x95, 0x8b, 0xd4, 0x2d, 0xb1, 0x42,
	0x8f, 0x5e, 0xc1, 0xba, 0x1f, 0x8b, 0x91, 0x16, 0x1c, 0x57, 0x0b, 0xd4, 0x86, 0x48, 0x96, 0x21,
	0x92, 0x0f, 0xcb, 0x10, 0xfb, 0x8d, 0x1c, 0x3d, 0xff, 0xe5, 0x02, 0xb6, 0x84, 0x72, 0x7e, 0x16,
	0x71, 0xc3, 0xd7, 0x6e, 0xc3, 0x17, 0x10, 0x7a, 0x09, 0xeb, 0x76, 0xbc, 0x04, 0xd7, 0xbb, 0x3b,
	0x5e, 0xeb, 0xe0, 0xe1, 0xb6, 0xd1, 0x6d, 0xda, 0xc4, 0xc6, 0xca, 0x96, 0x04, 0x3a, 0x84, 0x95,
	0x58, 0x4c, 0x12, 0xdc, 0x30, 0xe4, 0x13, 0x72, 0xfd, 0x6a, 0x90, 0x81, 0x71, 0x28, 0x0c, 0xc4,
	0x84, 0x19, 0x10, 0x61, 0x58, 0xe7, 0xe2, 0x44, 0xe4, 0xd3, 0x37, 0xbb, 0xc0, 0x6b, 0xb0, 0xe5,
	0x5f, 0xf4, 0x16, 0x42, 0x2e, 0x22, 0x11, 0x72, 0x11, 0xfa, 0x67, 0x18, 0x9a, 0x57, 0x7b, 0x7a,
	0x53, 0x83, 0x8d, 0x9b, 0xcf, 0x3b, 0xac, 0xf1, 0x88, 0xfd, 0x73, 0xd3, 0x09, 0x6e, 0x99, 0x71,
	0x6f, 0xe5, 0x56, 0xdc, 0xda, 0x9a, 0x4b, 0xef, 0x13, 0xdc, 0xbf, 0xaa, 0x42, 0x6f, 0xe0, 0xdd,
	0xc2, 0xe1, 0xc8, 0x1a, 0x1e, 0xad, 0xf6, 0xef, 0x7e, 0x96, 0xba, 0xed, 0x0d, 0x60, 0xb5, 0x8c,
	0xed, 0x70, 0xa3, 0xcc, 0x7b, 0x3f, 0x00, 0x6c, 0x5f, 0x09, 0x0c, 0x7d, 0x87, 0xfb, 0xf6, 0x16,
	0xfe, 0x73, 0xfe, 0x98, 0xa5, 0xee, 0xde, 0xba, 0xdc, 0x18, 0x1f, 0x06, 0x52, 0x1f, 0xcf, 0xc6,
	0xc4, 0x57, 0x53, 0x9a, 0xbf, 0x68, 0x14, 0xab, 0xcf, 0xc2, 0xd7, 0xe6, 0xfc, 0x6c, 0x14, 0x49,
	0x1a, 0x28, 0x7a, 0xed, 0x77, 0x45, 0x86, 0x03, 0xb6, 0xc7, 0xd7, 0x2d, 0x79, 0x1f, 0x5f, 0x64,
	0x0e, 0xb8, 0xcc, 0x1c, 0xf0, 0x3b, 0x73, 0xc0, 0xf9, 0xdc, 0x29, 0x5d, 0xce, 0x9d, 0xd2, 0xcf,
	0xb9, 0x53, 0x1a, 0xd7, 0xcc, 0xaa, 0x3d, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x97, 0xd0,
	0xda, 0x43, 0x04, 0x00, 0x00,
}

func (m *NetworkChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dependents) > 0 {
		for iNdEx := len(m.Dependents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dependents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Dependency != nil {
		{
			size, err := m.Dependency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.Refs) > 0 {
		for iNdEx := len(m.Refs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Refs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Changes) > 0 {
		for iNdEx := len(m.Changes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Changes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Updated, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTypes(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintTypes(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Revision != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Revision))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkChangeRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkChangeRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkChangeRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NetworkChangeID) > 0 {
		i -= len(m.NetworkChangeID)
		copy(dAtA[i:], m.NetworkChangeID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NetworkChangeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceChangeRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceChangeRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceChangeRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceChangeID) > 0 {
		i -= len(m.DeviceChangeID)
		copy(dAtA[i:], m.DeviceChangeID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DeviceChangeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NetworkChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovTypes(uint64(m.Index))
	}
	if m.Revision != 0 {
		n += 1 + sovTypes(uint64(m.Revision))
	}
	l = m.Status.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated)
	n += 1 + l + sovTypes(uint64(l))
	if len(m.Changes) > 0 {
		for _, e := range m.Changes {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Refs) > 0 {
		for _, e := range m.Refs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Deleted {
		n += 2
	}
	if m.Dependency != nil {
		l = m.Dependency.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Dependents) > 0 {
		for _, e := range m.Dependents {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *NetworkChangeRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkChangeID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *DeviceChangeRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceChangeID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetworkChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= Revision(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Updated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Changes = append(m.Changes, &device.Change{})
			if err := m.Changes[len(m.Changes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refs = append(m.Refs, &DeviceChangeRef{})
			if err := m.Refs[len(m.Refs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dependency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dependency == nil {
				m.Dependency = &NetworkChangeRef{}
			}
			if err := m.Dependency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dependents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dependents = append(m.Dependents, NetworkChangeRef{})
			if err := m.Dependents[len(m.Dependents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkChangeRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkChangeRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkChangeRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkChangeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkChangeID = ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceChangeRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceChangeRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceChangeRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceChangeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceChangeID = github_com_onosproject_onos_api_go_onos_config_change_device.ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
