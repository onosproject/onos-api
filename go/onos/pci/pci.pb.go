// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/pci/pci.proto

// Package onos.pci defines interfaces to monitor PCI

package pci

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_baea7100bf0b1c43, []int{0}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetResponse struct {
	Object *Object `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_baea7100bf0b1c43, []int{1}
}
func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

type Object struct {
	Id         string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Revision   uint64            `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	Attributes map[string]string `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Object) Reset()         { *m = Object{} }
func (m *Object) String() string { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()    {}
func (*Object) Descriptor() ([]byte, []int) {
	return fileDescriptor_baea7100bf0b1c43, []int{2}
}
func (m *Object) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Object) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Object.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Object) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Object.Merge(m, src)
}
func (m *Object) XXX_Size() int {
	return m.Size()
}
func (m *Object) XXX_DiscardUnknown() {
	xxx_messageInfo_Object.DiscardUnknown(m)
}

var xxx_messageInfo_Object proto.InternalMessageInfo

func (m *Object) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Object) GetRevision() uint64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *Object) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "onos.pci.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "onos.pci.GetResponse")
	proto.RegisterType((*Object)(nil), "onos.pci.Object")
	proto.RegisterMapType((map[string]string)(nil), "onos.pci.Object.AttributesEntry")
}

func init() { proto.RegisterFile("onos/pci/pci.proto", fileDescriptor_baea7100bf0b1c43) }

var fileDescriptor_baea7100bf0b1c43 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcd, 0x6a, 0xab, 0x40,
	0x14, 0x76, 0xf4, 0x5e, 0x49, 0x4e, 0x2e, 0x37, 0x61, 0xc8, 0x05, 0x09, 0x17, 0x11, 0x57, 0xae,
	0x2c, 0xa4, 0x8b, 0x94, 0x40, 0x20, 0x69, 0x28, 0xae, 0xda, 0x06, 0xdf, 0x20, 0x9a, 0xd3, 0x76,
	0x5a, 0xeb, 0x58, 0x67, 0x0c, 0xe4, 0x2d, 0xfa, 0x32, 0x7d, 0x87, 0x2e, 0xb3, 0xec, 0xb2, 0x24,
	0xcf, 0x51, 0x28, 0x6a, 0x7e, 0x8a, 0xbb, 0xb8, 0x10, 0x3c, 0xdf, 0x39, 0xdf, 0xcf, 0x9c, 0x61,
	0x80, 0xf2, 0x98, 0x8b, 0xb3, 0x24, 0x64, 0xf9, 0xe7, 0x26, 0x29, 0x97, 0x9c, 0x36, 0x72, 0xcc,
	0x4d, 0x42, 0x66, 0xff, 0x07, 0xf0, 0x50, 0xfa, 0xf8, 0x92, 0xa1, 0x90, 0xf4, 0x2f, 0xa8, 0x6c,
	0x61, 0x10, 0x8b, 0x38, 0x4d, 0x5f, 0x65, 0x0b, 0x7b, 0x00, 0xad, 0xa2, 0x2b, 0x12, 0x1e, 0x0b,
	0xa4, 0x0e, 0xe8, 0x3c, 0x78, 0xc4, 0x50, 0x16, 0x23, 0xad, 0x7e, 0xc7, 0xdd, 0xeb, 0xb8, 0xb7,
	0x05, 0xee, 0xef, 0xfa, 0xf6, 0x1b, 0x01, 0xbd, 0x84, 0xaa, 0x9a, 0xb4, 0x07, 0x8d, 0x14, 0x97,
	0x4c, 0x30, 0x1e, 0x1b, 0xaa, 0x45, 0x9c, 0x5f, 0xfe, 0xa1, 0xa6, 0x63, 0x80, 0xb9, 0x94, 0x29,
	0x0b, 0x32, 0x89, 0xc2, 0xd0, 0x2c, 0xcd, 0x69, 0xf5, 0xad, 0xaa, 0x89, 0x3b, 0x39, 0x8c, 0x5c,
	0xc5, 0x32, 0x5d, 0xf9, 0x3f, 0x38, 0xbd, 0x11, 0xb4, 0x2b, 0x6d, 0xda, 0x01, 0xed, 0x09, 0x57,
	0xbb, 0x04, 0xf9, 0x2f, 0xed, 0xc2, 0xef, 0xe5, 0x3c, 0xca, 0xb0, 0xf0, 0x6f, 0xfa, 0x65, 0x31,
	0x54, 0x2f, 0x48, 0xff, 0x4b, 0x03, 0x6d, 0x16, 0x32, 0x3a, 0x86, 0xb6, 0x87, 0xf2, 0x26, 0x7b,
	0x9e, 0xf2, 0xf8, 0x2e, 0x62, 0xa1, 0x14, 0xb4, 0x7b, 0xcc, 0x71, 0xdc, 0x58, 0xef, 0x5f, 0x05,
	0x2d, 0x37, 0x65, 0x2b, 0x74, 0x0a, 0xb4, 0xa2, 0x30, 0x89, 0xa2, 0x53, 0x45, 0x46, 0xf0, 0x27,
	0x17, 0x41, 0x76, 0xff, 0x10, 0xf0, 0xf4, 0xe4, 0x0c, 0xbb, 0x53, 0xec, 0xe9, 0x35, 0x02, 0x0c,
	0xa1, 0xe9, 0xa1, 0xbc, 0x46, 0x99, 0xb2, 0xb0, 0x5e, 0xf8, 0x92, 0x5b, 0xc3, 0x7a, 0x00, 0xba,
	0x87, 0x32, 0xbf, 0x8c, 0x5a, 0x99, 0x67, 0x21, 0x3b, 0xdd, 0xf4, 0xd2, 0x78, 0xdf, 0x98, 0x64,
	0xbd, 0x31, 0xc9, 0xe7, 0xc6, 0x24, 0xaf, 0x5b, 0x53, 0x59, 0x6f, 0x4d, 0xe5, 0x63, 0x6b, 0x2a,
	0x81, 0x5e, 0xbc, 0x9c, 0xf3, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xea, 0x18, 0xfe, 0x81, 0x4f,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PciClient is the client API for Pci service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PciClient interface {
	GetNumConflicts(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetNumConflictsAll(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetNeighbors(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetNeighborsAll(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetMetric(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetMetricAll(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetPci(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetPciAll(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type pciClient struct {
	cc *grpc.ClientConn
}

func NewPciClient(cc *grpc.ClientConn) PciClient {
	return &pciClient{cc}
}

func (c *pciClient) GetNumConflicts(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/onos.pci.Pci/GetNumConflicts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pciClient) GetNumConflictsAll(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/onos.pci.Pci/GetNumConflictsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pciClient) GetNeighbors(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/onos.pci.Pci/GetNeighbors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pciClient) GetNeighborsAll(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/onos.pci.Pci/GetNeighborsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pciClient) GetMetric(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/onos.pci.Pci/GetMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pciClient) GetMetricAll(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/onos.pci.Pci/GetMetricAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pciClient) GetPci(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/onos.pci.Pci/GetPci", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pciClient) GetPciAll(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/onos.pci.Pci/GetPciAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PciServer is the server API for Pci service.
type PciServer interface {
	GetNumConflicts(context.Context, *GetRequest) (*GetResponse, error)
	GetNumConflictsAll(context.Context, *GetRequest) (*GetResponse, error)
	GetNeighbors(context.Context, *GetRequest) (*GetResponse, error)
	GetNeighborsAll(context.Context, *GetRequest) (*GetResponse, error)
	GetMetric(context.Context, *GetRequest) (*GetResponse, error)
	GetMetricAll(context.Context, *GetRequest) (*GetResponse, error)
	GetPci(context.Context, *GetRequest) (*GetResponse, error)
	GetPciAll(context.Context, *GetRequest) (*GetResponse, error)
}

// UnimplementedPciServer can be embedded to have forward compatible implementations.
type UnimplementedPciServer struct {
}

func (*UnimplementedPciServer) GetNumConflicts(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumConflicts not implemented")
}
func (*UnimplementedPciServer) GetNumConflictsAll(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumConflictsAll not implemented")
}
func (*UnimplementedPciServer) GetNeighbors(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNeighbors not implemented")
}
func (*UnimplementedPciServer) GetNeighborsAll(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNeighborsAll not implemented")
}
func (*UnimplementedPciServer) GetMetric(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetric not implemented")
}
func (*UnimplementedPciServer) GetMetricAll(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricAll not implemented")
}
func (*UnimplementedPciServer) GetPci(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPci not implemented")
}
func (*UnimplementedPciServer) GetPciAll(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPciAll not implemented")
}

func RegisterPciServer(s *grpc.Server, srv PciServer) {
	s.RegisterService(&_Pci_serviceDesc, srv)
}

func _Pci_GetNumConflicts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PciServer).GetNumConflicts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.pci.Pci/GetNumConflicts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PciServer).GetNumConflicts(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pci_GetNumConflictsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PciServer).GetNumConflictsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.pci.Pci/GetNumConflictsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PciServer).GetNumConflictsAll(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pci_GetNeighbors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PciServer).GetNeighbors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.pci.Pci/GetNeighbors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PciServer).GetNeighbors(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pci_GetNeighborsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PciServer).GetNeighborsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.pci.Pci/GetNeighborsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PciServer).GetNeighborsAll(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pci_GetMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PciServer).GetMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.pci.Pci/GetMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PciServer).GetMetric(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pci_GetMetricAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PciServer).GetMetricAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.pci.Pci/GetMetricAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PciServer).GetMetricAll(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pci_GetPci_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PciServer).GetPci(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.pci.Pci/GetPci",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PciServer).GetPci(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pci_GetPciAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PciServer).GetPciAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.pci.Pci/GetPciAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PciServer).GetPciAll(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pci_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.pci.Pci",
	HandlerType: (*PciServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNumConflicts",
			Handler:    _Pci_GetNumConflicts_Handler,
		},
		{
			MethodName: "GetNumConflictsAll",
			Handler:    _Pci_GetNumConflictsAll_Handler,
		},
		{
			MethodName: "GetNeighbors",
			Handler:    _Pci_GetNeighbors_Handler,
		},
		{
			MethodName: "GetNeighborsAll",
			Handler:    _Pci_GetNeighborsAll_Handler,
		},
		{
			MethodName: "GetMetric",
			Handler:    _Pci_GetMetric_Handler,
		},
		{
			MethodName: "GetMetricAll",
			Handler:    _Pci_GetMetricAll_Handler,
		},
		{
			MethodName: "GetPci",
			Handler:    _Pci_GetPci_Handler,
		},
		{
			MethodName: "GetPciAll",
			Handler:    _Pci_GetPciAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onos/pci/pci.proto",
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPci(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPci(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Object) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Object) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Object) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			v := m.Attributes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPci(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPci(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPci(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Revision != 0 {
		i = encodeVarintPci(dAtA, i, uint64(m.Revision))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPci(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPci(dAtA []byte, offset int, v uint64) int {
	offset -= sovPci(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPci(uint64(l))
	}
	return n
}

func (m *GetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovPci(uint64(l))
	}
	return n
}

func (m *Object) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPci(uint64(l))
	}
	if m.Revision != 0 {
		n += 1 + sovPci(uint64(m.Revision))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPci(uint64(len(k))) + 1 + len(v) + sovPci(uint64(len(v)))
			n += mapEntrySize + 1 + sovPci(uint64(mapEntrySize))
		}
	}
	return n
}

func sovPci(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPci(x uint64) (n int) {
	return sovPci(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPci
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPci
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPci
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPci(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPci
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPci
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPci
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPci(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Object) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPci
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Object: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Object: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPci
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPci
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPci
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPci
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPci
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPci
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPci
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPci
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPci
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPci
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPci
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPci(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPci
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPci(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPci(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPci
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPci
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPci
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPci
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPci
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPci
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPci        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPci          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPci = fmt.Errorf("proto: unexpected end of group")
)
