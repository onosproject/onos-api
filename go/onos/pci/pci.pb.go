// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/pci/pci.proto

// Package onos.pci defines interfaces to monitor PCI

package pci

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CellType int32

const (
	CellType_FEMTO         CellType = 0
	CellType_ENTERPRISE    CellType = 1
	CellType_OUTDOOR_SMALL CellType = 2
	CellType_MACRO         CellType = 3
)

var CellType_name = map[int32]string{
	0: "FEMTO",
	1: "ENTERPRISE",
	2: "OUTDOOR_SMALL",
	3: "MACRO",
}

var CellType_value = map[string]int32{
	"FEMTO":         0,
	"ENTERPRISE":    1,
	"OUTDOOR_SMALL": 2,
	"MACRO":         3,
}

func (x CellType) String() string {
	return proto.EnumName(CellType_name, int32(x))
}

func (CellType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_baea7100bf0b1c43, []int{0}
}

// if cell id is not specified, will return total number of conflicts
type GetConflictsRequest struct {
	CellId uint64 `protobuf:"varint,1,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
}

func (m *GetConflictsRequest) Reset()         { *m = GetConflictsRequest{} }
func (m *GetConflictsRequest) String() string { return proto.CompactTextString(m) }
func (*GetConflictsRequest) ProtoMessage()    {}
func (*GetConflictsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_baea7100bf0b1c43, []int{0}
}
func (m *GetConflictsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConflictsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConflictsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetConflictsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConflictsRequest.Merge(m, src)
}
func (m *GetConflictsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetConflictsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConflictsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetConflictsRequest proto.InternalMessageInfo

func (m *GetConflictsRequest) GetCellId() uint64 {
	if m != nil {
		return m.CellId
	}
	return 0
}

type GetConflictsReponse struct {
	Cells []*PciCell `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (m *GetConflictsReponse) Reset()         { *m = GetConflictsReponse{} }
func (m *GetConflictsReponse) String() string { return proto.CompactTextString(m) }
func (*GetConflictsReponse) ProtoMessage()    {}
func (*GetConflictsReponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_baea7100bf0b1c43, []int{1}
}
func (m *GetConflictsReponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConflictsReponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConflictsReponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetConflictsReponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConflictsReponse.Merge(m, src)
}
func (m *GetConflictsReponse) XXX_Size() int {
	return m.Size()
}
func (m *GetConflictsReponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConflictsReponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetConflictsReponse proto.InternalMessageInfo

func (m *GetConflictsReponse) GetCells() []*PciCell {
	if m != nil {
		return m.Cells
	}
	return nil
}

// cell id required
type GetCellRequest struct {
	CellId uint64 `protobuf:"varint,1,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
}

func (m *GetCellRequest) Reset()         { *m = GetCellRequest{} }
func (m *GetCellRequest) String() string { return proto.CompactTextString(m) }
func (*GetCellRequest) ProtoMessage()    {}
func (*GetCellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_baea7100bf0b1c43, []int{2}
}
func (m *GetCellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCellRequest.Merge(m, src)
}
func (m *GetCellRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCellRequest proto.InternalMessageInfo

func (m *GetCellRequest) GetCellId() uint64 {
	if m != nil {
		return m.CellId
	}
	return 0
}

type GetCellResponse struct {
	Cell *PciCell `protobuf:"bytes,1,opt,name=cell,proto3" json:"cell,omitempty"`
}

func (m *GetCellResponse) Reset()         { *m = GetCellResponse{} }
func (m *GetCellResponse) String() string { return proto.CompactTextString(m) }
func (*GetCellResponse) ProtoMessage()    {}
func (*GetCellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_baea7100bf0b1c43, []int{3}
}
func (m *GetCellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCellResponse.Merge(m, src)
}
func (m *GetCellResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCellResponse proto.InternalMessageInfo

func (m *GetCellResponse) GetCell() *PciCell {
	if m != nil {
		return m.Cell
	}
	return nil
}

// cell id required
type GetCellsRequest struct {
}

func (m *GetCellsRequest) Reset()         { *m = GetCellsRequest{} }
func (m *GetCellsRequest) String() string { return proto.CompactTextString(m) }
func (*GetCellsRequest) ProtoMessage()    {}
func (*GetCellsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_baea7100bf0b1c43, []int{4}
}
func (m *GetCellsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCellsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCellsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCellsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCellsRequest.Merge(m, src)
}
func (m *GetCellsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCellsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCellsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCellsRequest proto.InternalMessageInfo

type GetCellsResponse struct {
	Cells []*PciCell `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (m *GetCellsResponse) Reset()         { *m = GetCellsResponse{} }
func (m *GetCellsResponse) String() string { return proto.CompactTextString(m) }
func (*GetCellsResponse) ProtoMessage()    {}
func (*GetCellsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_baea7100bf0b1c43, []int{5}
}
func (m *GetCellsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCellsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCellsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCellsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCellsResponse.Merge(m, src)
}
func (m *GetCellsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCellsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCellsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCellsResponse proto.InternalMessageInfo

func (m *GetCellsResponse) GetCells() []*PciCell {
	if m != nil {
		return m.Cells
	}
	return nil
}

type PciCell struct {
	Id         uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeId     string      `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Dlearfcn   uint32      `protobuf:"varint,3,opt,name=dlearfcn,proto3" json:"dlearfcn,omitempty"`
	CellType   CellType    `protobuf:"varint,4,opt,name=cell_type,json=cellType,proto3,enum=onos.pci.CellType" json:"cell_type,omitempty"`
	Pci        uint32      `protobuf:"varint,5,opt,name=pci,proto3" json:"pci,omitempty"`
	PciPool    []*PciRange `protobuf:"bytes,6,rep,name=pci_pool,json=pciPool,proto3" json:"pci_pool,omitempty"`
	NeigborIds []uint64    `protobuf:"varint,7,rep,packed,name=neigbor_ids,json=neigborIds,proto3" json:"neigbor_ids,omitempty"`
}

func (m *PciCell) Reset()         { *m = PciCell{} }
func (m *PciCell) String() string { return proto.CompactTextString(m) }
func (*PciCell) ProtoMessage()    {}
func (*PciCell) Descriptor() ([]byte, []int) {
	return fileDescriptor_baea7100bf0b1c43, []int{6}
}
func (m *PciCell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PciCell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PciCell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PciCell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PciCell.Merge(m, src)
}
func (m *PciCell) XXX_Size() int {
	return m.Size()
}
func (m *PciCell) XXX_DiscardUnknown() {
	xxx_messageInfo_PciCell.DiscardUnknown(m)
}

var xxx_messageInfo_PciCell proto.InternalMessageInfo

func (m *PciCell) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PciCell) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *PciCell) GetDlearfcn() uint32 {
	if m != nil {
		return m.Dlearfcn
	}
	return 0
}

func (m *PciCell) GetCellType() CellType {
	if m != nil {
		return m.CellType
	}
	return CellType_FEMTO
}

func (m *PciCell) GetPci() uint32 {
	if m != nil {
		return m.Pci
	}
	return 0
}

func (m *PciCell) GetPciPool() []*PciRange {
	if m != nil {
		return m.PciPool
	}
	return nil
}

func (m *PciCell) GetNeigborIds() []uint64 {
	if m != nil {
		return m.NeigborIds
	}
	return nil
}

type PciRange struct {
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (m *PciRange) Reset()         { *m = PciRange{} }
func (m *PciRange) String() string { return proto.CompactTextString(m) }
func (*PciRange) ProtoMessage()    {}
func (*PciRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_baea7100bf0b1c43, []int{7}
}
func (m *PciRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PciRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PciRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PciRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PciRange.Merge(m, src)
}
func (m *PciRange) XXX_Size() int {
	return m.Size()
}
func (m *PciRange) XXX_DiscardUnknown() {
	xxx_messageInfo_PciRange.DiscardUnknown(m)
}

var xxx_messageInfo_PciRange proto.InternalMessageInfo

func (m *PciRange) GetMin() uint32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *PciRange) GetMax() uint32 {
	if m != nil {
		return m.Max
	}
	return 0
}

func init() {
	proto.RegisterEnum("onos.pci.CellType", CellType_name, CellType_value)
	proto.RegisterType((*GetConflictsRequest)(nil), "onos.pci.GetConflictsRequest")
	proto.RegisterType((*GetConflictsReponse)(nil), "onos.pci.GetConflictsReponse")
	proto.RegisterType((*GetCellRequest)(nil), "onos.pci.GetCellRequest")
	proto.RegisterType((*GetCellResponse)(nil), "onos.pci.GetCellResponse")
	proto.RegisterType((*GetCellsRequest)(nil), "onos.pci.GetCellsRequest")
	proto.RegisterType((*GetCellsResponse)(nil), "onos.pci.GetCellsResponse")
	proto.RegisterType((*PciCell)(nil), "onos.pci.PciCell")
	proto.RegisterType((*PciRange)(nil), "onos.pci.PciRange")
}

func init() { proto.RegisterFile("onos/pci/pci.proto", fileDescriptor_baea7100bf0b1c43) }

var fileDescriptor_baea7100bf0b1c43 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0xed, 0x34, 0xfd, 0x48, 0xef, 0xd2, 0x9a, 0x5e, 0x1f, 0x8c, 0x05, 0x63, 0x08, 0x88, 0x51,
	0x30, 0x0b, 0xf5, 0x45, 0x10, 0xc4, 0xb5, 0x56, 0x29, 0x6c, 0xb7, 0x75, 0xb6, 0x3e, 0x97, 0xee,
	0x64, 0x76, 0x19, 0xc8, 0x66, 0x62, 0x27, 0x0b, 0xbb, 0xff, 0xc2, 0x9f, 0xe5, 0xe3, 0x3e, 0xfa,
	0xa6, 0xb6, 0x7f, 0x44, 0x66, 0xb6, 0x49, 0x59, 0xad, 0xc8, 0x3e, 0x04, 0x66, 0xce, 0x39, 0x73,
	0xcf, 0xb9, 0xdc, 0x1b, 0x40, 0x99, 0x4a, 0xb5, 0x9f, 0x31, 0xa1, 0xbf, 0x28, 0x5b, 0xca, 0x5c,
	0xa2, 0xad, 0xb1, 0x28, 0x63, 0x22, 0x88, 0xe0, 0xfe, 0x47, 0x9e, 0x0f, 0x64, 0x7a, 0x9a, 0x08,
	0x96, 0x2b, 0xca, 0xbf, 0x5c, 0x70, 0x95, 0xe3, 0x03, 0x68, 0x32, 0x9e, 0x24, 0x73, 0x11, 0xbb,
	0xc4, 0x27, 0x61, 0x8d, 0x36, 0xf4, 0x75, 0x14, 0x07, 0x6f, 0xfe, 0xd4, 0x67, 0x32, 0x55, 0x1c,
	0x9f, 0x42, 0x5d, 0x0b, 0x94, 0x4b, 0x7c, 0x2b, 0xdc, 0xeb, 0x77, 0xa3, 0xc2, 0x20, 0x9a, 0x32,
	0x31, 0xe0, 0x49, 0x42, 0x6f, 0xf8, 0xe0, 0x19, 0x74, 0xf4, 0x7b, 0x8d, 0xfc, 0xcf, 0xea, 0x15,
	0xdc, 0x2b, 0xa5, 0xea, 0xc6, 0xe6, 0x09, 0xd4, 0x34, 0x69, 0x84, 0x3b, 0x5d, 0x0c, 0x1d, 0x74,
	0xcb, 0x97, 0x45, 0x43, 0xc1, 0x6b, 0x70, 0xb6, 0x90, 0xba, 0x63, 0xe8, 0x5f, 0x04, 0x9a, 0x1b,
	0x08, 0x3b, 0x50, 0x2d, 0x93, 0x56, 0x45, 0xac, 0xe3, 0xa7, 0x32, 0xe6, 0x3a, 0x7e, 0xd5, 0x27,
	0x61, 0x8b, 0x36, 0xf4, 0x75, 0x14, 0x63, 0x0f, 0xec, 0x38, 0xe1, 0x8b, 0xe5, 0x29, 0x4b, 0x5d,
	0xcb, 0x27, 0x61, 0x9b, 0x96, 0x77, 0xdc, 0x87, 0x96, 0xe9, 0x39, 0xbf, 0xca, 0xb8, 0x5b, 0xf3,
	0x49, 0xd8, 0xe9, 0xe3, 0xd6, 0x5d, 0xfb, 0xcc, 0xae, 0x32, 0x4e, 0x6d, 0xb6, 0x39, 0xa1, 0x03,
	0x56, 0xc6, 0x84, 0x5b, 0x37, 0x75, 0xf4, 0x11, 0x5f, 0x80, 0x9d, 0x31, 0x31, 0xcf, 0xa4, 0x4c,
	0xdc, 0x86, 0xc9, 0x8f, 0xb7, 0xf2, 0xd3, 0x45, 0x7a, 0xc6, 0x69, 0x33, 0x63, 0x62, 0x2a, 0x65,
	0x82, 0x8f, 0x61, 0x2f, 0xe5, 0xe2, 0xec, 0x44, 0x2e, 0xe7, 0x22, 0x56, 0x6e, 0xd3, 0xb7, 0xc2,
	0x1a, 0x85, 0x0d, 0x34, 0x8a, 0x55, 0x10, 0x81, 0x5d, 0xbc, 0xd2, 0x6e, 0xe7, 0x22, 0x35, 0x4d,
	0xb6, 0xa9, 0x3e, 0x1a, 0x64, 0x71, 0x69, 0x3a, 0xd4, 0xc8, 0xe2, 0xf2, 0xf9, 0x00, 0xec, 0x22,
	0x27, 0xb6, 0xa0, 0xfe, 0x61, 0x38, 0x9e, 0x4d, 0x9c, 0x0a, 0x76, 0x00, 0x86, 0x47, 0xb3, 0x21,
	0x9d, 0xd2, 0xd1, 0xf1, 0xd0, 0x21, 0xd8, 0x85, 0xf6, 0xe4, 0xf3, 0xec, 0xfd, 0x64, 0x42, 0xe7,
	0xc7, 0xe3, 0x83, 0xc3, 0x43, 0xa7, 0xaa, 0xd5, 0xe3, 0x83, 0x01, 0x9d, 0x38, 0x56, 0xff, 0x07,
	0x01, 0x6b, 0xca, 0x04, 0x7e, 0x32, 0x03, 0x3b, 0xba, 0x38, 0x2f, 0x17, 0x0b, 0x1f, 0x6d, 0xbb,
	0xd9, 0xb1, 0xa0, 0xbd, 0x7f, 0xd2, 0x66, 0xb4, 0x41, 0x05, 0xdf, 0x42, 0x73, 0x33, 0x70, 0x74,
	0x6f, 0x6b, 0xb7, 0xbb, 0xd7, 0x7b, 0xb8, 0x83, 0x51, 0x45, 0x85, 0x01, 0xd8, 0xc5, 0xca, 0xe0,
	0xdf, 0xc2, 0x32, 0x49, 0x6f, 0x17, 0x55, 0x14, 0x79, 0xe7, 0x7e, 0x5b, 0x79, 0xe4, 0x7a, 0xe5,
	0x91, 0x9f, 0x2b, 0x8f, 0x7c, 0x5d, 0x7b, 0x95, 0xeb, 0xb5, 0x57, 0xf9, 0xbe, 0xf6, 0x2a, 0x27,
	0x0d, 0xf3, 0x2b, 0xbe, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x78, 0xf7, 0xf2, 0xa0, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PciClient is the client API for Pci service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PciClient interface {
	GetNumConflicts(ctx context.Context, in *GetConflictsRequest, opts ...grpc.CallOption) (*GetConflictsReponse, error)
	GetCell(ctx context.Context, in *GetCellRequest, opts ...grpc.CallOption) (*GetCellResponse, error)
	GetCells(ctx context.Context, in *GetCellsRequest, opts ...grpc.CallOption) (*GetCellsResponse, error)
}

type pciClient struct {
	cc *grpc.ClientConn
}

func NewPciClient(cc *grpc.ClientConn) PciClient {
	return &pciClient{cc}
}

func (c *pciClient) GetNumConflicts(ctx context.Context, in *GetConflictsRequest, opts ...grpc.CallOption) (*GetConflictsReponse, error) {
	out := new(GetConflictsReponse)
	err := c.cc.Invoke(ctx, "/onos.pci.Pci/GetNumConflicts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pciClient) GetCell(ctx context.Context, in *GetCellRequest, opts ...grpc.CallOption) (*GetCellResponse, error) {
	out := new(GetCellResponse)
	err := c.cc.Invoke(ctx, "/onos.pci.Pci/GetCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pciClient) GetCells(ctx context.Context, in *GetCellsRequest, opts ...grpc.CallOption) (*GetCellsResponse, error) {
	out := new(GetCellsResponse)
	err := c.cc.Invoke(ctx, "/onos.pci.Pci/GetCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PciServer is the server API for Pci service.
type PciServer interface {
	GetNumConflicts(context.Context, *GetConflictsRequest) (*GetConflictsReponse, error)
	GetCell(context.Context, *GetCellRequest) (*GetCellResponse, error)
	GetCells(context.Context, *GetCellsRequest) (*GetCellsResponse, error)
}

// UnimplementedPciServer can be embedded to have forward compatible implementations.
type UnimplementedPciServer struct {
}

func (*UnimplementedPciServer) GetNumConflicts(ctx context.Context, req *GetConflictsRequest) (*GetConflictsReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumConflicts not implemented")
}
func (*UnimplementedPciServer) GetCell(ctx context.Context, req *GetCellRequest) (*GetCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCell not implemented")
}
func (*UnimplementedPciServer) GetCells(ctx context.Context, req *GetCellsRequest) (*GetCellsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCells not implemented")
}

func RegisterPciServer(s *grpc.Server, srv PciServer) {
	s.RegisterService(&_Pci_serviceDesc, srv)
}

func _Pci_GetNumConflicts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConflictsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PciServer).GetNumConflicts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.pci.Pci/GetNumConflicts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PciServer).GetNumConflicts(ctx, req.(*GetConflictsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pci_GetCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PciServer).GetCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.pci.Pci/GetCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PciServer).GetCell(ctx, req.(*GetCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pci_GetCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PciServer).GetCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.pci.Pci/GetCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PciServer).GetCells(ctx, req.(*GetCellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pci_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.pci.Pci",
	HandlerType: (*PciServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNumConflicts",
			Handler:    _Pci_GetNumConflicts_Handler,
		},
		{
			MethodName: "GetCell",
			Handler:    _Pci_GetCell_Handler,
		},
		{
			MethodName: "GetCells",
			Handler:    _Pci_GetCells_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onos/pci/pci.proto",
}

func (m *GetConflictsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConflictsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetConflictsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CellId != 0 {
		i = encodeVarintPci(dAtA, i, uint64(m.CellId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetConflictsReponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConflictsReponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetConflictsReponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for iNdEx := len(m.Cells) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cells[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPci(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetCellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCellRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCellRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CellId != 0 {
		i = encodeVarintPci(dAtA, i, uint64(m.CellId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCellResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCellResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cell != nil {
		{
			size, err := m.Cell.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPci(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCellsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCellsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCellsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetCellsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCellsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCellsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for iNdEx := len(m.Cells) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cells[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPci(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PciCell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PciCell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PciCell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NeigborIds) > 0 {
		dAtA3 := make([]byte, len(m.NeigborIds)*10)
		var j2 int
		for _, num := range m.NeigborIds {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintPci(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PciPool) > 0 {
		for iNdEx := len(m.PciPool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PciPool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPci(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Pci != 0 {
		i = encodeVarintPci(dAtA, i, uint64(m.Pci))
		i--
		dAtA[i] = 0x28
	}
	if m.CellType != 0 {
		i = encodeVarintPci(dAtA, i, uint64(m.CellType))
		i--
		dAtA[i] = 0x20
	}
	if m.Dlearfcn != 0 {
		i = encodeVarintPci(dAtA, i, uint64(m.Dlearfcn))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintPci(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPci(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PciRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PciRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PciRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Max != 0 {
		i = encodeVarintPci(dAtA, i, uint64(m.Max))
		i--
		dAtA[i] = 0x10
	}
	if m.Min != 0 {
		i = encodeVarintPci(dAtA, i, uint64(m.Min))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPci(dAtA []byte, offset int, v uint64) int {
	offset -= sovPci(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetConflictsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CellId != 0 {
		n += 1 + sovPci(uint64(m.CellId))
	}
	return n
}

func (m *GetConflictsReponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, e := range m.Cells {
			l = e.Size()
			n += 1 + l + sovPci(uint64(l))
		}
	}
	return n
}

func (m *GetCellRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CellId != 0 {
		n += 1 + sovPci(uint64(m.CellId))
	}
	return n
}

func (m *GetCellResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cell != nil {
		l = m.Cell.Size()
		n += 1 + l + sovPci(uint64(l))
	}
	return n
}

func (m *GetCellsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetCellsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, e := range m.Cells {
			l = e.Size()
			n += 1 + l + sovPci(uint64(l))
		}
	}
	return n
}

func (m *PciCell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPci(uint64(m.Id))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovPci(uint64(l))
	}
	if m.Dlearfcn != 0 {
		n += 1 + sovPci(uint64(m.Dlearfcn))
	}
	if m.CellType != 0 {
		n += 1 + sovPci(uint64(m.CellType))
	}
	if m.Pci != 0 {
		n += 1 + sovPci(uint64(m.Pci))
	}
	if len(m.PciPool) > 0 {
		for _, e := range m.PciPool {
			l = e.Size()
			n += 1 + l + sovPci(uint64(l))
		}
	}
	if len(m.NeigborIds) > 0 {
		l = 0
		for _, e := range m.NeigborIds {
			l += sovPci(uint64(e))
		}
		n += 1 + sovPci(uint64(l)) + l
	}
	return n
}

func (m *PciRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Min != 0 {
		n += 1 + sovPci(uint64(m.Min))
	}
	if m.Max != 0 {
		n += 1 + sovPci(uint64(m.Max))
	}
	return n
}

func sovPci(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPci(x uint64) (n int) {
	return sovPci(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetConflictsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPci
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConflictsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConflictsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellId", wireType)
			}
			m.CellId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CellId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPci(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConflictsReponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPci
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConflictsReponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConflictsReponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPci
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPci
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cells = append(m.Cells, &PciCell{})
			if err := m.Cells[len(m.Cells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPci(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPci
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellId", wireType)
			}
			m.CellId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CellId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPci(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPci
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPci
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPci
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cell == nil {
				m.Cell = &PciCell{}
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPci(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCellsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPci
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCellsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCellsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPci(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCellsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPci
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCellsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCellsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPci
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPci
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cells = append(m.Cells, &PciCell{})
			if err := m.Cells[len(m.Cells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPci(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PciCell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPci
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PciCell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PciCell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPci
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPci
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dlearfcn", wireType)
			}
			m.Dlearfcn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dlearfcn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellType", wireType)
			}
			m.CellType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CellType |= CellType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pci", wireType)
			}
			m.Pci = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pci |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PciPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPci
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPci
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PciPool = append(m.PciPool, &PciRange{})
			if err := m.PciPool[len(m.PciPool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPci
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NeigborIds = append(m.NeigborIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPci
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPci
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPci
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NeigborIds) == 0 {
					m.NeigborIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPci
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NeigborIds = append(m.NeigborIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NeigborIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPci(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PciRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPci
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PciRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PciRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			m.Min = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Min |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPci
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPci(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPci
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPci(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPci
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPci
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPci
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPci
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPci
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPci
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPci        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPci          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPci = fmt.Errorf("proto: unexpected end of group")
)
