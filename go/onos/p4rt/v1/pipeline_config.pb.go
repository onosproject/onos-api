// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/p4rt/v1/pipeline_config.proto

package p4rt

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ConfigurationAction
type ConfigurationAction int32

const (
	ConfigurationAction_UNSPECIFIED ConfigurationAction = 0
	// Verifies that the target can realize the given config. The forwarding state in the target is not modified.
	ConfigurationAction_VERIFY ConfigurationAction = 1
	// Saves the config if the P4Runtime target can realize it. The forwarding state in the target is not modified.
	ConfigurationAction_VERIFY_AND_SAVE ConfigurationAction = 2
	// Saves and realizes the given config if the P4Runtime target can realize it. The forwarding state in the target is cleared.
	ConfigurationAction_VERIFY_AND_COMMIT ConfigurationAction = 3
	// Realizes the last saved, but not yet committed, config.
	// The forwarding state in the target is updated by replaying the write requests to the target device since the last config was saved
	ConfigurationAction_COMMIT ConfigurationAction = 4
	// Verifies, saves and realizes the given config, while preserving the forwarding state in the target.
	ConfigurationAction_RECONCILE_AND_COMMIT ConfigurationAction = 5
)

var ConfigurationAction_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "VERIFY",
	2: "VERIFY_AND_SAVE",
	3: "VERIFY_AND_COMMIT",
	4: "COMMIT",
	5: "RECONCILE_AND_COMMIT",
}

var ConfigurationAction_value = map[string]int32{
	"UNSPECIFIED":          0,
	"VERIFY":               1,
	"VERIFY_AND_SAVE":      2,
	"VERIFY_AND_COMMIT":    3,
	"COMMIT":               4,
	"RECONCILE_AND_COMMIT": 5,
}

func (x ConfigurationAction) String() string {
	return proto.EnumName(ConfigurationAction_name, int32(x))
}

func (ConfigurationAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6080f98dc2058397, []int{0}
}

// State is the configuration state
type PipelineConfigStatus_State int32

const (
	PipelineConfigStatus_UNKNOWN       PipelineConfigStatus_State = 0
	PipelineConfigStatus_SYNCHRONIZING PipelineConfigStatus_State = 1
	PipelineConfigStatus_SYNCHRONIZED  PipelineConfigStatus_State = 2
	PipelineConfigStatus_PERSISTED     PipelineConfigStatus_State = 3
)

var PipelineConfigStatus_State_name = map[int32]string{
	0: "UNKNOWN",
	1: "SYNCHRONIZING",
	2: "SYNCHRONIZED",
	3: "PERSISTED",
}

var PipelineConfigStatus_State_value = map[string]int32{
	"UNKNOWN":       0,
	"SYNCHRONIZING": 1,
	"SYNCHRONIZED":  2,
	"PERSISTED":     3,
}

func (x PipelineConfigStatus_State) String() string {
	return proto.EnumName(PipelineConfigStatus_State_name, int32(x))
}

func (PipelineConfigStatus_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6080f98dc2058397, []int{1, 0}
}

// EventType configuration event types for configuration store
type ConfigurationEvent_EventType int32

const (
	// UNKNOWN indicates unknown configuration store event
	ConfigurationEvent_UNKNOWN ConfigurationEvent_EventType = 0
	// CREATED indicates the configuration entry in the store is created
	ConfigurationEvent_CREATED ConfigurationEvent_EventType = 1
	// UPDATED indicates the configuration entry in the store is updated
	ConfigurationEvent_UPDATED ConfigurationEvent_EventType = 2
	// DELETED indicates the configuration entry in the store is deleted
	ConfigurationEvent_DELETED ConfigurationEvent_EventType = 3
	// REPLAYED
	ConfigurationEvent_REPLAYED ConfigurationEvent_EventType = 4
)

var ConfigurationEvent_EventType_name = map[int32]string{
	0: "UNKNOWN",
	1: "CREATED",
	2: "UPDATED",
	3: "DELETED",
	4: "REPLAYED",
}

var ConfigurationEvent_EventType_value = map[string]int32{
	"UNKNOWN":  0,
	"CREATED":  1,
	"UPDATED":  2,
	"DELETED":  3,
	"REPLAYED": 4,
}

func (x ConfigurationEvent_EventType) String() string {
	return proto.EnumName(ConfigurationEvent_EventType_name, int32(x))
}

func (ConfigurationEvent_EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6080f98dc2058397, []int{2, 0}
}

type PipelineConfig struct {
	ObjectMeta `protobuf:"bytes,1,opt,name=meta,proto3,embedded=meta" json:"meta"`
	// 'id' is a unique configuration identifier
	ID PipelineConfigID `protobuf:"bytes,2,opt,name=id,proto3,casttype=PipelineConfigID" json:"id,omitempty"`
	// 'target_id' is the target to which the desired target configuration applies
	TargetID TargetID `protobuf:"bytes,3,opt,name=target_id,json=targetId,proto3,casttype=TargetID" json:"target_id,omitempty"`
	// 'p4_device_config' P4 device configuration bytes
	P4DeviceConfig []byte `protobuf:"bytes,4,opt,name=p4_device_config,json=p4DeviceConfig,proto3" json:"p4_device_config,omitempty"`
	// 'ConfigurationAction'
	Action ConfigurationAction `protobuf:"varint,5,opt,name=action,proto3,enum=onos.p4rt.v1.ConfigurationAction" json:"action,omitempty"`
	// 'ConfigurationStatus' is the current lifecycle status of the configuration
	Status PipelineConfigStatus `protobuf:"bytes,6,opt,name=status,proto3" json:"status"`
}

func (m *PipelineConfig) Reset()         { *m = PipelineConfig{} }
func (m *PipelineConfig) String() string { return proto.CompactTextString(m) }
func (*PipelineConfig) ProtoMessage()    {}
func (*PipelineConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6080f98dc2058397, []int{0}
}
func (m *PipelineConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PipelineConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PipelineConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PipelineConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineConfig.Merge(m, src)
}
func (m *PipelineConfig) XXX_Size() int {
	return m.Size()
}
func (m *PipelineConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineConfig proto.InternalMessageInfo

func (m *PipelineConfig) GetID() PipelineConfigID {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *PipelineConfig) GetTargetID() TargetID {
	if m != nil {
		return m.TargetID
	}
	return ""
}

func (m *PipelineConfig) GetP4DeviceConfig() []byte {
	if m != nil {
		return m.P4DeviceConfig
	}
	return nil
}

func (m *PipelineConfig) GetAction() ConfigurationAction {
	if m != nil {
		return m.Action
	}
	return ConfigurationAction_UNSPECIFIED
}

func (m *PipelineConfig) GetStatus() PipelineConfigStatus {
	if m != nil {
		return m.Status
	}
	return PipelineConfigStatus{}
}

// PipelineConfigStatus
type PipelineConfigStatus struct {
	State PipelineConfigStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=onos.p4rt.v1.PipelineConfigStatus_State" json:"state,omitempty"`
}

func (m *PipelineConfigStatus) Reset()         { *m = PipelineConfigStatus{} }
func (m *PipelineConfigStatus) String() string { return proto.CompactTextString(m) }
func (*PipelineConfigStatus) ProtoMessage()    {}
func (*PipelineConfigStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6080f98dc2058397, []int{1}
}
func (m *PipelineConfigStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PipelineConfigStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PipelineConfigStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PipelineConfigStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineConfigStatus.Merge(m, src)
}
func (m *PipelineConfigStatus) XXX_Size() int {
	return m.Size()
}
func (m *PipelineConfigStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineConfigStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineConfigStatus proto.InternalMessageInfo

func (m *PipelineConfigStatus) GetState() PipelineConfigStatus_State {
	if m != nil {
		return m.State
	}
	return PipelineConfigStatus_UNKNOWN
}

// ConfigurationEvent configuration store event
type ConfigurationEvent struct {
	// EventType configuration event type
	Type           ConfigurationEvent_EventType `protobuf:"varint,1,opt,name=type,proto3,enum=onos.p4rt.v1.ConfigurationEvent_EventType" json:"type,omitempty"`
	PipelineConfig PipelineConfig               `protobuf:"bytes,2,opt,name=pipeline_config,json=pipelineConfig,proto3" json:"pipeline_config"`
}

func (m *ConfigurationEvent) Reset()         { *m = ConfigurationEvent{} }
func (m *ConfigurationEvent) String() string { return proto.CompactTextString(m) }
func (*ConfigurationEvent) ProtoMessage()    {}
func (*ConfigurationEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_6080f98dc2058397, []int{2}
}
func (m *ConfigurationEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigurationEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigurationEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigurationEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigurationEvent.Merge(m, src)
}
func (m *ConfigurationEvent) XXX_Size() int {
	return m.Size()
}
func (m *ConfigurationEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigurationEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigurationEvent proto.InternalMessageInfo

func (m *ConfigurationEvent) GetType() ConfigurationEvent_EventType {
	if m != nil {
		return m.Type
	}
	return ConfigurationEvent_UNKNOWN
}

func (m *ConfigurationEvent) GetPipelineConfig() PipelineConfig {
	if m != nil {
		return m.PipelineConfig
	}
	return PipelineConfig{}
}

func init() {
	proto.RegisterEnum("onos.p4rt.v1.ConfigurationAction", ConfigurationAction_name, ConfigurationAction_value)
	proto.RegisterEnum("onos.p4rt.v1.PipelineConfigStatus_State", PipelineConfigStatus_State_name, PipelineConfigStatus_State_value)
	proto.RegisterEnum("onos.p4rt.v1.ConfigurationEvent_EventType", ConfigurationEvent_EventType_name, ConfigurationEvent_EventType_value)
	proto.RegisterType((*PipelineConfig)(nil), "onos.p4rt.v1.PipelineConfig")
	proto.RegisterType((*PipelineConfigStatus)(nil), "onos.p4rt.v1.PipelineConfigStatus")
	proto.RegisterType((*ConfigurationEvent)(nil), "onos.p4rt.v1.ConfigurationEvent")
}

func init() {
	proto.RegisterFile("onos/p4rt/v1/pipeline_config.proto", fileDescriptor_6080f98dc2058397)
}

var fileDescriptor_6080f98dc2058397 = []byte{
	// 591 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0x41, 0x4e, 0xdb, 0x40,
	0x14, 0x86, 0x33, 0xc6, 0x09, 0xc9, 0x4b, 0x08, 0xc3, 0x40, 0x25, 0x17, 0x55, 0x4e, 0xea, 0x95,
	0xc5, 0xc2, 0x11, 0x29, 0xad, 0xd4, 0x0d, 0x6a, 0x62, 0x0f, 0xc5, 0x82, 0x38, 0xd1, 0x38, 0x50,
	0xd1, 0x4d, 0x64, 0x12, 0x37, 0x72, 0xd5, 0xc6, 0x56, 0x18, 0x22, 0xb1, 0xef, 0x01, 0x7a, 0x84,
	0x1e, 0x87, 0x25, 0xea, 0xaa, 0xab, 0xa8, 0x0a, 0x17, 0xe8, 0xba, 0xab, 0xca, 0x63, 0x43, 0xe3,
	0x0a, 0xd1, 0x8d, 0xfd, 0xe6, 0xcd, 0xf7, 0x3f, 0xfb, 0xff, 0x3d, 0x06, 0x2d, 0x9c, 0x84, 0x17,
	0x8d, 0x68, 0x6f, 0xca, 0x1b, 0xb3, 0xdd, 0x46, 0x14, 0x44, 0xfe, 0xa7, 0x60, 0xe2, 0x0f, 0x86,
	0xe1, 0xe4, 0x43, 0x30, 0x36, 0xa2, 0x69, 0xc8, 0x43, 0x52, 0x89, 0x19, 0x23, 0x66, 0x8c, 0xd9,
	0xee, 0xf6, 0xd6, 0x38, 0x1c, 0x87, 0x62, 0xa3, 0x11, 0x57, 0x09, 0xb3, 0xfd, 0x34, 0x33, 0x27,
	0x3c, 0xff, 0xe8, 0x0f, 0x79, 0xb2, 0xa5, 0x7d, 0x97, 0xa0, 0xda, 0x4b, 0x07, 0x9b, 0x62, 0x2e,
	0x79, 0x05, 0xf2, 0x67, 0x9f, 0x7b, 0x0a, 0xaa, 0x23, 0xbd, 0xdc, 0x54, 0x8c, 0xe5, 0x07, 0x18,
	0x5d, 0x21, 0xee, 0xf8, 0xdc, 0x6b, 0x17, 0xaf, 0xe7, 0xb5, 0xdc, 0xcd, 0xbc, 0x86, 0x98, 0xe0,
	0xc9, 0x0e, 0x48, 0xc1, 0x48, 0x91, 0xea, 0x48, 0x2f, 0xb5, 0xb7, 0x17, 0xf3, 0x9a, 0x64, 0x5b,
	0xbf, 0xe7, 0x35, 0x9c, 0x9d, 0x6e, 0x5b, 0x4c, 0x0a, 0x46, 0xe4, 0x25, 0x94, 0xb8, 0x37, 0x1d,
	0xfb, 0x7c, 0x10, 0x8c, 0x94, 0x15, 0x21, 0x51, 0x16, 0xf3, 0x5a, 0xb1, 0x2f, 0x9a, 0x42, 0x78,
	0x5f, 0xb3, 0x62, 0x82, 0xda, 0x23, 0xa2, 0x03, 0x8e, 0xf6, 0x06, 0x23, 0x7f, 0x16, 0x0c, 0xef,
	0x62, 0x50, 0xe4, 0x3a, 0xd2, 0x2b, 0xac, 0x1a, 0xed, 0x59, 0xa2, 0x9d, 0x9a, 0x78, 0x0d, 0x05,
	0x6f, 0xc8, 0x83, 0x70, 0xa2, 0xe4, 0xeb, 0x48, 0xaf, 0x36, 0x9f, 0x67, 0x6d, 0x24, 0xd4, 0xe5,
	0xd4, 0x8b, 0x91, 0x96, 0x00, 0x59, 0x2a, 0x20, 0x6f, 0xa0, 0x70, 0xc1, 0x3d, 0x7e, 0x79, 0xa1,
	0x14, 0x44, 0x02, 0x5a, 0x56, 0x9a, 0xf5, 0xe3, 0x0a, 0xb2, 0x2d, 0xc7, 0x59, 0xb0, 0x54, 0xa7,
	0x7d, 0x43, 0xb0, 0xf5, 0x10, 0x46, 0xf6, 0x21, 0x1f, 0x23, 0xbe, 0xc8, 0xb6, 0xda, 0xd4, 0xff,
	0x3f, 0xd9, 0x88, 0x6f, 0x3e, 0x4b, 0x64, 0xda, 0x21, 0xe4, 0xc5, 0x9a, 0x94, 0x61, 0xf5, 0xc4,
	0x39, 0x72, 0xba, 0xef, 0x1c, 0x9c, 0x23, 0x1b, 0xb0, 0xe6, 0x9e, 0x39, 0xe6, 0x21, 0xeb, 0x3a,
	0xf6, 0x7b, 0xdb, 0x79, 0x8b, 0x11, 0xc1, 0x50, 0xf9, 0xdb, 0xa2, 0x16, 0x96, 0xc8, 0x1a, 0x94,
	0x7a, 0x94, 0xb9, 0xb6, 0xdb, 0xa7, 0x16, 0x5e, 0xd1, 0x7e, 0x21, 0x20, 0x99, 0x10, 0xe8, 0xcc,
	0x9f, 0x70, 0xb2, 0x0f, 0x32, 0xbf, 0x8a, 0xee, 0xde, 0x6f, 0xe7, 0x91, 0xd0, 0x04, 0x6f, 0x88,
	0x6b, 0xff, 0x2a, 0xf2, 0x99, 0xd0, 0x91, 0x23, 0x58, 0xff, 0xe7, 0x98, 0x8a, 0x03, 0x51, 0x6e,
	0x3e, 0x7b, 0xcc, 0x6a, 0x1a, 0x5f, 0x35, 0xca, 0x74, 0xb5, 0x0e, 0x94, 0xee, 0xe7, 0x67, 0x1d,
	0x97, 0x61, 0xd5, 0x64, 0xb4, 0x15, 0x5b, 0x41, 0x62, 0xa7, 0x67, 0x89, 0x85, 0x14, 0x2f, 0x2c,
	0x7a, 0x4c, 0x85, 0x49, 0x52, 0x81, 0x22, 0xa3, 0xbd, 0xe3, 0xd6, 0x19, 0xb5, 0xb0, 0xbc, 0xf3,
	0x05, 0xc1, 0xe6, 0x03, 0xdf, 0x9d, 0xac, 0x43, 0xf9, 0xc4, 0x71, 0x7b, 0xd4, 0xb4, 0x0f, 0x6c,
	0x6a, 0xe1, 0x1c, 0x01, 0x28, 0x9c, 0x52, 0x66, 0x1f, 0x9c, 0x61, 0x44, 0x36, 0x61, 0x3d, 0xa9,
	0x07, 0x2d, 0xc7, 0x1a, 0xb8, 0xad, 0x53, 0x8a, 0x25, 0xf2, 0x04, 0x36, 0x96, 0x9a, 0x66, 0xb7,
	0xd3, 0xb1, 0xfb, 0x78, 0x25, 0xd6, 0xa5, 0xb5, 0x4c, 0x14, 0xd8, 0x62, 0xd4, 0xec, 0x3a, 0xa6,
	0x7d, 0x4c, 0x97, 0xa9, 0x7c, 0x5b, 0xb9, 0x5e, 0xa8, 0xe8, 0x66, 0xa1, 0xa2, 0x9f, 0x0b, 0x15,
	0x7d, 0xbd, 0x55, 0x73, 0x37, 0xb7, 0x6a, 0xee, 0xc7, 0xad, 0x9a, 0x3b, 0x2f, 0x88, 0x5f, 0xf2,
	0xc5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x19, 0x80, 0x52, 0xf7, 0x03, 0x00, 0x00,
}

func (m *PipelineConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipelineConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PipelineConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPipelineConfig(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Action != 0 {
		i = encodeVarintPipelineConfig(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x28
	}
	if len(m.P4DeviceConfig) > 0 {
		i -= len(m.P4DeviceConfig)
		copy(dAtA[i:], m.P4DeviceConfig)
		i = encodeVarintPipelineConfig(dAtA, i, uint64(len(m.P4DeviceConfig)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetID) > 0 {
		i -= len(m.TargetID)
		copy(dAtA[i:], m.TargetID)
		i = encodeVarintPipelineConfig(dAtA, i, uint64(len(m.TargetID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintPipelineConfig(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPipelineConfig(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PipelineConfigStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PipelineConfigStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PipelineConfigStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintPipelineConfig(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfigurationEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigurationEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigurationEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PipelineConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPipelineConfig(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Type != 0 {
		i = encodeVarintPipelineConfig(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPipelineConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovPipelineConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PipelineConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovPipelineConfig(uint64(l))
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovPipelineConfig(uint64(l))
	}
	l = len(m.TargetID)
	if l > 0 {
		n += 1 + l + sovPipelineConfig(uint64(l))
	}
	l = len(m.P4DeviceConfig)
	if l > 0 {
		n += 1 + l + sovPipelineConfig(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovPipelineConfig(uint64(m.Action))
	}
	l = m.Status.Size()
	n += 1 + l + sovPipelineConfig(uint64(l))
	return n
}

func (m *PipelineConfigStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovPipelineConfig(uint64(m.State))
	}
	return n
}

func (m *ConfigurationEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPipelineConfig(uint64(m.Type))
	}
	l = m.PipelineConfig.Size()
	n += 1 + l + sovPipelineConfig(uint64(l))
	return n
}

func sovPipelineConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPipelineConfig(x uint64) (n int) {
	return sovPipelineConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PipelineConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipelineConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipelineConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = PipelineConfigID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipelineConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetID = TargetID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P4DeviceConfig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPipelineConfig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P4DeviceConfig = append(m.P4DeviceConfig[:0], dAtA[iNdEx:postIndex]...)
			if m.P4DeviceConfig == nil {
				m.P4DeviceConfig = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= ConfigurationAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipelineConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PipelineConfigStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PipelineConfigStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PipelineConfigStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PipelineConfigStatus_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipelineConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigurationEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipelineConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigurationEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigurationEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ConfigurationEvent_EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PipelineConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipelineConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipelineConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipelineConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PipelineConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipelineConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipelineConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPipelineConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPipelineConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipelineConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipelineConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPipelineConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPipelineConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPipelineConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPipelineConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPipelineConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPipelineConfig = fmt.Errorf("proto: unexpected end of group")
)
