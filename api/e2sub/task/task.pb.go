// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/e2sub/task.proto

// Package e2.task defines the interior gRPC interface for E2 termination registry service

package task

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_onosproject_onos_e2sub_api_e2_endpoint_v1beta1 "github.com/onosproject/onos-e2sub/api/e2/endpoint/v1beta1"
	github_com_onosproject_onos_e2sub_api_e2_subscription_v1beta1 "github.com/onosproject/onos-e2sub/api/e2/subscription/v1beta1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Phase is a subscription task phase
type Phase int32

const (
	// OPEN is a subscription task open phase
	Phase_OPEN Phase = 0
	// CLOSE is a subscription task close phase
	Phase_CLOSE Phase = 1
)

var Phase_name = map[int32]string{
	0: "OPEN",
	1: "CLOSE",
}

var Phase_value = map[string]int32{
	"OPEN":  0,
	"CLOSE": 1,
}

func (x Phase) String() string {
	return proto.EnumName(Phase_name, int32(x))
}

func (Phase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0104e6b4d1b29b18, []int{0}
}

// Status is a subscription task status
type Status int32

const (
	// PENDING indicates the subscription task phase is pending
	Status_PENDING Status = 0
	// COMPLETE indicates the subscription task phase is complete
	Status_COMPLETE Status = 1
)

var Status_name = map[int32]string{
	0: "PENDING",
	1: "COMPLETE",
}

var Status_value = map[string]int32{
	"PENDING":  0,
	"COMPLETE": 1,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0104e6b4d1b29b18, []int{1}
}

// Type of change
type EventType int32

const (
	EventType_NONE    EventType = 0
	EventType_CREATED EventType = 1
	EventType_UPDATED EventType = 2
	EventType_REMOVED EventType = 3
)

var EventType_name = map[int32]string{
	0: "NONE",
	1: "CREATED",
	2: "UPDATED",
	3: "REMOVED",
}

var EventType_value = map[string]int32{
	"NONE":    0,
	"CREATED": 1,
	"UPDATED": 2,
	"REMOVED": 3,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0104e6b4d1b29b18, []int{2}
}

// Lifecycle is a subscription task status
type Lifecycle struct {
	Phase                Phase    `protobuf:"varint,1,opt,name=phase,proto3,enum=e2sub.task.Phase" json:"phase,omitempty"`
	Status               Status   `protobuf:"varint,2,opt,name=status,proto3,enum=e2sub.task.Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Lifecycle) Reset()         { *m = Lifecycle{} }
func (m *Lifecycle) String() string { return proto.CompactTextString(m) }
func (*Lifecycle) ProtoMessage()    {}
func (*Lifecycle) Descriptor() ([]byte, []int) {
	return fileDescriptor_0104e6b4d1b29b18, []int{0}
}
func (m *Lifecycle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Lifecycle.Unmarshal(m, b)
}
func (m *Lifecycle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Lifecycle.Marshal(b, m, deterministic)
}
func (m *Lifecycle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lifecycle.Merge(m, src)
}
func (m *Lifecycle) XXX_Size() int {
	return xxx_messageInfo_Lifecycle.Size(m)
}
func (m *Lifecycle) XXX_DiscardUnknown() {
	xxx_messageInfo_Lifecycle.DiscardUnknown(m)
}

var xxx_messageInfo_Lifecycle proto.InternalMessageInfo

func (m *Lifecycle) GetPhase() Phase {
	if m != nil {
		return m.Phase
	}
	return Phase_OPEN
}

func (m *Lifecycle) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

// SubscriptionTask is a task representing a subscription between an E2 termination and an E2 node
type SubscriptionTask struct {
	ID                   ID                                                               `protobuf:"bytes,1,opt,name=id,proto3,casttype=ID" json:"id,omitempty"`
	Revision             Revision                                                         `protobuf:"varint,2,opt,name=revision,proto3,casttype=Revision" json:"revision,omitempty"`
	SubscriptionID       github_com_onosproject_onos_e2sub_api_e2_subscription_v1beta1.ID `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3,casttype=github.com/onosproject/onos-e2sub/api/e2/subscription/v1beta1.ID" json:"subscription_id,omitempty"`
	EndpointID           github_com_onosproject_onos_e2sub_api_e2_endpoint_v1beta1.ID     `protobuf:"bytes,4,opt,name=endpoint_id,json=endpointId,proto3,casttype=github.com/onosproject/onos-e2sub/api/e2/endpoint/v1beta1.ID" json:"endpoint_id,omitempty"`
	Lifecycle            Lifecycle                                                        `protobuf:"bytes,5,opt,name=lifecycle,proto3" json:"lifecycle"`
	XXX_NoUnkeyedLiteral struct{}                                                         `json:"-"`
	XXX_unrecognized     []byte                                                           `json:"-"`
	XXX_sizecache        int32                                                            `json:"-"`
}

func (m *SubscriptionTask) Reset()         { *m = SubscriptionTask{} }
func (m *SubscriptionTask) String() string { return proto.CompactTextString(m) }
func (*SubscriptionTask) ProtoMessage()    {}
func (*SubscriptionTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_0104e6b4d1b29b18, []int{1}
}
func (m *SubscriptionTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionTask.Unmarshal(m, b)
}
func (m *SubscriptionTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionTask.Marshal(b, m, deterministic)
}
func (m *SubscriptionTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionTask.Merge(m, src)
}
func (m *SubscriptionTask) XXX_Size() int {
	return xxx_messageInfo_SubscriptionTask.Size(m)
}
func (m *SubscriptionTask) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionTask.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionTask proto.InternalMessageInfo

func (m *SubscriptionTask) GetID() ID {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *SubscriptionTask) GetRevision() Revision {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *SubscriptionTask) GetSubscriptionID() github_com_onosproject_onos_e2sub_api_e2_subscription_v1beta1.ID {
	if m != nil {
		return m.SubscriptionID
	}
	return ""
}

func (m *SubscriptionTask) GetEndpointID() github_com_onosproject_onos_e2sub_api_e2_endpoint_v1beta1.ID {
	if m != nil {
		return m.EndpointID
	}
	return ""
}

func (m *SubscriptionTask) GetLifecycle() Lifecycle {
	if m != nil {
		return m.Lifecycle
	}
	return Lifecycle{}
}

// Event is a SubscriptionTask event
type Event struct {
	Type                 EventType        `protobuf:"varint,1,opt,name=type,proto3,enum=e2sub.task.EventType" json:"type,omitempty"`
	Task                 SubscriptionTask `protobuf:"bytes,2,opt,name=task,proto3" json:"task"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_0104e6b4d1b29b18, []int{2}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_NONE
}

func (m *Event) GetTask() SubscriptionTask {
	if m != nil {
		return m.Task
	}
	return SubscriptionTask{}
}

// GetSubscriptionTaskRequest is a request for getting existing SubscriptionTask
type GetSubscriptionTaskRequest struct {
	ID                   ID       `protobuf:"bytes,1,opt,name=id,proto3,casttype=ID" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSubscriptionTaskRequest) Reset()         { *m = GetSubscriptionTaskRequest{} }
func (m *GetSubscriptionTaskRequest) String() string { return proto.CompactTextString(m) }
func (*GetSubscriptionTaskRequest) ProtoMessage()    {}
func (*GetSubscriptionTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0104e6b4d1b29b18, []int{3}
}
func (m *GetSubscriptionTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSubscriptionTaskRequest.Unmarshal(m, b)
}
func (m *GetSubscriptionTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSubscriptionTaskRequest.Marshal(b, m, deterministic)
}
func (m *GetSubscriptionTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscriptionTaskRequest.Merge(m, src)
}
func (m *GetSubscriptionTaskRequest) XXX_Size() int {
	return xxx_messageInfo_GetSubscriptionTaskRequest.Size(m)
}
func (m *GetSubscriptionTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscriptionTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscriptionTaskRequest proto.InternalMessageInfo

func (m *GetSubscriptionTaskRequest) GetID() ID {
	if m != nil {
		return m.ID
	}
	return ""
}

// GetSubscriptionTaskResponse is a response with invormation about a requested SubscriptionTask
type GetSubscriptionTaskResponse struct {
	Task                 *SubscriptionTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetSubscriptionTaskResponse) Reset()         { *m = GetSubscriptionTaskResponse{} }
func (m *GetSubscriptionTaskResponse) String() string { return proto.CompactTextString(m) }
func (*GetSubscriptionTaskResponse) ProtoMessage()    {}
func (*GetSubscriptionTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0104e6b4d1b29b18, []int{4}
}
func (m *GetSubscriptionTaskResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSubscriptionTaskResponse.Unmarshal(m, b)
}
func (m *GetSubscriptionTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSubscriptionTaskResponse.Marshal(b, m, deterministic)
}
func (m *GetSubscriptionTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscriptionTaskResponse.Merge(m, src)
}
func (m *GetSubscriptionTaskResponse) XXX_Size() int {
	return xxx_messageInfo_GetSubscriptionTaskResponse.Size(m)
}
func (m *GetSubscriptionTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscriptionTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscriptionTaskResponse proto.InternalMessageInfo

func (m *GetSubscriptionTaskResponse) GetTask() *SubscriptionTask {
	if m != nil {
		return m.Task
	}
	return nil
}

// ListSubscriptionTasksRequest is a request to list all available SubscriptionTasks
type ListSubscriptionTasksRequest struct {
	SubscriptionID       github_com_onosproject_onos_e2sub_api_e2_subscription_v1beta1.ID `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3,casttype=github.com/onosproject/onos-e2sub/api/e2/subscription/v1beta1.ID" json:"subscription_id,omitempty"`
	EndpointID           github_com_onosproject_onos_e2sub_api_e2_endpoint_v1beta1.ID     `protobuf:"bytes,2,opt,name=endpoint_id,json=endpointId,proto3,casttype=github.com/onosproject/onos-e2sub/api/e2/endpoint/v1beta1.ID" json:"endpoint_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                         `json:"-"`
	XXX_unrecognized     []byte                                                           `json:"-"`
	XXX_sizecache        int32                                                            `json:"-"`
}

func (m *ListSubscriptionTasksRequest) Reset()         { *m = ListSubscriptionTasksRequest{} }
func (m *ListSubscriptionTasksRequest) String() string { return proto.CompactTextString(m) }
func (*ListSubscriptionTasksRequest) ProtoMessage()    {}
func (*ListSubscriptionTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0104e6b4d1b29b18, []int{5}
}
func (m *ListSubscriptionTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSubscriptionTasksRequest.Unmarshal(m, b)
}
func (m *ListSubscriptionTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSubscriptionTasksRequest.Marshal(b, m, deterministic)
}
func (m *ListSubscriptionTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSubscriptionTasksRequest.Merge(m, src)
}
func (m *ListSubscriptionTasksRequest) XXX_Size() int {
	return xxx_messageInfo_ListSubscriptionTasksRequest.Size(m)
}
func (m *ListSubscriptionTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSubscriptionTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSubscriptionTasksRequest proto.InternalMessageInfo

func (m *ListSubscriptionTasksRequest) GetSubscriptionID() github_com_onosproject_onos_e2sub_api_e2_subscription_v1beta1.ID {
	if m != nil {
		return m.SubscriptionID
	}
	return ""
}

func (m *ListSubscriptionTasksRequest) GetEndpointID() github_com_onosproject_onos_e2sub_api_e2_endpoint_v1beta1.ID {
	if m != nil {
		return m.EndpointID
	}
	return ""
}

// ListSubscriptionTasksResponse is a response to list all available SubscriptionTasks
type ListSubscriptionTasksResponse struct {
	Tasks                []SubscriptionTask `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListSubscriptionTasksResponse) Reset()         { *m = ListSubscriptionTasksResponse{} }
func (m *ListSubscriptionTasksResponse) String() string { return proto.CompactTextString(m) }
func (*ListSubscriptionTasksResponse) ProtoMessage()    {}
func (*ListSubscriptionTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0104e6b4d1b29b18, []int{6}
}
func (m *ListSubscriptionTasksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSubscriptionTasksResponse.Unmarshal(m, b)
}
func (m *ListSubscriptionTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSubscriptionTasksResponse.Marshal(b, m, deterministic)
}
func (m *ListSubscriptionTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSubscriptionTasksResponse.Merge(m, src)
}
func (m *ListSubscriptionTasksResponse) XXX_Size() int {
	return xxx_messageInfo_ListSubscriptionTasksResponse.Size(m)
}
func (m *ListSubscriptionTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSubscriptionTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSubscriptionTasksResponse proto.InternalMessageInfo

func (m *ListSubscriptionTasksResponse) GetTasks() []SubscriptionTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

// WatchSubscriptionTasksRequest is a request to receive a stream of all SubscriptionTask changes.
type WatchSubscriptionTasksRequest struct {
	Noreplay             bool                                                             `protobuf:"varint,1,opt,name=noreplay,proto3" json:"noreplay,omitempty"`
	SubscriptionID       github_com_onosproject_onos_e2sub_api_e2_subscription_v1beta1.ID `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3,casttype=github.com/onosproject/onos-e2sub/api/e2/subscription/v1beta1.ID" json:"subscription_id,omitempty"`
	EndpointID           github_com_onosproject_onos_e2sub_api_e2_endpoint_v1beta1.ID     `protobuf:"bytes,3,opt,name=endpoint_id,json=endpointId,proto3,casttype=github.com/onosproject/onos-e2sub/api/e2/endpoint/v1beta1.ID" json:"endpoint_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                         `json:"-"`
	XXX_unrecognized     []byte                                                           `json:"-"`
	XXX_sizecache        int32                                                            `json:"-"`
}

func (m *WatchSubscriptionTasksRequest) Reset()         { *m = WatchSubscriptionTasksRequest{} }
func (m *WatchSubscriptionTasksRequest) String() string { return proto.CompactTextString(m) }
func (*WatchSubscriptionTasksRequest) ProtoMessage()    {}
func (*WatchSubscriptionTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0104e6b4d1b29b18, []int{7}
}
func (m *WatchSubscriptionTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchSubscriptionTasksRequest.Unmarshal(m, b)
}
func (m *WatchSubscriptionTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchSubscriptionTasksRequest.Marshal(b, m, deterministic)
}
func (m *WatchSubscriptionTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchSubscriptionTasksRequest.Merge(m, src)
}
func (m *WatchSubscriptionTasksRequest) XXX_Size() int {
	return xxx_messageInfo_WatchSubscriptionTasksRequest.Size(m)
}
func (m *WatchSubscriptionTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchSubscriptionTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchSubscriptionTasksRequest proto.InternalMessageInfo

func (m *WatchSubscriptionTasksRequest) GetNoreplay() bool {
	if m != nil {
		return m.Noreplay
	}
	return false
}

func (m *WatchSubscriptionTasksRequest) GetSubscriptionID() github_com_onosproject_onos_e2sub_api_e2_subscription_v1beta1.ID {
	if m != nil {
		return m.SubscriptionID
	}
	return ""
}

func (m *WatchSubscriptionTasksRequest) GetEndpointID() github_com_onosproject_onos_e2sub_api_e2_endpoint_v1beta1.ID {
	if m != nil {
		return m.EndpointID
	}
	return ""
}

// WatchSubscriptionTasksResponse is a response indicating a change in the available SubscriptionTasks.
type WatchSubscriptionTasksResponse struct {
	Event                Event    `protobuf:"bytes,1,opt,name=event,proto3" json:"event"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchSubscriptionTasksResponse) Reset()         { *m = WatchSubscriptionTasksResponse{} }
func (m *WatchSubscriptionTasksResponse) String() string { return proto.CompactTextString(m) }
func (*WatchSubscriptionTasksResponse) ProtoMessage()    {}
func (*WatchSubscriptionTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0104e6b4d1b29b18, []int{8}
}
func (m *WatchSubscriptionTasksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchSubscriptionTasksResponse.Unmarshal(m, b)
}
func (m *WatchSubscriptionTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchSubscriptionTasksResponse.Marshal(b, m, deterministic)
}
func (m *WatchSubscriptionTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchSubscriptionTasksResponse.Merge(m, src)
}
func (m *WatchSubscriptionTasksResponse) XXX_Size() int {
	return xxx_messageInfo_WatchSubscriptionTasksResponse.Size(m)
}
func (m *WatchSubscriptionTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchSubscriptionTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchSubscriptionTasksResponse proto.InternalMessageInfo

func (m *WatchSubscriptionTasksResponse) GetEvent() Event {
	if m != nil {
		return m.Event
	}
	return Event{}
}

// UpdateSubscriptionTaskRequest is a request for updating a SubscriptionTask status
type UpdateSubscriptionTaskRequest struct {
	Task                 *SubscriptionTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateSubscriptionTaskRequest) Reset()         { *m = UpdateSubscriptionTaskRequest{} }
func (m *UpdateSubscriptionTaskRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSubscriptionTaskRequest) ProtoMessage()    {}
func (*UpdateSubscriptionTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0104e6b4d1b29b18, []int{9}
}
func (m *UpdateSubscriptionTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSubscriptionTaskRequest.Unmarshal(m, b)
}
func (m *UpdateSubscriptionTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSubscriptionTaskRequest.Marshal(b, m, deterministic)
}
func (m *UpdateSubscriptionTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSubscriptionTaskRequest.Merge(m, src)
}
func (m *UpdateSubscriptionTaskRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateSubscriptionTaskRequest.Size(m)
}
func (m *UpdateSubscriptionTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSubscriptionTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSubscriptionTaskRequest proto.InternalMessageInfo

func (m *UpdateSubscriptionTaskRequest) GetTask() *SubscriptionTask {
	if m != nil {
		return m.Task
	}
	return nil
}

// UpdateSubscriptionTaskResponse is a response to updating a SubscriptionTask status
type UpdateSubscriptionTaskResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSubscriptionTaskResponse) Reset()         { *m = UpdateSubscriptionTaskResponse{} }
func (m *UpdateSubscriptionTaskResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateSubscriptionTaskResponse) ProtoMessage()    {}
func (*UpdateSubscriptionTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0104e6b4d1b29b18, []int{10}
}
func (m *UpdateSubscriptionTaskResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSubscriptionTaskResponse.Unmarshal(m, b)
}
func (m *UpdateSubscriptionTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSubscriptionTaskResponse.Marshal(b, m, deterministic)
}
func (m *UpdateSubscriptionTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSubscriptionTaskResponse.Merge(m, src)
}
func (m *UpdateSubscriptionTaskResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateSubscriptionTaskResponse.Size(m)
}
func (m *UpdateSubscriptionTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSubscriptionTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSubscriptionTaskResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("e2sub.task.Phase", Phase_name, Phase_value)
	proto.RegisterEnum("e2sub.task.Status", Status_name, Status_value)
	proto.RegisterEnum("e2sub.task.EventType", EventType_name, EventType_value)
	proto.RegisterType((*Lifecycle)(nil), "e2sub.task.Lifecycle")
	proto.RegisterType((*SubscriptionTask)(nil), "e2sub.task.SubscriptionTask")
	proto.RegisterType((*Event)(nil), "e2sub.task.Event")
	proto.RegisterType((*GetSubscriptionTaskRequest)(nil), "e2sub.task.GetSubscriptionTaskRequest")
	proto.RegisterType((*GetSubscriptionTaskResponse)(nil), "e2sub.task.GetSubscriptionTaskResponse")
	proto.RegisterType((*ListSubscriptionTasksRequest)(nil), "e2sub.task.ListSubscriptionTasksRequest")
	proto.RegisterType((*ListSubscriptionTasksResponse)(nil), "e2sub.task.ListSubscriptionTasksResponse")
	proto.RegisterType((*WatchSubscriptionTasksRequest)(nil), "e2sub.task.WatchSubscriptionTasksRequest")
	proto.RegisterType((*WatchSubscriptionTasksResponse)(nil), "e2sub.task.WatchSubscriptionTasksResponse")
	proto.RegisterType((*UpdateSubscriptionTaskRequest)(nil), "e2sub.task.UpdateSubscriptionTaskRequest")
	proto.RegisterType((*UpdateSubscriptionTaskResponse)(nil), "e2sub.task.UpdateSubscriptionTaskResponse")
}

func init() { proto.RegisterFile("api/e2sub/task.proto", fileDescriptor_0104e6b4d1b29b18) }

var fileDescriptor_0104e6b4d1b29b18 = []byte{
	// 742 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x41, 0x6f, 0xda, 0x4a,
	0x10, 0xc6, 0x06, 0xf2, 0x60, 0x88, 0x78, 0xce, 0xbe, 0x24, 0xe2, 0xf1, 0x48, 0x40, 0x7e, 0x52,
	0x43, 0x90, 0x02, 0x09, 0x95, 0xaa, 0xb6, 0xca, 0xa1, 0x25, 0x58, 0x11, 0x12, 0x01, 0x6a, 0x48,
	0xaa, 0xf6, 0xd2, 0x1a, 0xd8, 0x24, 0x4e, 0xa8, 0xd7, 0x61, 0x17, 0x24, 0x4e, 0x3d, 0xf6, 0xda,
	0x3f, 0xd2, 0xff, 0xd1, 0x3f, 0xd0, 0x2b, 0x87, 0xfc, 0x8c, 0x9c, 0x2a, 0xaf, 0x0d, 0x31, 0x89,
	0x4d, 0xe8, 0x21, 0xca, 0x05, 0x79, 0x67, 0xbf, 0x99, 0x6f, 0x98, 0x6f, 0x66, 0x6c, 0x58, 0xd5,
	0x4c, 0xbd, 0x80, 0x8b, 0x74, 0xd0, 0x2e, 0x30, 0x8d, 0x5e, 0xe6, 0xcd, 0x3e, 0x61, 0x04, 0x01,
	0xb7, 0xe4, 0x2d, 0x4b, 0x72, 0xf5, 0x8c, 0x9c, 0x11, 0x6e, 0x2e, 0x58, 0x4f, 0x36, 0x42, 0xfe,
	0x0c, 0xd1, 0xaa, 0x7e, 0x8a, 0x3b, 0xa3, 0x4e, 0x0f, 0xa3, 0x2d, 0x08, 0x9b, 0xe7, 0x1a, 0xc5,
	0x09, 0x21, 0x23, 0x64, 0xe3, 0xc5, 0x95, 0xfc, 0xad, 0x7b, 0xbe, 0x61, 0x5d, 0xa8, 0xf6, 0x3d,
	0xca, 0xc1, 0x12, 0x65, 0x1a, 0x1b, 0xd0, 0x84, 0xc8, 0x91, 0xc8, 0x8d, 0x6c, 0xf2, 0x1b, 0xd5,
	0x41, 0xc8, 0xdf, 0x82, 0x20, 0x35, 0x07, 0x6d, 0xda, 0xe9, 0xeb, 0x26, 0xd3, 0x89, 0xd1, 0xd2,
	0xe8, 0x25, 0x4a, 0x81, 0xa8, 0x77, 0x39, 0x4d, 0xb4, 0xb4, 0x7c, 0x3d, 0x4e, 0x8b, 0x95, 0xf2,
	0x0d, 0xff, 0x55, 0x45, 0xbd, 0x8b, 0xb2, 0x10, 0xe9, 0xe3, 0xa1, 0x4e, 0x75, 0x62, 0x70, 0x82,
	0x50, 0x69, 0xf9, 0x66, 0x9c, 0x8e, 0xa8, 0x8e, 0x4d, 0x9d, 0xde, 0xa2, 0xaf, 0xf0, 0x37, 0x75,
	0xc5, 0xfe, 0xa4, 0x77, 0x13, 0x41, 0x1e, 0xf4, 0xe4, 0x7a, 0x9c, 0x8e, 0xbb, 0x69, 0x39, 0xc1,
	0x9b, 0x33, 0x9d, 0x9d, 0x0f, 0xda, 0xf9, 0x0e, 0xf9, 0x52, 0x20, 0x06, 0xa1, 0x66, 0x9f, 0x5c,
	0xe0, 0x0e, 0xe3, 0xcf, 0x3b, 0x76, 0xf5, 0xec, 0x3a, 0x16, 0xdc, 0x51, 0x0b, 0xc3, 0xbd, 0x36,
	0x66, 0xda, 0x5e, 0xbe, 0x52, 0x56, 0xe3, 0xee, 0x8b, 0x4a, 0x17, 0x11, 0x88, 0x61, 0xa3, 0x6b,
	0x12, 0xdd, 0x60, 0x16, 0x79, 0x88, 0x93, 0xd7, 0xae, 0xc7, 0x69, 0x50, 0x1c, 0x33, 0x27, 0xde,
	0x5f, 0x98, 0x78, 0x12, 0xcd, 0x4d, 0x0a, 0x13, 0x63, 0xa5, 0x8b, 0x5e, 0x41, 0xb4, 0x37, 0x11,
	0x2c, 0x11, 0xce, 0x08, 0xd9, 0x58, 0x71, 0xcd, 0x5d, 0xfd, 0xa9, 0x9a, 0xa5, 0xd0, 0xcf, 0x71,
	0x3a, 0xa0, 0xde, 0xa2, 0xe5, 0x0b, 0x08, 0x2b, 0x43, 0x6c, 0x30, 0xb4, 0x0d, 0x21, 0x36, 0x32,
	0x27, 0x32, 0xcf, 0xb8, 0x73, 0x40, 0x6b, 0x64, 0x62, 0x95, 0x43, 0xd0, 0x0b, 0x08, 0x59, 0x76,
	0x2e, 0x43, 0xac, 0x98, 0x9a, 0xd1, 0xf9, 0x8e, 0xa8, 0x0e, 0x21, 0xc7, 0xcb, 0xaf, 0x21, 0x79,
	0x88, 0xd9, 0x5d, 0x88, 0x8a, 0xaf, 0x06, 0x98, 0xb2, 0xf9, 0xf2, 0xcb, 0x75, 0xf8, 0xcf, 0xd3,
	0x97, 0x9a, 0xc4, 0xa0, 0x18, 0xed, 0x3a, 0x29, 0x09, 0x0f, 0xa7, 0xe4, 0x24, 0xf3, 0x5d, 0x84,
	0x54, 0x55, 0xa7, 0xf7, 0x42, 0xd2, 0x49, 0x3e, 0x1e, 0x6d, 0x24, 0x3c, 0x65, 0x1b, 0x89, 0x8f,
	0xdd, 0x46, 0xf2, 0x07, 0xd8, 0xf0, 0xa9, 0x88, 0x53, 0xe5, 0x97, 0x10, 0xb6, 0x6a, 0x47, 0x13,
	0x42, 0x26, 0xb8, 0xa0, 0xf2, 0xb6, 0x83, 0xfc, 0x43, 0x84, 0x8d, 0xf7, 0x1a, 0xeb, 0x9c, 0xfb,
	0x96, 0x3b, 0x09, 0x11, 0x83, 0xf4, 0xb1, 0xd9, 0xd3, 0x46, 0xbc, 0xce, 0x11, 0x75, 0x7a, 0xf6,
	0x92, 0x42, 0x7c, 0x4a, 0x29, 0x82, 0x8f, 0x2e, 0x45, 0x1d, 0x36, 0xfd, 0xca, 0xe5, 0x68, 0xb1,
	0x03, 0x61, 0x6c, 0xcd, 0xa5, 0xd3, 0xf2, 0x2b, 0xf7, 0x06, 0x76, 0x22, 0x00, 0x47, 0xc9, 0xef,
	0x60, 0xe3, 0xd8, 0xec, 0x6a, 0x0c, 0xfb, 0x8d, 0xdf, 0x9f, 0x4f, 0x50, 0x06, 0x36, 0xfd, 0x42,
	0xda, 0x39, 0xe6, 0x52, 0x10, 0xe6, 0xaf, 0x08, 0x14, 0x81, 0x50, 0xbd, 0xa1, 0xd4, 0xa4, 0x00,
	0x8a, 0x42, 0xf8, 0xa0, 0x5a, 0x6f, 0x2a, 0x92, 0x90, 0xfb, 0x1f, 0x96, 0xec, 0xd7, 0x02, 0x8a,
	0xc1, 0x5f, 0x0d, 0xa5, 0x56, 0xae, 0xd4, 0x0e, 0xa5, 0x00, 0x5a, 0x86, 0xc8, 0x41, 0xfd, 0xa8,
	0x51, 0x55, 0x5a, 0x16, 0x68, 0x1f, 0xa2, 0xd3, 0xf5, 0x63, 0x85, 0xa9, 0xd5, 0x6b, 0x8a, 0x14,
	0xb0, 0x3c, 0x0e, 0x54, 0xe5, 0x6d, 0x4b, 0x29, 0x4b, 0x82, 0x75, 0x38, 0x6e, 0x94, 0xf9, 0x41,
	0xb4, 0x0e, 0xaa, 0x72, 0x54, 0x3f, 0x51, 0xca, 0x52, 0xb0, 0xf8, 0x2b, 0x08, 0xff, 0x2a, 0xc5,
	0xbb, 0xf9, 0x35, 0x71, 0x7f, 0xa8, 0x77, 0x30, 0x3a, 0x85, 0x7f, 0x3c, 0x76, 0x0a, 0x7a, 0xe6,
	0xfe, 0xef, 0xfe, 0x0b, 0x2b, 0xb9, 0xf5, 0x20, 0xce, 0x91, 0xaa, 0x07, 0x6b, 0x9e, 0x73, 0x85,
	0xb2, 0xb3, 0x4b, 0xda, 0x7f, 0x19, 0x25, 0xb7, 0x17, 0x40, 0x3a, 0x6c, 0x57, 0xb0, 0xee, 0xdd,
	0x3a, 0x68, 0x26, 0xc8, 0xdc, 0x69, 0x4c, 0xe6, 0x16, 0x81, 0xda, 0x84, 0xbb, 0x02, 0x22, 0xb0,
	0xee, 0xdd, 0x09, 0xb3, 0x94, 0x73, 0x1b, 0x70, 0x96, 0x72, 0x7e, 0x63, 0x95, 0xa4, 0x8f, 0xf1,
	0xd9, 0x6f, 0x9b, 0xf6, 0x12, 0xff, 0x74, 0x79, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x53, 0xd1,
	0x1f, 0x15, 0xf4, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// E2SubscriptionTaskServiceClient is the client API for E2SubscriptionTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type E2SubscriptionTaskServiceClient interface {
	// GetSubscriptionTask retrieves information about a specific task
	GetSubscriptionTask(ctx context.Context, in *GetSubscriptionTaskRequest, opts ...grpc.CallOption) (*GetSubscriptionTaskResponse, error)
	// ListSubscriptionTasks returns the list of currently registered E2 Tasks.
	ListSubscriptionTasks(ctx context.Context, in *ListSubscriptionTasksRequest, opts ...grpc.CallOption) (*ListSubscriptionTasksResponse, error)
	// WatchSubscriptionTasks returns a stream of changes in the set of available E2 Tasks.
	WatchSubscriptionTasks(ctx context.Context, in *WatchSubscriptionTasksRequest, opts ...grpc.CallOption) (E2SubscriptionTaskService_WatchSubscriptionTasksClient, error)
	// UpdateSubscriptionTask updates a task status
	UpdateSubscriptionTask(ctx context.Context, in *UpdateSubscriptionTaskRequest, opts ...grpc.CallOption) (*UpdateSubscriptionTaskResponse, error)
}

type e2SubscriptionTaskServiceClient struct {
	cc *grpc.ClientConn
}

func NewE2SubscriptionTaskServiceClient(cc *grpc.ClientConn) E2SubscriptionTaskServiceClient {
	return &e2SubscriptionTaskServiceClient{cc}
}

func (c *e2SubscriptionTaskServiceClient) GetSubscriptionTask(ctx context.Context, in *GetSubscriptionTaskRequest, opts ...grpc.CallOption) (*GetSubscriptionTaskResponse, error) {
	out := new(GetSubscriptionTaskResponse)
	err := c.cc.Invoke(ctx, "/e2sub.task.E2SubscriptionTaskService/GetSubscriptionTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2SubscriptionTaskServiceClient) ListSubscriptionTasks(ctx context.Context, in *ListSubscriptionTasksRequest, opts ...grpc.CallOption) (*ListSubscriptionTasksResponse, error) {
	out := new(ListSubscriptionTasksResponse)
	err := c.cc.Invoke(ctx, "/e2sub.task.E2SubscriptionTaskService/ListSubscriptionTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2SubscriptionTaskServiceClient) WatchSubscriptionTasks(ctx context.Context, in *WatchSubscriptionTasksRequest, opts ...grpc.CallOption) (E2SubscriptionTaskService_WatchSubscriptionTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_E2SubscriptionTaskService_serviceDesc.Streams[0], "/e2sub.task.E2SubscriptionTaskService/WatchSubscriptionTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &e2SubscriptionTaskServiceWatchSubscriptionTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type E2SubscriptionTaskService_WatchSubscriptionTasksClient interface {
	Recv() (*WatchSubscriptionTasksResponse, error)
	grpc.ClientStream
}

type e2SubscriptionTaskServiceWatchSubscriptionTasksClient struct {
	grpc.ClientStream
}

func (x *e2SubscriptionTaskServiceWatchSubscriptionTasksClient) Recv() (*WatchSubscriptionTasksResponse, error) {
	m := new(WatchSubscriptionTasksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *e2SubscriptionTaskServiceClient) UpdateSubscriptionTask(ctx context.Context, in *UpdateSubscriptionTaskRequest, opts ...grpc.CallOption) (*UpdateSubscriptionTaskResponse, error) {
	out := new(UpdateSubscriptionTaskResponse)
	err := c.cc.Invoke(ctx, "/e2sub.task.E2SubscriptionTaskService/UpdateSubscriptionTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// E2SubscriptionTaskServiceServer is the server API for E2SubscriptionTaskService service.
type E2SubscriptionTaskServiceServer interface {
	// GetSubscriptionTask retrieves information about a specific task
	GetSubscriptionTask(context.Context, *GetSubscriptionTaskRequest) (*GetSubscriptionTaskResponse, error)
	// ListSubscriptionTasks returns the list of currently registered E2 Tasks.
	ListSubscriptionTasks(context.Context, *ListSubscriptionTasksRequest) (*ListSubscriptionTasksResponse, error)
	// WatchSubscriptionTasks returns a stream of changes in the set of available E2 Tasks.
	WatchSubscriptionTasks(*WatchSubscriptionTasksRequest, E2SubscriptionTaskService_WatchSubscriptionTasksServer) error
	// UpdateSubscriptionTask updates a task status
	UpdateSubscriptionTask(context.Context, *UpdateSubscriptionTaskRequest) (*UpdateSubscriptionTaskResponse, error)
}

// UnimplementedE2SubscriptionTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedE2SubscriptionTaskServiceServer struct {
}

func (*UnimplementedE2SubscriptionTaskServiceServer) GetSubscriptionTask(ctx context.Context, req *GetSubscriptionTaskRequest) (*GetSubscriptionTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionTask not implemented")
}
func (*UnimplementedE2SubscriptionTaskServiceServer) ListSubscriptionTasks(ctx context.Context, req *ListSubscriptionTasksRequest) (*ListSubscriptionTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptionTasks not implemented")
}
func (*UnimplementedE2SubscriptionTaskServiceServer) WatchSubscriptionTasks(req *WatchSubscriptionTasksRequest, srv E2SubscriptionTaskService_WatchSubscriptionTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchSubscriptionTasks not implemented")
}
func (*UnimplementedE2SubscriptionTaskServiceServer) UpdateSubscriptionTask(ctx context.Context, req *UpdateSubscriptionTaskRequest) (*UpdateSubscriptionTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriptionTask not implemented")
}

func RegisterE2SubscriptionTaskServiceServer(s *grpc.Server, srv E2SubscriptionTaskServiceServer) {
	s.RegisterService(&_E2SubscriptionTaskService_serviceDesc, srv)
}

func _E2SubscriptionTaskService_GetSubscriptionTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2SubscriptionTaskServiceServer).GetSubscriptionTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e2sub.task.E2SubscriptionTaskService/GetSubscriptionTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2SubscriptionTaskServiceServer).GetSubscriptionTask(ctx, req.(*GetSubscriptionTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2SubscriptionTaskService_ListSubscriptionTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2SubscriptionTaskServiceServer).ListSubscriptionTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e2sub.task.E2SubscriptionTaskService/ListSubscriptionTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2SubscriptionTaskServiceServer).ListSubscriptionTasks(ctx, req.(*ListSubscriptionTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2SubscriptionTaskService_WatchSubscriptionTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchSubscriptionTasksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(E2SubscriptionTaskServiceServer).WatchSubscriptionTasks(m, &e2SubscriptionTaskServiceWatchSubscriptionTasksServer{stream})
}

type E2SubscriptionTaskService_WatchSubscriptionTasksServer interface {
	Send(*WatchSubscriptionTasksResponse) error
	grpc.ServerStream
}

type e2SubscriptionTaskServiceWatchSubscriptionTasksServer struct {
	grpc.ServerStream
}

func (x *e2SubscriptionTaskServiceWatchSubscriptionTasksServer) Send(m *WatchSubscriptionTasksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _E2SubscriptionTaskService_UpdateSubscriptionTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2SubscriptionTaskServiceServer).UpdateSubscriptionTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e2sub.task.E2SubscriptionTaskService/UpdateSubscriptionTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2SubscriptionTaskServiceServer).UpdateSubscriptionTask(ctx, req.(*UpdateSubscriptionTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _E2SubscriptionTaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "e2sub.task.E2SubscriptionTaskService",
	HandlerType: (*E2SubscriptionTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubscriptionTask",
			Handler:    _E2SubscriptionTaskService_GetSubscriptionTask_Handler,
		},
		{
			MethodName: "ListSubscriptionTasks",
			Handler:    _E2SubscriptionTaskService_ListSubscriptionTasks_Handler,
		},
		{
			MethodName: "UpdateSubscriptionTask",
			Handler:    _E2SubscriptionTaskService_UpdateSubscriptionTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchSubscriptionTasks",
			Handler:       _E2SubscriptionTaskService_WatchSubscriptionTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/e2sub/task.proto",
}
