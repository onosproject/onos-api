// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/e2sub/subscription.proto

// Package e2sub.subscription defines the interior gRPC interface for subscription service

package subscription

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Status is a subscription status
type Status int32

const (
	Status_ACTIVE         Status = 0
	Status_PENDING_DELETE Status = 1
)

var Status_name = map[int32]string{
	0: "ACTIVE",
	1: "PENDING_DELETE",
}

var Status_value = map[string]int32{
	"ACTIVE":         0,
	"PENDING_DELETE": 1,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7afcf53552ff323b, []int{0}
}

// EventType is a subscription event type
type EventType int32

const (
	EventType_NONE    EventType = 0
	EventType_ADDED   EventType = 1
	EventType_UPDATED EventType = 2
	EventType_REMOVED EventType = 3
)

var EventType_name = map[int32]string{
	0: "NONE",
	1: "ADDED",
	2: "UPDATED",
	3: "REMOVED",
}

var EventType_value = map[string]int32{
	"NONE":    0,
	"ADDED":   1,
	"UPDATED": 2,
	"REMOVED": 3,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7afcf53552ff323b, []int{1}
}

type EncodingType int32

const (
	EncodingType_PROTO    EncodingType = 0
	EncodingType_ASN1_PER EncodingType = 1
	EncodingType_ASN1_XER EncodingType = 2
	EncodingType_JSON     EncodingType = 3
)

var EncodingType_name = map[int32]string{
	0: "PROTO",
	1: "ASN1_PER",
	2: "ASN1_XER",
	3: "JSON",
}

var EncodingType_value = map[string]int32{
	"PROTO":    0,
	"ASN1_PER": 1,
	"ASN1_XER": 2,
	"JSON":     3,
}

func (x EncodingType) String() string {
	return proto.EnumName(EncodingType_name, int32(x))
}

func (EncodingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7afcf53552ff323b, []int{2}
}

// Lifecycle is the subscription lifecycle
type Lifecycle struct {
	Status               Status   `protobuf:"varint,1,opt,name=status,proto3,enum=e2sub.subscription.Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Lifecycle) Reset()         { *m = Lifecycle{} }
func (m *Lifecycle) String() string { return proto.CompactTextString(m) }
func (*Lifecycle) ProtoMessage()    {}
func (*Lifecycle) Descriptor() ([]byte, []int) {
	return fileDescriptor_7afcf53552ff323b, []int{0}
}
func (m *Lifecycle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Lifecycle.Unmarshal(m, b)
}
func (m *Lifecycle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Lifecycle.Marshal(b, m, deterministic)
}
func (m *Lifecycle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lifecycle.Merge(m, src)
}
func (m *Lifecycle) XXX_Size() int {
	return xxx_messageInfo_Lifecycle.Size(m)
}
func (m *Lifecycle) XXX_DiscardUnknown() {
	xxx_messageInfo_Lifecycle.DiscardUnknown(m)
}

var xxx_messageInfo_Lifecycle proto.InternalMessageInfo

func (m *Lifecycle) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_ACTIVE
}

// Event is a subscription event
type Event struct {
	Type                 EventType    `protobuf:"varint,1,opt,name=type,proto3,enum=e2sub.subscription.EventType" json:"type,omitempty"`
	Subscription         Subscription `protobuf:"bytes,2,opt,name=subscription,proto3" json:"subscription"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_7afcf53552ff323b, []int{1}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_NONE
}

func (m *Event) GetSubscription() Subscription {
	if m != nil {
		return m.Subscription
	}
	return Subscription{}
}

// ServiceModel is a service model definition
type ServiceModel struct {
	ID                   ServiceModelID `protobuf:"bytes,4,opt,name=id,proto3,casttype=ServiceModelID" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ServiceModel) Reset()         { *m = ServiceModel{} }
func (m *ServiceModel) String() string { return proto.CompactTextString(m) }
func (*ServiceModel) ProtoMessage()    {}
func (*ServiceModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_7afcf53552ff323b, []int{2}
}
func (m *ServiceModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceModel.Unmarshal(m, b)
}
func (m *ServiceModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceModel.Marshal(b, m, deterministic)
}
func (m *ServiceModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceModel.Merge(m, src)
}
func (m *ServiceModel) XXX_Size() int {
	return xxx_messageInfo_ServiceModel.Size(m)
}
func (m *ServiceModel) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceModel.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceModel proto.InternalMessageInfo

func (m *ServiceModel) GetID() ServiceModelID {
	if m != nil {
		return m.ID
	}
	return ""
}

// Payload is a subscription payload
type Payload struct {
	EncodingType         EncodingType `protobuf:"varint,1,opt,name=encoding_type,json=encodingType,proto3,enum=e2sub.subscription.EncodingType" json:"encoding_type,omitempty"`
	Bytes                []byte       `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_7afcf53552ff323b, []int{3}
}
func (m *Payload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payload.Unmarshal(m, b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
}
func (m *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(m, src)
}
func (m *Payload) XXX_Size() int {
	return xxx_messageInfo_Payload.Size(m)
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetEncodingType() EncodingType {
	if m != nil {
		return m.EncodingType
	}
	return EncodingType_PROTO
}

func (m *Payload) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

// Subscription is a subscription state
type Subscription struct {
	ID                   ID            `protobuf:"bytes,1,opt,name=id,proto3,casttype=ID" json:"id,omitempty"`
	Revision             Revision      `protobuf:"varint,2,opt,name=revision,proto3,casttype=Revision" json:"revision,omitempty"`
	AppID                AppID         `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3,casttype=AppID" json:"app_id,omitempty"`
	E2NodeID             E2NodeID      `protobuf:"bytes,4,opt,name=e2_node_id,json=e2NodeId,proto3,casttype=E2NodeID" json:"e2_node_id,omitempty"`
	ServiceModel         *ServiceModel `protobuf:"bytes,5,opt,name=service_model,json=serviceModel,proto3" json:"service_model,omitempty"`
	Payload              *Payload      `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	Lifecycle            Lifecycle     `protobuf:"bytes,7,opt,name=lifecycle,proto3" json:"lifecycle"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Subscription) Reset()         { *m = Subscription{} }
func (m *Subscription) String() string { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()    {}
func (*Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_7afcf53552ff323b, []int{4}
}
func (m *Subscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscription.Unmarshal(m, b)
}
func (m *Subscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscription.Marshal(b, m, deterministic)
}
func (m *Subscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscription.Merge(m, src)
}
func (m *Subscription) XXX_Size() int {
	return xxx_messageInfo_Subscription.Size(m)
}
func (m *Subscription) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscription.DiscardUnknown(m)
}

var xxx_messageInfo_Subscription proto.InternalMessageInfo

func (m *Subscription) GetID() ID {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Subscription) GetRevision() Revision {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *Subscription) GetAppID() AppID {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *Subscription) GetE2NodeID() E2NodeID {
	if m != nil {
		return m.E2NodeID
	}
	return ""
}

func (m *Subscription) GetServiceModel() *ServiceModel {
	if m != nil {
		return m.ServiceModel
	}
	return nil
}

func (m *Subscription) GetPayload() *Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Subscription) GetLifecycle() Lifecycle {
	if m != nil {
		return m.Lifecycle
	}
	return Lifecycle{}
}

// AddSubscriptionRequest a subscription request
type AddSubscriptionRequest struct {
	Subscription         *Subscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AddSubscriptionRequest) Reset()         { *m = AddSubscriptionRequest{} }
func (m *AddSubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*AddSubscriptionRequest) ProtoMessage()    {}
func (*AddSubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7afcf53552ff323b, []int{5}
}
func (m *AddSubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddSubscriptionRequest.Unmarshal(m, b)
}
func (m *AddSubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddSubscriptionRequest.Marshal(b, m, deterministic)
}
func (m *AddSubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSubscriptionRequest.Merge(m, src)
}
func (m *AddSubscriptionRequest) XXX_Size() int {
	return xxx_messageInfo_AddSubscriptionRequest.Size(m)
}
func (m *AddSubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddSubscriptionRequest proto.InternalMessageInfo

func (m *AddSubscriptionRequest) GetSubscription() *Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

// AddSubscriptionResponse a subscription response
type AddSubscriptionResponse struct {
	Subscription         *Subscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AddSubscriptionResponse) Reset()         { *m = AddSubscriptionResponse{} }
func (m *AddSubscriptionResponse) String() string { return proto.CompactTextString(m) }
func (*AddSubscriptionResponse) ProtoMessage()    {}
func (*AddSubscriptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7afcf53552ff323b, []int{6}
}
func (m *AddSubscriptionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddSubscriptionResponse.Unmarshal(m, b)
}
func (m *AddSubscriptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddSubscriptionResponse.Marshal(b, m, deterministic)
}
func (m *AddSubscriptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSubscriptionResponse.Merge(m, src)
}
func (m *AddSubscriptionResponse) XXX_Size() int {
	return xxx_messageInfo_AddSubscriptionResponse.Size(m)
}
func (m *AddSubscriptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSubscriptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddSubscriptionResponse proto.InternalMessageInfo

func (m *AddSubscriptionResponse) GetSubscription() *Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

// RemoveSubscriptionRequest a subscription delete request
type RemoveSubscriptionRequest struct {
	ID                   ID       `protobuf:"bytes,1,opt,name=id,proto3,casttype=ID" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveSubscriptionRequest) Reset()         { *m = RemoveSubscriptionRequest{} }
func (m *RemoveSubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveSubscriptionRequest) ProtoMessage()    {}
func (*RemoveSubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7afcf53552ff323b, []int{7}
}
func (m *RemoveSubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveSubscriptionRequest.Unmarshal(m, b)
}
func (m *RemoveSubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveSubscriptionRequest.Marshal(b, m, deterministic)
}
func (m *RemoveSubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveSubscriptionRequest.Merge(m, src)
}
func (m *RemoveSubscriptionRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveSubscriptionRequest.Size(m)
}
func (m *RemoveSubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveSubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveSubscriptionRequest proto.InternalMessageInfo

func (m *RemoveSubscriptionRequest) GetID() ID {
	if m != nil {
		return m.ID
	}
	return ""
}

// RemoveSubscriptionResponse a subscription delete response
type RemoveSubscriptionResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveSubscriptionResponse) Reset()         { *m = RemoveSubscriptionResponse{} }
func (m *RemoveSubscriptionResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveSubscriptionResponse) ProtoMessage()    {}
func (*RemoveSubscriptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7afcf53552ff323b, []int{8}
}
func (m *RemoveSubscriptionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveSubscriptionResponse.Unmarshal(m, b)
}
func (m *RemoveSubscriptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveSubscriptionResponse.Marshal(b, m, deterministic)
}
func (m *RemoveSubscriptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveSubscriptionResponse.Merge(m, src)
}
func (m *RemoveSubscriptionResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveSubscriptionResponse.Size(m)
}
func (m *RemoveSubscriptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveSubscriptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveSubscriptionResponse proto.InternalMessageInfo

type GetSubscriptionRequest struct {
	ID                   ID       `protobuf:"bytes,1,opt,name=id,proto3,casttype=ID" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSubscriptionRequest) Reset()         { *m = GetSubscriptionRequest{} }
func (m *GetSubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*GetSubscriptionRequest) ProtoMessage()    {}
func (*GetSubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7afcf53552ff323b, []int{9}
}
func (m *GetSubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSubscriptionRequest.Unmarshal(m, b)
}
func (m *GetSubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSubscriptionRequest.Marshal(b, m, deterministic)
}
func (m *GetSubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscriptionRequest.Merge(m, src)
}
func (m *GetSubscriptionRequest) XXX_Size() int {
	return xxx_messageInfo_GetSubscriptionRequest.Size(m)
}
func (m *GetSubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscriptionRequest proto.InternalMessageInfo

func (m *GetSubscriptionRequest) GetID() ID {
	if m != nil {
		return m.ID
	}
	return ""
}

type GetSubscriptionResponse struct {
	Subscription         *Subscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetSubscriptionResponse) Reset()         { *m = GetSubscriptionResponse{} }
func (m *GetSubscriptionResponse) String() string { return proto.CompactTextString(m) }
func (*GetSubscriptionResponse) ProtoMessage()    {}
func (*GetSubscriptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7afcf53552ff323b, []int{10}
}
func (m *GetSubscriptionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSubscriptionResponse.Unmarshal(m, b)
}
func (m *GetSubscriptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSubscriptionResponse.Marshal(b, m, deterministic)
}
func (m *GetSubscriptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscriptionResponse.Merge(m, src)
}
func (m *GetSubscriptionResponse) XXX_Size() int {
	return xxx_messageInfo_GetSubscriptionResponse.Size(m)
}
func (m *GetSubscriptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscriptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscriptionResponse proto.InternalMessageInfo

func (m *GetSubscriptionResponse) GetSubscription() *Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

type ListSubscriptionsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSubscriptionsRequest) Reset()         { *m = ListSubscriptionsRequest{} }
func (m *ListSubscriptionsRequest) String() string { return proto.CompactTextString(m) }
func (*ListSubscriptionsRequest) ProtoMessage()    {}
func (*ListSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7afcf53552ff323b, []int{11}
}
func (m *ListSubscriptionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSubscriptionsRequest.Unmarshal(m, b)
}
func (m *ListSubscriptionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSubscriptionsRequest.Marshal(b, m, deterministic)
}
func (m *ListSubscriptionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSubscriptionsRequest.Merge(m, src)
}
func (m *ListSubscriptionsRequest) XXX_Size() int {
	return xxx_messageInfo_ListSubscriptionsRequest.Size(m)
}
func (m *ListSubscriptionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSubscriptionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSubscriptionsRequest proto.InternalMessageInfo

type ListSubscriptionsResponse struct {
	Subscriptions        []Subscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListSubscriptionsResponse) Reset()         { *m = ListSubscriptionsResponse{} }
func (m *ListSubscriptionsResponse) String() string { return proto.CompactTextString(m) }
func (*ListSubscriptionsResponse) ProtoMessage()    {}
func (*ListSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7afcf53552ff323b, []int{12}
}
func (m *ListSubscriptionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSubscriptionsResponse.Unmarshal(m, b)
}
func (m *ListSubscriptionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSubscriptionsResponse.Marshal(b, m, deterministic)
}
func (m *ListSubscriptionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSubscriptionsResponse.Merge(m, src)
}
func (m *ListSubscriptionsResponse) XXX_Size() int {
	return xxx_messageInfo_ListSubscriptionsResponse.Size(m)
}
func (m *ListSubscriptionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSubscriptionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSubscriptionsResponse proto.InternalMessageInfo

func (m *ListSubscriptionsResponse) GetSubscriptions() []Subscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

type WatchSubscriptionsRequest struct {
	Noreplay             bool     `protobuf:"varint,1,opt,name=noreplay,proto3" json:"noreplay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchSubscriptionsRequest) Reset()         { *m = WatchSubscriptionsRequest{} }
func (m *WatchSubscriptionsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchSubscriptionsRequest) ProtoMessage()    {}
func (*WatchSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7afcf53552ff323b, []int{13}
}
func (m *WatchSubscriptionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchSubscriptionsRequest.Unmarshal(m, b)
}
func (m *WatchSubscriptionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchSubscriptionsRequest.Marshal(b, m, deterministic)
}
func (m *WatchSubscriptionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchSubscriptionsRequest.Merge(m, src)
}
func (m *WatchSubscriptionsRequest) XXX_Size() int {
	return xxx_messageInfo_WatchSubscriptionsRequest.Size(m)
}
func (m *WatchSubscriptionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchSubscriptionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchSubscriptionsRequest proto.InternalMessageInfo

func (m *WatchSubscriptionsRequest) GetNoreplay() bool {
	if m != nil {
		return m.Noreplay
	}
	return false
}

type WatchSubscriptionsResponse struct {
	Event                Event    `protobuf:"bytes,1,opt,name=event,proto3" json:"event"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchSubscriptionsResponse) Reset()         { *m = WatchSubscriptionsResponse{} }
func (m *WatchSubscriptionsResponse) String() string { return proto.CompactTextString(m) }
func (*WatchSubscriptionsResponse) ProtoMessage()    {}
func (*WatchSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7afcf53552ff323b, []int{14}
}
func (m *WatchSubscriptionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchSubscriptionsResponse.Unmarshal(m, b)
}
func (m *WatchSubscriptionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchSubscriptionsResponse.Marshal(b, m, deterministic)
}
func (m *WatchSubscriptionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchSubscriptionsResponse.Merge(m, src)
}
func (m *WatchSubscriptionsResponse) XXX_Size() int {
	return xxx_messageInfo_WatchSubscriptionsResponse.Size(m)
}
func (m *WatchSubscriptionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchSubscriptionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchSubscriptionsResponse proto.InternalMessageInfo

func (m *WatchSubscriptionsResponse) GetEvent() Event {
	if m != nil {
		return m.Event
	}
	return Event{}
}

func init() {
	proto.RegisterEnum("e2sub.subscription.Status", Status_name, Status_value)
	proto.RegisterEnum("e2sub.subscription.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("e2sub.subscription.EncodingType", EncodingType_name, EncodingType_value)
	proto.RegisterType((*Lifecycle)(nil), "e2sub.subscription.Lifecycle")
	proto.RegisterType((*Event)(nil), "e2sub.subscription.Event")
	proto.RegisterType((*ServiceModel)(nil), "e2sub.subscription.ServiceModel")
	proto.RegisterType((*Payload)(nil), "e2sub.subscription.Payload")
	proto.RegisterType((*Subscription)(nil), "e2sub.subscription.Subscription")
	proto.RegisterType((*AddSubscriptionRequest)(nil), "e2sub.subscription.AddSubscriptionRequest")
	proto.RegisterType((*AddSubscriptionResponse)(nil), "e2sub.subscription.AddSubscriptionResponse")
	proto.RegisterType((*RemoveSubscriptionRequest)(nil), "e2sub.subscription.RemoveSubscriptionRequest")
	proto.RegisterType((*RemoveSubscriptionResponse)(nil), "e2sub.subscription.RemoveSubscriptionResponse")
	proto.RegisterType((*GetSubscriptionRequest)(nil), "e2sub.subscription.GetSubscriptionRequest")
	proto.RegisterType((*GetSubscriptionResponse)(nil), "e2sub.subscription.GetSubscriptionResponse")
	proto.RegisterType((*ListSubscriptionsRequest)(nil), "e2sub.subscription.ListSubscriptionsRequest")
	proto.RegisterType((*ListSubscriptionsResponse)(nil), "e2sub.subscription.ListSubscriptionsResponse")
	proto.RegisterType((*WatchSubscriptionsRequest)(nil), "e2sub.subscription.WatchSubscriptionsRequest")
	proto.RegisterType((*WatchSubscriptionsResponse)(nil), "e2sub.subscription.WatchSubscriptionsResponse")
}

func init() { proto.RegisterFile("api/e2sub/subscription.proto", fileDescriptor_7afcf53552ff323b) }

var fileDescriptor_7afcf53552ff323b = []byte{
	// 801 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xe2, 0x56,
	0x14, 0x8e, 0xcd, 0x9f, 0x39, 0xe3, 0xc9, 0xb8, 0x57, 0xd3, 0x8c, 0x71, 0x53, 0x81, 0xbc, 0xa2,
	0xb4, 0x43, 0x3a, 0xae, 0x92, 0xfe, 0x6c, 0x22, 0xa8, 0xaf, 0x22, 0x22, 0x02, 0xe8, 0x42, 0xd3,
	0xaa, 0x8b, 0x5a, 0x06, 0xdf, 0xa4, 0x8e, 0x08, 0x76, 0xb1, 0x41, 0xe2, 0x05, 0xfa, 0x6c, 0xdd,
	0xf4, 0x15, 0x58, 0xe4, 0x31, 0xb2, 0xaa, 0x7c, 0xed, 0x50, 0x03, 0x97, 0x88, 0x48, 0xd9, 0xdd,
	0xc3, 0xf9, 0xce, 0xcf, 0xf7, 0xf9, 0x9c, 0x23, 0xe0, 0xd8, 0xf6, 0xdd, 0x13, 0x6a, 0x04, 0xb3,
	0xe1, 0x49, 0x30, 0x1b, 0x06, 0xa3, 0xa9, 0xeb, 0x87, 0xae, 0x37, 0xa9, 0xfb, 0x53, 0x2f, 0xf4,
	0x10, 0x62, 0x9e, 0x7a, 0xda, 0xa3, 0xbd, 0xbf, 0xf5, 0x6e, 0x3d, 0xe6, 0x3e, 0x89, 0x5e, 0x31,
	0x52, 0x3f, 0x87, 0x62, 0xdb, 0xbd, 0xa1, 0xa3, 0xc5, 0x68, 0x4c, 0x91, 0x01, 0xf9, 0x20, 0xb4,
	0xc3, 0x59, 0xa0, 0x0a, 0x15, 0xa1, 0x7a, 0x68, 0x68, 0xf5, 0xed, 0x3c, 0xf5, 0x3e, 0x43, 0x90,
	0x04, 0xa9, 0xff, 0x2d, 0x40, 0x0e, 0xcf, 0xe9, 0x24, 0x44, 0x9f, 0x20, 0x1b, 0x2e, 0x7c, 0x9a,
	0xc4, 0x7e, 0xc9, 0x8b, 0x65, 0xc0, 0xc1, 0xc2, 0xa7, 0x84, 0x41, 0xd1, 0x25, 0xc8, 0x69, 0xbf,
	0x2a, 0x56, 0x84, 0xea, 0x1b, 0xa3, 0xc2, 0x2d, 0x9b, 0x32, 0x9a, 0xd9, 0x7f, 0x96, 0xe5, 0x03,
	0xb2, 0x16, 0xab, 0xff, 0x00, 0x72, 0x9f, 0x4e, 0xe7, 0xee, 0x88, 0x5e, 0x79, 0x0e, 0x1d, 0xa3,
	0x2a, 0x88, 0xae, 0xa3, 0x66, 0x2b, 0x42, 0xb5, 0xd8, 0x54, 0x1f, 0x96, 0x65, 0xb1, 0x65, 0x3e,
	0x2e, 0xcb, 0x87, 0x69, 0x4c, 0xcb, 0x24, 0xa2, 0xeb, 0xe8, 0x37, 0x50, 0xe8, 0xd9, 0x8b, 0xb1,
	0x67, 0x3b, 0x08, 0xc3, 0x5b, 0x3a, 0x19, 0x79, 0x8e, 0x3b, 0xb9, 0xb5, 0x52, 0x64, 0xb8, 0x1d,
	0xe1, 0x04, 0xc8, 0xf8, 0xc8, 0x34, 0x65, 0xa1, 0xf7, 0x90, 0x1b, 0x2e, 0x42, 0x1a, 0x30, 0x42,
	0x32, 0x89, 0x0d, 0xfd, 0x51, 0x04, 0x39, 0x4d, 0x03, 0x1d, 0xb3, 0x16, 0x05, 0xd6, 0xa2, 0xbc,
	0x6a, 0x51, 0x8c, 0xdb, 0x42, 0x55, 0x90, 0xa6, 0x74, 0xee, 0x06, 0x4f, 0xc2, 0x64, 0x9b, 0xf2,
	0xe3, 0xb2, 0x2c, 0x91, 0xe4, 0x37, 0xb2, 0xf2, 0xa2, 0xaf, 0x20, 0x6f, 0xfb, 0xbe, 0xe5, 0x3a,
	0x6a, 0x86, 0xe5, 0x42, 0x0f, 0xcb, 0x72, 0xae, 0xe1, 0xfb, 0x2c, 0x5d, 0xfc, 0x20, 0x39, 0xdb,
	0xf7, 0x5b, 0x0e, 0x3a, 0x03, 0xa0, 0x86, 0x35, 0xf1, 0x1c, 0x6a, 0xad, 0xa9, 0x23, 0x61, 0xa3,
	0xe3, 0x39, 0x94, 0x45, 0xac, 0xde, 0x44, 0xa2, 0xf1, 0x8b, 0x09, 0x13, 0xc4, 0xca, 0x59, 0xf7,
	0x91, 0x74, 0x6a, 0xee, 0x99, 0x4f, 0x95, 0x92, 0x98, 0xc8, 0x41, 0xfa, 0xa3, 0x9c, 0x42, 0xc1,
	0x8f, 0xa5, 0x56, 0xf3, 0x2c, 0xc1, 0x17, 0xbc, 0x04, 0xc9, 0xd7, 0x20, 0x4f, 0x58, 0xd4, 0x80,
	0xe2, 0xf8, 0x69, 0x4a, 0xd5, 0x02, 0x0b, 0xe4, 0xce, 0xd7, 0x6a, 0x94, 0x93, 0x09, 0xf9, 0x3f,
	0x4a, 0xff, 0x03, 0x8e, 0x1a, 0x8e, 0x93, 0x96, 0x9f, 0xd0, 0xbf, 0x66, 0x34, 0x08, 0x91, 0xb9,
	0x31, 0x84, 0xc2, 0x7e, 0x43, 0xb8, 0x31, 0x7e, 0x16, 0x7c, 0xd8, 0xca, 0x1f, 0xf8, 0xde, 0x24,
	0xa0, 0xaf, 0x54, 0xe0, 0x47, 0x28, 0x11, 0x7a, 0xef, 0xcd, 0x29, 0x8f, 0xc3, 0xb3, 0x93, 0xa4,
	0x1f, 0x83, 0xc6, 0x0b, 0x8d, 0xdb, 0xd3, 0xcf, 0xe0, 0xe8, 0x82, 0x86, 0x2f, 0xcf, 0x6a, 0xc1,
	0x87, 0xad, 0xb8, 0x57, 0x65, 0xac, 0x81, 0xda, 0x76, 0x83, 0xb5, 0x0a, 0x41, 0xd2, 0x9a, 0xee,
	0x42, 0x89, 0xe3, 0x4b, 0xca, 0xb7, 0xe1, 0x6d, 0x3a, 0x51, 0x74, 0xce, 0x32, 0x2f, 0xb8, 0x2b,
	0xeb, 0xc1, 0xfa, 0xf7, 0x50, 0xfa, 0xd5, 0x0e, 0x47, 0x7f, 0xf2, 0xfa, 0x40, 0x1a, 0x48, 0x13,
	0x6f, 0x4a, 0xfd, 0xb1, 0xbd, 0x60, 0x2c, 0x25, 0xb2, 0xb2, 0xf5, 0x3e, 0x68, 0xbc, 0xc0, 0xa4,
	0xc9, 0x53, 0xc8, 0xd1, 0xe8, 0x1c, 0x26, 0xe2, 0x94, 0x76, 0xde, 0xcb, 0xa4, 0xab, 0x18, 0x5d,
	0xab, 0x42, 0x3e, 0xbe, 0xc0, 0x08, 0x20, 0xdf, 0xf8, 0x79, 0xd0, 0xba, 0xc6, 0xca, 0x01, 0x42,
	0x70, 0xd8, 0xc3, 0x1d, 0xb3, 0xd5, 0xb9, 0xb0, 0x4c, 0xdc, 0xc6, 0x03, 0xac, 0x08, 0xb5, 0x9f,
	0xa0, 0xb8, 0xba, 0xb7, 0x48, 0x82, 0x6c, 0xa7, 0xdb, 0x89, 0xa0, 0x45, 0xc8, 0x35, 0x4c, 0x13,
	0x9b, 0x8a, 0x80, 0xde, 0x40, 0xe1, 0x97, 0x9e, 0xd9, 0x18, 0x60, 0x53, 0x11, 0x23, 0x83, 0xe0,
	0xab, 0xee, 0x35, 0x36, 0x95, 0x4c, 0xed, 0x1c, 0xe4, 0xf4, 0x79, 0x8b, 0x82, 0x7a, 0xa4, 0x3b,
	0xe8, 0x2a, 0x07, 0x48, 0x06, 0xa9, 0xd1, 0xef, 0x7c, 0xb2, 0x7a, 0x98, 0x28, 0xc2, 0xca, 0xfa,
	0x0d, 0x13, 0x45, 0x8c, 0xaa, 0x5c, 0xf6, 0xbb, 0x1d, 0x25, 0x63, 0xfc, 0x9b, 0x85, 0xcf, 0xb1,
	0x91, 0x66, 0x9e, 0x5c, 0x05, 0x74, 0x07, 0xef, 0x36, 0x16, 0x05, 0xd5, 0x78, 0xdc, 0xf9, 0xdb,
	0xaa, 0x7d, 0xbd, 0x17, 0x36, 0xd1, 0x38, 0x00, 0xb4, 0x3d, 0xf8, 0xe8, 0x23, 0x2f, 0xc5, 0xce,
	0xdd, 0xd2, 0xea, 0xfb, 0xc2, 0x93, 0xa2, 0x77, 0xf0, 0x6e, 0x63, 0x2f, 0xf8, 0x04, 0xf9, 0x4b,
	0xc7, 0x27, 0xb8, 0x6b, 0xd1, 0x7c, 0xf8, 0x6c, 0x6b, 0x0d, 0xd0, 0x37, 0xfc, 0xd3, 0xc8, 0xdf,
	0x24, 0xed, 0xe3, 0x9e, 0xe8, 0xa4, 0xe2, 0x0c, 0xd0, 0xf6, 0x50, 0xf3, 0x25, 0xdd, 0xb9, 0x35,
	0x7c, 0x49, 0x77, 0xef, 0xca, 0xb7, 0x42, 0x53, 0xfd, 0xfd, 0x88, 0xff, 0x8f, 0x67, 0x98, 0x67,
	0x7f, 0x64, 0xbe, 0xfb, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xf8, 0xc4, 0xd4, 0x12, 0x09, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// E2SubscriptionServiceClient is the client API for E2SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type E2SubscriptionServiceClient interface {
	// AddSubscription establishes E2 subscriptions on E2 Node.
	AddSubscription(ctx context.Context, in *AddSubscriptionRequest, opts ...grpc.CallOption) (*AddSubscriptionResponse, error)
	// RemoveSubscription removes E2 subscriptions on E2 Node.
	RemoveSubscription(ctx context.Context, in *RemoveSubscriptionRequest, opts ...grpc.CallOption) (*RemoveSubscriptionResponse, error)
	// GetSubscription retrieves information about a specific subscription in the list of existing subscriptions
	GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error)
	// ListSubscriptions returns the list of current existing subscriptions
	ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error)
	// WatchSubscriptions returns a stream of subscription changes
	WatchSubscriptions(ctx context.Context, in *WatchSubscriptionsRequest, opts ...grpc.CallOption) (E2SubscriptionService_WatchSubscriptionsClient, error)
}

type e2SubscriptionServiceClient struct {
	cc *grpc.ClientConn
}

func NewE2SubscriptionServiceClient(cc *grpc.ClientConn) E2SubscriptionServiceClient {
	return &e2SubscriptionServiceClient{cc}
}

func (c *e2SubscriptionServiceClient) AddSubscription(ctx context.Context, in *AddSubscriptionRequest, opts ...grpc.CallOption) (*AddSubscriptionResponse, error) {
	out := new(AddSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/e2sub.subscription.E2SubscriptionService/AddSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2SubscriptionServiceClient) RemoveSubscription(ctx context.Context, in *RemoveSubscriptionRequest, opts ...grpc.CallOption) (*RemoveSubscriptionResponse, error) {
	out := new(RemoveSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/e2sub.subscription.E2SubscriptionService/RemoveSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2SubscriptionServiceClient) GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error) {
	out := new(GetSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/e2sub.subscription.E2SubscriptionService/GetSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2SubscriptionServiceClient) ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error) {
	out := new(ListSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/e2sub.subscription.E2SubscriptionService/ListSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2SubscriptionServiceClient) WatchSubscriptions(ctx context.Context, in *WatchSubscriptionsRequest, opts ...grpc.CallOption) (E2SubscriptionService_WatchSubscriptionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_E2SubscriptionService_serviceDesc.Streams[0], "/e2sub.subscription.E2SubscriptionService/WatchSubscriptions", opts...)
	if err != nil {
		return nil, err
	}
	x := &e2SubscriptionServiceWatchSubscriptionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type E2SubscriptionService_WatchSubscriptionsClient interface {
	Recv() (*WatchSubscriptionsResponse, error)
	grpc.ClientStream
}

type e2SubscriptionServiceWatchSubscriptionsClient struct {
	grpc.ClientStream
}

func (x *e2SubscriptionServiceWatchSubscriptionsClient) Recv() (*WatchSubscriptionsResponse, error) {
	m := new(WatchSubscriptionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// E2SubscriptionServiceServer is the server API for E2SubscriptionService service.
type E2SubscriptionServiceServer interface {
	// AddSubscription establishes E2 subscriptions on E2 Node.
	AddSubscription(context.Context, *AddSubscriptionRequest) (*AddSubscriptionResponse, error)
	// RemoveSubscription removes E2 subscriptions on E2 Node.
	RemoveSubscription(context.Context, *RemoveSubscriptionRequest) (*RemoveSubscriptionResponse, error)
	// GetSubscription retrieves information about a specific subscription in the list of existing subscriptions
	GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error)
	// ListSubscriptions returns the list of current existing subscriptions
	ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error)
	// WatchSubscriptions returns a stream of subscription changes
	WatchSubscriptions(*WatchSubscriptionsRequest, E2SubscriptionService_WatchSubscriptionsServer) error
}

// UnimplementedE2SubscriptionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedE2SubscriptionServiceServer struct {
}

func (*UnimplementedE2SubscriptionServiceServer) AddSubscription(ctx context.Context, req *AddSubscriptionRequest) (*AddSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubscription not implemented")
}
func (*UnimplementedE2SubscriptionServiceServer) RemoveSubscription(ctx context.Context, req *RemoveSubscriptionRequest) (*RemoveSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubscription not implemented")
}
func (*UnimplementedE2SubscriptionServiceServer) GetSubscription(ctx context.Context, req *GetSubscriptionRequest) (*GetSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (*UnimplementedE2SubscriptionServiceServer) ListSubscriptions(ctx context.Context, req *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (*UnimplementedE2SubscriptionServiceServer) WatchSubscriptions(req *WatchSubscriptionsRequest, srv E2SubscriptionService_WatchSubscriptionsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchSubscriptions not implemented")
}

func RegisterE2SubscriptionServiceServer(s *grpc.Server, srv E2SubscriptionServiceServer) {
	s.RegisterService(&_E2SubscriptionService_serviceDesc, srv)
}

func _E2SubscriptionService_AddSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2SubscriptionServiceServer).AddSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e2sub.subscription.E2SubscriptionService/AddSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2SubscriptionServiceServer).AddSubscription(ctx, req.(*AddSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2SubscriptionService_RemoveSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2SubscriptionServiceServer).RemoveSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e2sub.subscription.E2SubscriptionService/RemoveSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2SubscriptionServiceServer).RemoveSubscription(ctx, req.(*RemoveSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2SubscriptionService_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2SubscriptionServiceServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e2sub.subscription.E2SubscriptionService/GetSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2SubscriptionServiceServer).GetSubscription(ctx, req.(*GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2SubscriptionService_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2SubscriptionServiceServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e2sub.subscription.E2SubscriptionService/ListSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2SubscriptionServiceServer).ListSubscriptions(ctx, req.(*ListSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2SubscriptionService_WatchSubscriptions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchSubscriptionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(E2SubscriptionServiceServer).WatchSubscriptions(m, &e2SubscriptionServiceWatchSubscriptionsServer{stream})
}

type E2SubscriptionService_WatchSubscriptionsServer interface {
	Send(*WatchSubscriptionsResponse) error
	grpc.ServerStream
}

type e2SubscriptionServiceWatchSubscriptionsServer struct {
	grpc.ServerStream
}

func (x *e2SubscriptionServiceWatchSubscriptionsServer) Send(m *WatchSubscriptionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _E2SubscriptionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "e2sub.subscription.E2SubscriptionService",
	HandlerType: (*E2SubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSubscription",
			Handler:    _E2SubscriptionService_AddSubscription_Handler,
		},
		{
			MethodName: "RemoveSubscription",
			Handler:    _E2SubscriptionService_RemoveSubscription_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _E2SubscriptionService_GetSubscription_Handler,
		},
		{
			MethodName: "ListSubscriptions",
			Handler:    _E2SubscriptionService_ListSubscriptions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchSubscriptions",
			Handler:       _E2SubscriptionService_WatchSubscriptions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/e2sub/subscription.proto",
}
