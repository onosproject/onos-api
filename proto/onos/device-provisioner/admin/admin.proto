// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

// Package admin defines the administrative gRPC interfaces.
package onos.deviceprovisioner.admin;

import "onos/p4rt/v1/pipeline_config.proto";
import "gogoproto/gogo.proto";

// PipelineConfigService
service PipelineConfigService {
  // AddPipeline registers new pipeline configuration
  rpc AddPipeline(AddPipelineRequest) returns (AddPipelineResponse);

  // DeletePipeline unregisters new pipeline configuration
  rpc DeletePipeline(DeletePipelineRequest) returns (DeletePipelineResponse);

  // GetPipeline returns pipeline configuration based on a given ID
  rpc GetPipeline (GetPipelineRequest) returns (GetPipelineResponse);

  // List returns all registered pipelines
  rpc ListPipelines (ListPipelinesRequest) returns (stream ListPipelinesResponse);

  // Watch returns a stream of pipeline change notifications
  rpc WatchPipelines (WatchPipelinesRequest) returns (stream WatchPipelinesResponse);
}


message AddPipelineRequest {

}

message AddPipelineResponse {

}

message DeletePipelineRequest {

}

message DeletePipelineResponse {

}

message GetPipelineRequest {
  string pipelineconfig_id = 1 [(gogoproto.customname) = "PipelineConfigID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/p4rt/v1.PipelineConfigID"];

}

message GetPipelineResponse {
  onos.p4rt.v1.PipelineConfig pipelineconfig = 1;

}

message ListPipelinesRequest {}

message ListPipelinesResponse {
  onos.p4rt.v1.PipelineConfig pipelineconfig = 1;
}

message WatchPipelinesRequest {
  string pipelineconfig_id = 1 [(gogoproto.customname) = "PipelineConfigID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/p4rt/v1.PipelineConfigID"];
  bool noreplay = 2;

}

message WatchPipelinesResponse {
  onos.p4rt.v1.PipelineConfig pipelineconfig = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

}