/*
SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: LicenseRef-ONF-Member-1.0
*/

syntax = "proto3";

package onos.ransim.model;

import "gogoproto/gogo.proto";
import "onos/ransim/types/types.proto";

// Model provides means to create, delete and read RAN simulation model.
service NodeModel {
    rpc GetPlmnID(PlmnIDRequest) returns (PlmnIDResponse);

    rpc CreateNode(CreateNodeRequest) returns (CreateNodeResponse);
    rpc GetNode(GetNodeRequest) returns (GetNodeResponse);
    rpc UpdateNode(UpdateNodeRequest) returns (UpdateNodeResponse);
    rpc DeleteNode(DeleteNodeRequest) returns (DeleteNodeResponse);
    rpc WatchNodes(WatchNodesRequest) returns (stream WatchNodesResponse);
    rpc ListNodes(ListNodesRequest) returns (stream ListNodesResponse);
    rpc AgentControl(AgentControlRequest) returns (AgentControlResponse);
}

message PlmnIDRequest {
}

message PlmnIDResponse {
    uint32 plmnid = 1 [(gogoproto.customname) = "PlmnID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.PlmnID"];
}


// CreateNodeRequest create a node request
message CreateNodeRequest {
    ransim.types.Node node = 1;
}

// CreateNodeResponse create a node response
message CreateNodeResponse {
}

// GetNodeRequest get a node request
message GetNodeRequest {
    uint32 enbid = 1 [(gogoproto.customname) = "EnbID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.EnbID"];
}

// GetNodeResponse get a node response
message GetNodeResponse {
    ransim.types.Node node = 1;
}

// UpdateNodeRequest update a node request
message UpdateNodeRequest {
    ransim.types.Node node = 1;
}

// UpdateNodeResponse update a node response
message UpdateNodeResponse {
}

// DeleteNodeRequest delete a node request
message DeleteNodeRequest {
    uint32 enbid = 1 [(gogoproto.customname) = "EnbID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.EnbID"];
}

// DeleteNodeResponse delete a node response
message DeleteNodeResponse {
}

message ListNodesRequest {
}

message ListNodesResponse {
    ransim.types.Node node = 1;
}

message WatchNodesRequest {
    bool no_replay = 1;
    bool no_subscribe = 2;
}

message WatchNodesResponse {
    ransim.types.Node node = 1;
    EventType type = 2;
}

message AgentControlRequest {
    uint32 enbid = 1 [(gogoproto.customname) = "EnbID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.EnbID"];

    string command = 2; // start, stop, drop, reconnect, etc.

    repeated string args = 3; // optional command parameters
}

message AgentControlResponse {
    ransim.types.Node node = 1;
}


// Model provides means to create, delete and read RAN simulation model.
service CellModel {
    rpc CreateCell(CreateCellRequest) returns (CreateCellResponse);
    rpc DeleteCell(DeleteCellRequest) returns (DeleteCellResponse);
    rpc UpdateCell(UpdateCellRequest) returns (UpdateCellResponse);
    rpc GetCell(GetCellRequest) returns (GetCellResponse);
    rpc WatchCells(WatchCellsRequest) returns (stream WatchCellsResponse);
    rpc ListCells(ListCellsRequest) returns (stream ListCellsResponse);
}


message CreateCellRequest {
    ransim.types.Cell Cell = 1;
}

message CreateCellResponse {
}

message GetCellRequest {
    uint32 ecgi = 1 [(gogoproto.customname) = "ECGI", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.ECGI"];
}

message GetCellResponse {
    ransim.types.Cell Cell = 1;
}

message UpdateCellRequest {
    ransim.types.Cell Cell = 1;
}

message UpdateCellResponse {
}

message DeleteCellRequest {
    uint32 enbid = 1 [(gogoproto.customname) = "ECGI", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.ECGI"];
}

message DeleteCellResponse {
}

message WatchCellsRequest {
    bool no_replay = 1;
    bool no_subscribe = 2;
}

message WatchCellsResponse {
    ransim.types.Cell Cell = 1;
    EventType type = 2;
}

message ListCellsRequest {
}

message ListCellsResponse {
    ransim.types.Cell Cell = 1;
}



// Change event type
enum EventType {
    // NONE indicates this response represents a pre-existing entity
    NONE = 0;

    // CREATED indicates a new entity was created
    CREATED = 1;

    // UPDATED indicates an existing entity was updated
    UPDATED = 2;

    // DELETED indicates an entity was deleted
    DELETED = 3;
}
