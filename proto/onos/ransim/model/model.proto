// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package onos.ransim.model;

import "gogoproto/gogo.proto";
import "onos/ransim/types/types.proto";


// ModelService provides means to clear and load node and cell model in bulk
service ModelService {
    rpc Load(LoadRequest) returns (LoadResponse);
    rpc Clear(ClearRequest) returns (ClearResponse);
}

message DataSet {
    string type = 1;
    bytes data = 2;
}

message LoadRequest {
    repeated DataSet dataSet = 1;
    bool resume = 2;
}

message LoadResponse {
}

message ClearRequest {
    bool resume = 1;
}

message ClearResponse {
}


// NodeModel provides means to create, delete and read simulated RAN nodes.
service NodeModel {
    rpc GetPlmnID(PlmnIDRequest) returns (PlmnIDResponse);

    rpc CreateNode(CreateNodeRequest) returns (CreateNodeResponse);
    rpc GetNode(GetNodeRequest) returns (GetNodeResponse);
    rpc UpdateNode(UpdateNodeRequest) returns (UpdateNodeResponse);
    rpc DeleteNode(DeleteNodeRequest) returns (DeleteNodeResponse);
    rpc WatchNodes(WatchNodesRequest) returns (stream WatchNodesResponse);
    rpc ListNodes(ListNodesRequest) returns (stream ListNodesResponse);
    rpc AgentControl(AgentControlRequest) returns (AgentControlResponse);
}

message PlmnIDRequest {
}

message PlmnIDResponse {
    uint32 plmnid = 1 [(gogoproto.customname) = "PlmnID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.PlmnID"];
}


// CreateNodeRequest create a node request
message CreateNodeRequest {
    ransim.types.Node node = 1;
}

// CreateNodeResponse create a node response
message CreateNodeResponse {
}

// GetNodeRequest get a node request
message GetNodeRequest {
    uint64 enbid = 1 [(gogoproto.customname) = "GnbID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.GnbID"];
}

// GetNodeResponse get a node response
message GetNodeResponse {
    ransim.types.Node node = 1;
}

// UpdateNodeRequest update a node request
message UpdateNodeRequest {
    ransim.types.Node node = 1;
}

// UpdateNodeResponse update a node response
message UpdateNodeResponse {
}

// DeleteNodeRequest delete a node request
message DeleteNodeRequest {
    uint64 enbid = 1 [(gogoproto.customname) = "GnbID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.GnbID"];
}

// DeleteNodeResponse delete a node response
message DeleteNodeResponse {
}

message ListNodesRequest {
}

message ListNodesResponse {
    ransim.types.Node node = 1;
}

message WatchNodesRequest {
    bool no_replay = 1;
    bool no_subscribe = 2;
}

message WatchNodesResponse {
    ransim.types.Node node = 1;
    EventType type = 2;
}

message AgentControlRequest {
    uint64 enbid = 1 [(gogoproto.customname) = "GnbID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.GnbID"];

    string command = 2; // start, stop, drop, reconnect, etc.

    repeated string args = 3; // optional command parameters
}

message AgentControlResponse {
    ransim.types.Node node = 1;
}


// CellModel provides means to create, delete and read simulated RAN cells.
service CellModel {
    rpc CreateCell(CreateCellRequest) returns (CreateCellResponse);
    rpc DeleteCell(DeleteCellRequest) returns (DeleteCellResponse);
    rpc UpdateCell(UpdateCellRequest) returns (UpdateCellResponse);
    rpc GetCell(GetCellRequest) returns (GetCellResponse);
    rpc WatchCells(WatchCellsRequest) returns (stream WatchCellsResponse);
    rpc ListCells(ListCellsRequest) returns (stream ListCellsResponse);
}


message CreateCellRequest {
    ransim.types.Cell cell = 1;
}

message CreateCellResponse {
}

message GetCellRequest {
    uint64 ecgi = 1 [(gogoproto.customname) = "NCGI", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.NCGI"];
}

message GetCellResponse {
    ransim.types.Cell cell = 1;
}

message UpdateCellRequest {
    ransim.types.Cell cell = 1;
}

message UpdateCellResponse {
}

message DeleteCellRequest {
    uint64 enbid = 1 [(gogoproto.customname) = "NCGI", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.NCGI"];
}

message DeleteCellResponse {
}

message WatchCellsRequest {
    bool no_replay = 1;
    bool no_subscribe = 2;
}

message WatchCellsResponse {
    ransim.types.Cell cell = 1;
    EventType type = 2;
}

message ListCellsRequest {
}

message ListCellsResponse {
    ransim.types.Cell Cell = 1;
}


// RouteModel provides means to create, delete and read simulated mobile UE routes.
service RouteModel {
    rpc CreateRoute(CreateRouteRequest) returns (CreateRouteResponse);
    rpc DeleteRoute(DeleteRouteRequest) returns (DeleteRouteResponse);
    rpc GetRoute(GetRouteRequest) returns (GetRouteResponse);
    rpc WatchRoutes(WatchRoutesRequest) returns (stream WatchRoutesResponse);
    rpc ListRoutes(ListRoutesRequest) returns (stream ListRoutesResponse);
}

message CreateRouteRequest {
    ransim.types.Route route = 1;
}

message CreateRouteResponse {
}

message GetRouteRequest {
    uint32 imsi = 1 [(gogoproto.customname) = "IMSI", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.IMSI"];
}

message GetRouteResponse {
    ransim.types.Route route = 1;
}

message DeleteRouteRequest {
    uint64 enbid = 1 [(gogoproto.customname) = "IMSI", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.IMSI"];
}

message DeleteRouteResponse {
}

message WatchRoutesRequest {
    bool no_replay = 1;
    bool no_subscribe = 2;
}

message WatchRoutesResponse {
    ransim.types.Route route = 1;
    EventType type = 2;
}

message ListRoutesRequest {
}

message ListRoutesResponse {
    ransim.types.Route route = 1;
}

// UEModel provides means to simulate mobile UEs.
service UEModel {
    rpc GetUE(GetUERequest) returns (GetUEResponse);
    rpc MoveToCell(MoveToCellRequest) returns (MoveToCellResponse);
    rpc MoveToLocation(MoveToLocationRequest) returns (MoveToLocationResponse);
    rpc DeleteUE(DeleteUERequest) returns (DeleteUEResponse);
    rpc WatchUEs(WatchUEsRequest) returns (stream WatchUEsResponse);
    rpc ListUEs(ListUEsRequest) returns (stream ListUEsResponse);

    rpc GetUECount(GetUECountRequest) returns (GetUECountResponse);
    rpc SetUECount(SetUECountRequest) returns (SetUECountResponse);
}

message GetUERequest {
    uint32 imsi = 1 [(gogoproto.customname) = "IMSI", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.IMSI"];
}

message GetUEResponse {
    ransim.types.Ue ue = 1;
}

message MoveToCellRequest {
    uint32 imsi = 1 [(gogoproto.customname) = "IMSI", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.IMSI"];
    uint32 ecgi = 2 [(gogoproto.customname) = "NCGI", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.NCGI"];
}

message MoveToCellResponse {
}

message MoveToLocationRequest {
    uint32 imsi = 1 [(gogoproto.customname) = "IMSI", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.IMSI"];
    ransim.types.Point location = 2;
    uint32 heading = 3;
}

message MoveToLocationResponse {
}

message DeleteUERequest {
    uint32 imsi = 1 [(gogoproto.customname) = "IMSI", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.IMSI"];
}

message DeleteUEResponse {
}

message WatchUEsRequest {
    bool no_replay = 1;
    bool no_subscribe = 2;
}

message WatchUEsResponse {
    ransim.types.Ue ue = 1;
    EventType type = 2;
}

message ListUEsRequest {
}

message ListUEsResponse {
    ransim.types.Ue ue = 1;
}

message GetUECountRequest {
}

message GetUECountResponse {
    uint32 count = 1;
}

message SetUECountRequest {
    uint32 count = 1;
}

message SetUECountResponse {
}


// Change event type
enum EventType {
    // NONE indicates this response represents a pre-existing entity
    NONE = 0;

    // CREATED indicates a new entity was created
    CREATED = 1;

    // UPDATED indicates an existing entity was updated
    UPDATED = 2;

    // DELETED indicates an entity was deleted
    DELETED = 3;
}
