/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package onos.ransim.trafficsim;

import "onos/ransim/types/types.proto";

// Traffic - provides a stream of traffic data to GUI
service Traffic {
    rpc GetMapLayout(MapLayoutRequest) returns (ransim.types.MapLayout);

    rpc ListRoutes(ListRoutesRequest) returns (stream ListRoutesResponse);

    rpc ListUes(ListUesRequest) returns (stream ListUesResponse);

    rpc WatchUes(WatchUesRequest) returns (stream WatchUesResponse);

    rpc SetNumberUEs(SetNumberUEsRequest) returns (SetNumberUEsResponse);

    rpc ResetMetrics(ResetMetricsMsg) returns (ResetMetricsMsg);
}

message MapLayoutRequest {
}

message ListRoutesRequest {
    bool no_replay = 1;
    bool no_subscribe = 2;
}

message ListRoutesResponse {
    // route is the route change on which the event occurred
    ransim.types.Route route = 1;

    // type is a qualification of the type of change being made
    Type type = 2;
}

message ListUesRequest {
}

message ListUesResponse {
    // Ue is the UserEquipment change on which the event occurred
    ransim.types.Ue ue = 1;

}

message WatchUesRequest {
    bool no_replay = 1;
    bool no_subscribe = 2;
}

message WatchUesResponse {
    // Ue is the UserEquipment change on which the event occurred
    ransim.types.Ue ue = 1;

    // type is a qualification of the type of change being made
    Type type = 2;

    // update_type is a qualification of the type of UE change
    UpdateType update_type = 3;
}


message SetNumberUEsRequest {
    uint32 number = 1;
}

message SetNumberUEsResponse {
    uint32 number = 1;
}

message ResetMetricsMsg {
}



// Change event type
enum Type {
    // NONE indicates this response does not represent a modification of the Change
    NONE = 0;

    // ADDED is an event which occurs when a Change is added to the topology
    ADDED = 1;

    // UPDATED is an event which occurs when a Change is updated
    UPDATED = 2;

    // REMOVED is an event which occurs when a Change is removed from the configuration
    REMOVED = 3;
}

// In the case of an update this helps qualify the update type - add items as necessary
enum UpdateType {
    NOUPDATETYPE = 0;

    // POSITION An update in position of UE only, without a change in the Tower affinity
    POSITION = 1;

    // TOWER An update in non-serving tower affinity (and also position) of UE
    TOWER = 2;

    // HANDOVER An update of the serving tower
    HANDOVER = 3;
}
