// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";
import "gogoproto/gogo.proto";
import "onos/p4rt/v1/object.proto";


package onos.p4rt.v1;

// PipelineConfig P4 device pipeline config
message PipelineConfig {
  ObjectMeta meta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

  // 'id' is a unique configuration identifier
  string id = 2 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "PipelineConfigID"];

  // 'target_id' is the target to which the desired target configuration applies
  string target_id = 3 [(gogoproto.customname) = "TargetID", (gogoproto.casttype) = "TargetID"];

  // 'cookie' to uniquely identify a forwarding-pipeline configuration among others managed by the same control plane
  Cookie cookie = 6;

  // 'ConfigurationStatus' is the current lifecycle status of the configuration
  PipelineConfigStatus status = 7 [(gogoproto.nullable) = false];

  // ConfigurationAction
  ConfigurationAction action = 8;

  // PipelineConfigSpec device pipeline config spec
  PipelineConfigSpec spec = 9;

}

// PipelineConfigSpec device pipeline configuration spec
message PipelineConfigSpec {
  // 'p4_device_config' P4 device configuration bytes
  bytes p4_device_config = 1;

  // TODO since p4 info is target agnostic, we can import it from P4runtime and use it as it is, a new version of proto compiler image is needed
  // 'p4_info' P4 info
  bytes p4_info = 2;
}

// Cookie
message Cookie {
  uint64 cookie = 1;
}

enum PipelineConfigState {
  // PIPELINE_CONFIG_PENDING indicates the pipeline configuration phase is pending
  PIPELINE_CONFIG_PENDING = 0;
  // PIPELINE_CONFIG_COMPLETE indicates the pipeline configuration phase is complete
  PIPELINE_CONFIG_COMPLETE = 1;
  // PIPELINE_CONFIG_FAILED indicates the pipeline configuration phase failed
  PIPELINE_CONFIG_FAILED = 2;
}

// ConfigurationAction
enum ConfigurationAction {
  UNSPECIFIED = 0;
  // Verifies that the target can realize the given config. The forwarding state in the target is not modified.
  VERIFY = 1;
  // Saves the config if the P4Runtime target can realize it. The forwarding state in the target is not modified.
  VERIFY_AND_SAVE = 2;
  // Saves and realizes the given config if the P4Runtime target can realize it. The forwarding state in the target is cleared.
  VERIFY_AND_COMMIT = 3;
  // Realizes the last saved, but not yet committed, config.
  // The forwarding state in the target is updated by replaying the write requests to the target device since the last config was saved
  COMMIT = 4;
  // Verifies, saves and realizes the given config, while preserving the forwarding state in the target.
  RECONCILE_AND_COMMIT = 5;
}


// PipelineConfigStatus pipelineConfig status
message PipelineConfigStatus {
  // 'PipelineConfigState' pipeline config state
   PipelineConfigState state = 1;

  // 'mastership' is the current mastership info for the configuration
  MastershipInfo mastership = 3 [(gogoproto.nullable) = false];

}

message MastershipInfo {
  string master = 1;
  uint64 term = 2 [(gogoproto.casttype) = "MastershipTerm"];
}

// ConfigurationEvent configuration store event
message ConfigurationEvent {
  // EventType configuration event types for configuration store
  enum EventType {
    // UNKNOWN indicates unknown configuration store event
    UNKNOWN = 0;
    // CREATED indicates the configuration entry in the store is created
    CREATED = 1;
    // UPDATED indicates the configuration entry in the store is updated
    UPDATED = 2;
    // DELETED indicates the configuration entry in the store is deleted
    DELETED = 3;
    // REPLAYED
    REPLAYED = 4;
  }

  // EventType configuration event type
  EventType type = 1;
  PipelineConfig pipeline_config = 2 [(gogoproto.nullable) = false];
}