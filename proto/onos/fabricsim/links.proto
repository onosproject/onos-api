// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package onos.fabricsim;

import "gogoproto/gogo.proto";

// Link describes a simulated link, i.e a link between two device or host ports
message Link {
    // unique port id and port type
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "LinkID"];

    // unique port ids of source and target ports
    string src_id = 2 [(gogoproto.customname) = "SrcID", (gogoproto.casttype) = "PortID"];
    string tgt_id = 3 [(gogoproto.customname) = "TgtID", (gogoproto.casttype) = "PortID"];

    // status (operational state derived from the status of its adjacent ports)
    LinkStatus status = 4; // read-only entity
}

// LinkStatus represents the operational status of the link, derived from the status of its adjacent ports
enum LinkStatus {
    LINK_DOWN = 0;
    LINK_UP = 1;
}

// LinkService provides means to control inventory of simulated links
service LinkService {
    // GetLinks gets a list of all simulated links
    rpc GetLinks(GetLinksRequest) returns (GetLinksResponse);

    // GetLink gets a specific link entry
    rpc GetLink(GetLinkRequest) returns (GetLinkResponse);

    // AddLink adds a new simulated link
    rpc AddLink(AddLinkRequest) returns (AddLinkRequest);

    // RemoveLink removes a simulated link
    rpc RemoveLink(RemoveLinkRequest) returns (RemoveLinkRequest);
}

message GetLinksRequest {
    // filters?
}

message GetLinksResponse {
    repeated Link links = 1;
}

message GetLinkRequest {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "LinkID"];
}

message GetLinkResponse {
    Link link = 1;
}

message AddLinkRequest {
    Link link = 1;
}

message AddLinkResponse {
}

message RemoveLinkRequest {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "LinkID"];
}

message RemoveLinkResponse {
}
