// SPDX-FileCopyrightText: 2022-present Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package onos.fabricsim;

import "gogoproto/gogo.proto";
import "onos/misc/misc.proto";

// Device describes a simulated switch or IPU
message Device {
    // unique device id and device type
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "DeviceID"];
    DeviceType type = 2;

    // list of ports
    repeated Port ports = 3;

    // control port for p4 and gnmi simulation
    int32 control_port = 4;

    // unique chassis ID
    uint64 chassis_id = 5 [(gogoproto.customname) = "ChassisID"];

    // gnmi models?
    // behavior?

    // forwarding pipeline information
    PipelineInfo pipeline_info = 6;

    // Screen coordinates
    onos.misc.GridPosition pos = 7;

    // Current connections and total connection count
    repeated onos.misc.Connection connections = 8;
    int32 total_connections = 9;

    // Cumulative I/O stats for the device P4Runtime, gNMI and gNOI agent(s)
    onos.misc.IOStats io_stats = 10 [(gogoproto.customname) = "IOStats"];
}

// DeviceType represents type of a device, i.e. switch, IPU, etc.
enum DeviceType {
    SWITCH = 0; // default assumption
    IPU = 1;
}

// Port describes a simulated device port
message Port {
    // unique port id and port type
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "PortID"];

    // display/friendly name
    string name = 3;

    // port number
    uint32 number = 4;
    // sdn/internal port number
    uint32 internal_number = 5;

    // speed and status
    string speed = 6;
    bool enabled = 7;

    // p4 behaviors? (counters, etc.)
    // gnmi behaviors? (counters, etc.)
}

// PipelineInfo provides information about the currently deployed forwarding pipeline
message PipelineInfo {
    uint64 cookie = 1;
    bytes p4_info = 2;

    // summary information about tables, counters, meters, groups, etc.
    repeated EntitiesInfo tables = 3;
    repeated EntitiesInfo counters = 4;
    repeated EntitiesInfo meters = 5;
    repeated EntitiesInfo groups = 6;
    repeated EntitiesInfo multicast_groups = 7;
    repeated EntitiesInfo clone_sessions = 8;
}

// EntitiesInfo provides information about size of pipeline entities, tables, meters, counters
message EntitiesInfo {
    uint32 id = 1 [(gogoproto.customname) = "ID"];
    uint32 size = 2;
    string name = 3;
}

// DeviceService provides means to control inventory of simulated devices (switches and IPUs) and their ports
service DeviceService {
    // GetDevices gets a list of all simulated devices (switches and/or IPUs)
    rpc GetDevices(GetDevicesRequest) returns (GetDevicesResponse);

    // GetDevice gets a specific device entry
    rpc GetDevice(GetDeviceRequest) returns (GetDeviceResponse);

    // AddDevice creates a new simulated deviceand start its P4Runtime and gNMI services
    rpc AddDevice(AddDeviceRequest) returns (AddDeviceResponse);

    // RemoveDevice removes a simulated device
    rpc RemoveDevice(RemoveDeviceRequest) returns (RemoveDeviceResponse);

    // StopDevice stops the simulated deviceP4Runtime and gNMI services
    rpc StopDevice(StopDeviceRequest) returns (StopDeviceResponse);

    // StartDevice starts the simulated deviceP4Runtime and gNMI services
    rpc StartDevice(StartDeviceRequest) returns (StartDeviceResponse);

    // DisablePort disables the specified port
    rpc DisablePort(DisablePortRequest) returns (DisablePortResponse);

    // EnablePort enables the specified port
    rpc EnablePort(EnablePortRequest) returns (EnablePortResponse);

    // EmitLLDPPacket emits the specified LLDP packet on a given device port.
    rpc EmitLLDPPacket(EmitLLDPPacketRequest) returns (EmitLLDPPacketResponse);
}

message GetDevicesRequest {
    // filters?
}

message GetDevicesResponse {
    repeated Device devices = 1;
}

message GetDeviceRequest {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "DeviceID"];
}

message GetDeviceResponse {
    Device device = 1;
}

message AddDeviceRequest {
    Device device = 1;
}

message AddDeviceResponse {
}

message RemoveDeviceRequest {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "DeviceID"];
}

message RemoveDeviceResponse {
}

message StopDeviceRequest {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "DeviceID"];
    StopMode mode = 2;
}

// StopMode indicates whether to simulate orderly (administrative) or chaotic (power off) shutdown
enum StopMode {
    ORDERLY_STOP = 0;
    CHAOTIC_STOP = 1;
}

message StopDeviceResponse {
}

message StartDeviceRequest {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "DeviceID"];
}

message StartDeviceResponse {
}

message DisablePortRequest {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "PortID"];
    StopMode mode = 2;
}

message DisablePortResponse {
}

message EnablePortRequest {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "PortID"];
}

message EnablePortResponse {
}

message EmitLLDPPacketRequest {
    string port_id = 1  [(gogoproto.customname) = "PortID", (gogoproto.casttype) = "PortID"];
    bytes packet = 2;
}

message EmitLLDPPacketResponse {
}