/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

// Package onos.e2t.admin defines the administrative gRPC interfaces.
package onos.e2t.admin;

// UploadRegisterServiceModelRequest is for streaming a model plugin file to the server.
// There is a built in limit in gRPC of 4MB - plugin is usually around 20MB
// so break in to chunks of approx 1-2MB.
message UploadRegisterServiceModelRequest {
    // so_file is the name being streamed.
    string so_file = 1;
    // content is the bytes content.
    bytes content = 2;
}

// UploadRegisterServiceModelResponse carries status of model plugin registration.
message UploadRegisterServiceModelResponse {
    // name is name of the model plugin.
    string name = 1;
    // version is the semantic version of the model plugin.
    string version = 2;
}

// ListRegisteredServiceModelsResponse is general information about a service model plugin.
message ListRegisteredServiceModelsResponse {
    // name is the name given to the service model plugin - no spaces and title case.
    string name = 1;
    // version is the semantic version of the Plugin e.g. 1.0.0.
    string version = 2;
}

// ListRegisteredServiceModelsRequest carries data for querying registered service model plugins.
message ListRegisteredServiceModelsRequest {
    // An optional filter on the name of the model plugins to list.
    string model_name = 1;
    // An optional filter on the version of the model plugins to list
    string model_version = 2;
}


// ListE2NodeConnectionsRequest carries request for a list of E2 node SCTP connections.
message ListE2NodeConnectionsRequest {
}

// E2NodeConnectionType specifies the type of an E2 connection
enum E2NodeConnectionType {
    UNKNOWN = 0;
    G_NB = 1;
    E_NB = 2;
    ENG_MB = 3;
    NGE_NB = 4;
}

// ListE2NodeConnectionsResponse carries information about the SCTP connection to the remote E2 node.
message ListE2NodeConnectionsResponse {
    repeated string remote_ip = 1;
    uint32 remote_port = 2;
    string id = 3;
    string plmn_id = 4;
    E2NodeConnectionType connection_type = 5;
}

// DropE2NodeConnectionsRequest carries drop connection request
message DropE2NodeConnectionsRequest {
    repeated ListE2NodeConnectionsResponse connections = 1;
}

// DropE2NodeConnectionsResponse carries drop connection response
message DropE2NodeConnectionsResponse {
    repeated bool success = 1;
}

// E2TAdminService provides means for enhanced interactions with the ONOS RIC E2 Termination service.
service E2TAdminService {
    // UploadRegisterServiceModel uploads and adds the model plugin to the list of supported models.
    // The file is serialized in to Chunks of less than 4MB so as not to break the
    // gRPC byte array limit
    rpc UploadRegisterServiceModel (stream UploadRegisterServiceModelRequest) returns (UploadRegisterServiceModelResponse);

    // ListRegisteredServiceModels returns a stream of registered service models.
    rpc ListRegisteredServiceModels (ListRegisteredServiceModelsRequest) returns (stream ListRegisteredServiceModelsResponse);

    // ListE2NodeConnections returns a stream of existing SCTP connections.
    rpc ListE2NodeConnections (ListE2NodeConnectionsRequest) returns (stream ListE2NodeConnectionsResponse);
    // DropE2NodeConnections drops the specified E2 node SCTP connections
    rpc DropE2NodeConnections(DropE2NodeConnectionsRequest) returns (DropE2NodeConnectionsResponse);

    // ListAppConnections returns a stream of existing xApp connections
    //    rpc ListAppConnections(ListAppConnectionsRequest) returns (stream AppConnection);
    // DropAppConnections drops the specified xApp connections
    //    rpc DropAppConnections(DropAppConnectionsRequest) returns (DropAppConnectionsResponse);
}
