// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

// Package onos.e2t.e2.v1beta1 defines the interior gRPC interfaces for xApps to interact with E2T.
package onos.e2t.e2.v1beta1;

import "gogoproto/gogo.proto";
import "onos/e2t/e2/v1beta1/e2.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";


option (gogoproto.goproto_registration) = true;

service SubscriptionService {
    rpc Subscribe (SubscribeRequest) returns (stream SubscribeResponse);
    rpc Unsubscribe (UnsubscribeRequest) returns (UnsubscribeResponse);
}

message SubscribeRequest {
    RequestHeaders headers = 1 [(gogoproto.nullable) = false];
    string transaction_id = 2 [(gogoproto.customname) = "TransactionID", (gogoproto.casttype) = "TransactionID"];
    SubscriptionSpec subscription = 3 [(gogoproto.nullable) = false];
    google.protobuf.Duration transaction_timeout = 4 [(gogoproto.stdduration) = true];

}

message SubscribeResponse {
    ResponseHeaders headers = 1 [(gogoproto.nullable) = false];
    oneof message {
        Acknowledgement ack = 2;
        Indication indication = 3;
    }
}

message UnsubscribeRequest {
    RequestHeaders headers = 1 [(gogoproto.nullable) = false];
    string transaction_id = 2 [(gogoproto.customname) = "TransactionID", (gogoproto.casttype) = "TransactionID"];
}

message UnsubscribeResponse {
    ResponseHeaders headers = 1 [(gogoproto.nullable) = false];
}

message SubscriptionSpec {
    EventTrigger event_trigger = 1 [(gogoproto.nullable) = false];
    repeated Action actions = 2 [(gogoproto.nullable) = false];
}

message EventTrigger {
    bytes payload = 1;
}

message Action {
    int32 id = 1 [(gogoproto.customname) = "ID"];
    ActionType type = 2;
    bytes payload = 3;
    SubsequentAction subsequent_action = 4;
}

enum ActionType {
    ACTION_TYPE_REPORT = 0;
    ACTION_TYPE_INSERT = 1;
    ACTION_TYPE_POLICY = 2;
}

message SubsequentAction {
    SubsequentActionType type = 1;
    TimeToWait time_to_wait = 2;
}

enum SubsequentActionType {
    SUBSEQUENT_ACTION_TYPE_CONTINUE = 0;
    SUBSEQUENT_ACTION_TYPE_WAIT = 1;
}

enum TimeToWait {
    TIME_TO_WAIT_ZERO = 0;
    TIME_TO_WAIT_W1MS = 1;
    TIME_TO_WAIT_W2MS = 2;
    TIME_TO_WAIT_W5MS = 3;
    TIME_TO_WAIT_W10MS = 4;
    TIME_TO_WAIT_W20MS = 5;
    TIME_TO_WAIT_W30MS = 6;
    TIME_TO_WAIT_W40MS = 7;
    TIME_TO_WAIT_W50MS = 8;
    TIME_TO_WAIT_W100MS = 9;
    TIME_TO_WAIT_W200MS = 10;
    TIME_TO_WAIT_W500MS = 11;
    TIME_TO_WAIT_W1S = 12;
    TIME_TO_WAIT_W2S = 13;
    TIME_TO_WAIT_W5S = 14;
    TIME_TO_WAIT_W10S = 15;
    TIME_TO_WAIT_W20S = 16;
    TIME_TO_WAIT_W60S = 17;
}

message Acknowledgement {
    string channel_id = 1 [(gogoproto.customname) = "ChannelID", (gogoproto.casttype) = "ChannelID"];
}

message Indication {
    bytes header = 1;
    bytes payload = 2;
    bytes call_process_id = 3;
}

service SubscriptionAdminService {
    rpc GetChannel (GetChannelRequest) returns (GetChannelResponse);
    rpc ListChannels (ListChannelsRequest) returns (ListChannelsResponse);
    rpc WatchChannels (WatchChannelsRequest) returns (stream WatchChannelsResponse);

    rpc GetSubscription (GetSubscriptionRequest) returns (GetSubscriptionResponse);
    rpc ListSubscriptions (ListSubscriptionsRequest) returns (ListSubscriptionsResponse);
    rpc WatchSubscriptions (WatchSubscriptionsRequest) returns (stream WatchSubscriptionsResponse);
}

message GetChannelRequest {
    string channel_id = 1 [(gogoproto.customname) = "ChannelID", (gogoproto.casttype) = "ChannelID"];
}

message GetChannelResponse {
    Channel channel = 1 [(gogoproto.nullable) = false];
}

message ListChannelsRequest {

}

message ListChannelsResponse {
    repeated Channel channels = 1 [(gogoproto.nullable) = false];
}

message WatchChannelsRequest {
    bool no_replay = 1;
}

message WatchChannelsResponse {
    ChannelEvent event = 1 [(gogoproto.nullable) = false];
}

enum ChannelEventType {
    CHANNEL_EVENT_UNKNOWN = 0;
    CHANNEL_CREATED = 1;
    CHANNEL_UPDATED = 2;
    CHANNEL_DELETED = 3;
    CHANNEL_REPLAYED = 4;
}

message ChannelEvent {
    ChannelEventType type = 1;
    Channel channel = 2 [(gogoproto.nullable) = false];
}

message GetSubscriptionRequest {
    string subscription_id = 1 [(gogoproto.customname) = "SubscriptionID", (gogoproto.casttype) = "SubscriptionID"];
}

message GetSubscriptionResponse {
    Subscription subscription = 1 [(gogoproto.nullable) = false];
}

message ListSubscriptionsRequest {

}

message ListSubscriptionsResponse {
    repeated Subscription subscriptions = 1 [(gogoproto.nullable) = false];
}

message WatchSubscriptionsRequest {
    bool no_replay = 1;
}

message WatchSubscriptionsResponse {
    SubscriptionEvent event = 1 [(gogoproto.nullable) = false];
}

enum SubscriptionEventType {
    SUBSCRIPTION_EVENT_UNKNOWN = 0;
    SUBSCRIPTION_CREATED = 1;
    SUBSCRIPTION_UPDATED = 2;
    SUBSCRIPTION_DELETED = 3;
    SUBSCRIPTION_REPLAYED = 4;
}

message SubscriptionEvent {
    SubscriptionEventType type = 1;
    Subscription subscription = 2 [(gogoproto.nullable) = false];
}

// ChannelMeta contains metadata relating to a subscription channel
message ChannelMeta {
    // app_id is an identifier for the application that created the channel shared across all instances of the application
    string app_id = 1 [(gogoproto.customname) = "AppID", (gogoproto.casttype) = "AppID"];
    // app_instance_id is an identifier unique to a single node within the application that created the channel
    string app_instance_id = 2 [(gogoproto.customname) = "AppInstanceID", (gogoproto.casttype) = "AppInstanceID"];
    // e2_node_id is the identifier for the E2 node to which the subscription is targeted
    string e2_node_id = 3 [(gogoproto.casttype) = "E2NodeID", (gogoproto.customname) = "E2NodeID"];
    // transaction_id is a persistent identifier for the transaction
    string transaction_id = 4 [(gogoproto.customname) = "TransactionID", (gogoproto.casttype) = "TransactionID"];
    // subscription_id is the identifier for the underlying subscription
    string subscription_id = 5 [(gogoproto.customname) = "SubscriptionID", (gogoproto.casttype) = "SubscriptionID"];
    // service_model is the service model specification
    ServiceModel service_model = 6 [(gogoproto.nullable) = false];
    // encoding indicates the type of encoding used within the parent message
    Encoding encoding = 7;
    uint64 revision = 8 [(gogoproto.casttype) = "Revision"];
    repeated string finalizers = 9;
}

message Channel {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ChannelID"];
    ChannelMeta meta = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
    ChannelSpec spec = 3 [(gogoproto.nullable) = false];
    ChannelStatus status = 4 [(gogoproto.nullable) = false];
}

message ChannelSpec {
    SubscriptionSpec subscription = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
    google.protobuf.Duration transaction_timeout = 2 [(gogoproto.stdduration) = true];
}

message ChannelStatus {
    ChannelPhase phase = 1;
    ChannelState state = 2;
    Error error = 3;
    google.protobuf.Timestamp timestamp = 4 [(gogoproto.stdtime) = true];
    uint64 term = 5 [(gogoproto.casttype) = "TermID"];
    string master = 6 [(gogoproto.casttype) = "MasterID"];
}

enum ChannelPhase {
    CHANNEL_CLOSED = 0;
    CHANNEL_OPEN = 1;
}

enum ChannelState {
    // CHANNEL_PENDING indicates the channel phase is pending
    CHANNEL_PENDING = 0;
    // CHANNEL_COMPLETE indicates the channel phase is complete
    CHANNEL_COMPLETE = 1;
    // CHANNEL_FAILED indicates the channel phase failed
    CHANNEL_FAILED = 2;
}

message SubscriptionMeta {
    string e2_node_id = 1 [(gogoproto.casttype) = "E2NodeID", (gogoproto.customname) = "E2NodeID"];
    ServiceModel service_model = 2 [(gogoproto.nullable) = false];
    Encoding encoding = 3;
    uint64 revision = 4 [(gogoproto.casttype) = "Revision"];
    repeated string finalizers = 5;
}

message Subscription {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "SubscriptionID"];
    SubscriptionMeta meta = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
    SubscriptionSpec spec = 3 [(gogoproto.nullable) = false];
    SubscriptionStatus status = 4 [(gogoproto.nullable) = false];
}

message SubscriptionStatus {
    SubscriptionPhase phase = 1;
    SubscriptionState state = 2;
    Error error = 3;
    repeated string channels = 4 [(gogoproto.casttype) = "ChannelID"];
    uint64 term = 5 [(gogoproto.casttype) = "TermID"];
    string master = 6 [(gogoproto.casttype) = "MasterID"];
}

enum SubscriptionPhase {
    SUBSCRIPTION_CLOSED = 0;
    SUBSCRIPTION_OPEN = 1;
}

enum SubscriptionState {
    // SUBSCRIPTION_PENDING indicates the subscription phase is pending
    SUBSCRIPTION_PENDING = 0;
    // SUBSCRIPTION_COMPLETE indicates the subscription phase is complete
    SUBSCRIPTION_COMPLETE = 1;
    // SUBSCRIPTION_FAILED indicates the subscription phase failed
    SUBSCRIPTION_FAILED = 2;
}
