/*
Copyright 2021-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

// Package onos.uenib defines interfaces for managing user equipment (UEs)
package onos.uenib;

import "google/protobuf/any.proto";
import "gogoproto/gogo.proto";

// UEService provides an API for managing UEs and various aspects of
// information associated with UEs.
service UEService {
    // Create a new UE entity and its initial set of aspects.
    rpc Create (CreateRequest) returns (CreateResponse) {
    }

    // Get a UE entity populated with the requested aspects.
    rpc Get (GetRequest) returns (GetResponse) {
    }

    // Update an existing UE entity populated with the requested aspects.
    // Only the aspects present in the UE entity will be updated; others will be left unmodified.
    // New aspects can be added via update.
    rpc Update (UpdateRequest) returns (UpdateResponse) {
    }

    // Delete the specified aspects of a UE entity.
    rpc Delete (DeleteRequest) returns (DeleteResponse) {
    }

    // List returns a stream of UE entities populated the requested aspects.
    rpc List (ListRequest) returns (stream ListResponse) {
    }

    // Watch returns a stream of UE change notifications, with each UE populated with only the
    // requested aspects.
    rpc Watch (WatchRequest) returns (stream WatchResponse) {
    }
}

// EventType is a UE operation event type
enum EventType {
    NONE = 0;
    ADDED = 1;
    UPDATED = 2;
    REMOVED = 3;
}

// Event is a record of an operation on a UE
message Event {
    EventType type = 1;
    UE ue = 2 [(gogoproto.customname) = "UE", (gogoproto.nullable) = false];
}

message CreateRequest {
    UE ue = 1 [(gogoproto.customname) = "UE", (gogoproto.nullable) = false];
}

message CreateResponse {
}

message GetRequest {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
    repeated string aspect_types = 2;
}

message GetResponse {
    UE ue = 1 [(gogoproto.customname) = "UE", (gogoproto.nullable) = false];
}

message UpdateRequest {
    UE ue = 1 [(gogoproto.customname) = "UE", (gogoproto.nullable) = false];
}

message UpdateResponse {
}

message DeleteRequest {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
    repeated string aspect_types = 2;
}

message DeleteResponse {
}

message ListRequest {
    repeated string aspect_types = 1;
}

message ListResponse {
    UE ue = 1 [(gogoproto.customname) = "UE", (gogoproto.nullable) = false];
}

message WatchRequest {
    bool noreplay = 2;
    repeated string aspect_types = 3;
}

message WatchResponse {
    Event event = 1 [(gogoproto.nullable) = false];
}

// UE entity is merely an ID and a map of arbitrary aspects.
message UE {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];

    // Map of aspects as typed values
    map<string, google.protobuf.Any> aspects = 2;
}
