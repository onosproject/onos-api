// SPDX-FileCopyrightText: 2021-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

// Package onos.uenib defines interfaces for managing user equipment (UEs)
package onos.uenib;

import "google/protobuf/any.proto";
import "gogoproto/gogo.proto";

// UEService provides an API for managing UEs and various aspects of
// information associated with UEs.
service UEService {
    // Create a new UE entity and its initial set of aspects.
    rpc CreateUE (CreateUERequest) returns (CreateUEResponse) {
    }

    // Get a UE entity populated with the requested aspects.
    rpc GetUE (GetUERequest) returns (GetUEResponse) {
    }

    // Update an existing UE entity populated with the requested aspects.
    // Only the aspects present in the UE entity will be updated; others will be left unmodified.
    // New aspects can be added via update.
    rpc UpdateUE (UpdateUERequest) returns (UpdateUEResponse) {
    }

    // Delete the specified aspects of a UE entity.
    rpc DeleteUE (DeleteUERequest) returns (DeleteUEResponse) {
    }

    // ListUEs returns a stream of UE entities populated the requested aspects.
    rpc ListUEs (ListUERequest) returns (stream ListUEResponse) {
    }

    // WatchUEs returns a stream of UE change notifications, with each UE populated with only the
    // requested aspects.
    rpc WatchUEs (WatchUERequest) returns (stream WatchUEResponse) {
    }
}

// EventType is a UE operation event type
enum EventType {
    NONE = 0;
    ADDED = 1;
    UPDATED = 2;
    REMOVED = 3;
}

// Event is a record of an operation on a UE
message Event {
    EventType type = 1;
    UE ue = 2 [(gogoproto.customname) = "UE", (gogoproto.nullable) = false];
}

message CreateUERequest {
    UE ue = 1 [(gogoproto.customname) = "UE", (gogoproto.nullable) = false];
}

message CreateUEResponse {
}

message GetUERequest {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
    repeated string aspect_types = 2;
}

message GetUEResponse {
    UE ue = 1 [(gogoproto.customname) = "UE", (gogoproto.nullable) = false];
}

message UpdateUERequest {
    UE ue = 1 [(gogoproto.customname) = "UE", (gogoproto.nullable) = false];
}

message UpdateUEResponse {
}

message DeleteUERequest {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
    repeated string aspect_types = 2;
}

message DeleteUEResponse {
}

message ListUERequest {
    repeated string aspect_types = 1;
}

message ListUEResponse {
    UE ue = 1 [(gogoproto.customname) = "UE", (gogoproto.nullable) = false];
}

message WatchUERequest {
    bool noreplay = 2;
    repeated string aspect_types = 3;
}

message WatchUEResponse {
    Event event = 1 [(gogoproto.nullable) = false];
}

// UE entity is merely an ID and a map of arbitrary aspects.
message UE {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];

    // Map of aspects as typed values
    map<string, google.protobuf.Any> aspects = 2;
}
