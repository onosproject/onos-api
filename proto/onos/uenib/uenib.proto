/*
Copyright 2021-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

// Package onos.topo defines interfaces for managing network topology
package onos.uenib;

import "google/protobuf/any.proto";
import "gogoproto/gogo.proto";

// UEService provides an API for managing UEs and various aspects of
// information associated with UEs.
service UEService {
    // Create a new UE entity and its initial set of aspects.
    rpc Create (CreateRequest) returns (CreateResponse) {
    }

    // Get a UE entity with all or only requested aspects.
    rpc Get (GetRequest) returns (GetResponse) {
    }

    // Update an existing UE entity with the specified aspects.
    // Only the aspects present in the UE entity will be updated; others will be left unmodified.
    // New aspects can be added via update.
    rpc Update (UpdateRequest) returns (UpdateResponse) {
    }

    // Delete specified aspects of a UE entity or delete the UE entity entirely.
    // If aspects are named in the request, only those aspects will be deleted.
    // Otherwise, if no aspects are specified, the entire UE will be deleted.
    rpc Delete (DeleteRequest) returns (DeleteResponse) {
    }

    // List gets the requested UE entities populated with all or only requested aspects.
    rpc List (ListRequest) returns (ListResponse) {
    }

    // Watch returns a stream of UE change notifications, with each UE populated with only the
    // requested aspects.
    rpc Watch (WatchRequest) returns (stream WatchResponse) {
    }
}

// EventType is a topo operation event type
enum EventType {
    NONE = 0;
    ADDED = 1;
    UPDATED = 2;
    REMOVED = 3;
}

// Event is a topo operation event
message Event {
    EventType type = 1;
    UE ue = 2 [(gogoproto.nullable) = false];
}

message CreateRequest {
    UE ue = 1;
}

message CreateResponse {
    UE ue = 1;
}

message GetRequest {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
    repeated string aspect_types = 2;
}

message GetResponse {
    UE ue = 1;
}

message UpdateRequest {
    UE ue = 1;
}

message UpdateResponse {
    UE ue = 1;
}

message DeleteRequest {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
    repeated string aspect_types = 2;
}

message DeleteResponse {
}

message Filter {
    oneof filter {
        EqualFilter equal = 1;
        NotFilter not = 2;
        InFilter in = 3;
    }
    string key = 4; // optional key
}
message EqualFilter {
    string value = 1;
}
message InFilter {
    repeated string values = 1;
}
message NotFilter {
    Filter inner = 1;
}

message Filters {
    repeated Filter label_filters = 2;
}

message ListRequest {
    Filters filters = 1;
    repeated string aspect_types = 2;
}

message ListResponse {
    repeated UE ues = 1 [(gogoproto.nullable) = false];
}

message WatchRequest {
    Filters filters = 1;
    bool noreplay = 2;
    repeated string aspect_types = 3;
}

message WatchResponse {
    Event event = 1 [(gogoproto.nullable) = false];
}

// Object is an one of the following: a kind (archetype of entity or relation), an entity, a relation
message UE {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];

    // Arbitrary labels for classification/search
    map<string, string> labels = 3;

    // Map of aspects as typed values
    map<string, google.protobuf.Any> aspects = 4;
}
