// SPDX-FileCopyrightText: 2019-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

// Package onos.topo defines interfaces for managing network topology
package onos.topo;

import "google/protobuf/any.proto";
import "gogoproto/gogo.proto";

// EntityService provides an API for managing entities.
service Topo {
  // Create a new topology object
  rpc Create (CreateRequest) returns (CreateResponse) {
  }

  // Get an object from topology
  rpc Get (GetRequest) returns (GetResponse) {
  }

  // Update an existing topology object
  rpc Update (UpdateRequest) returns (UpdateResponse) {
  }
  // Delete an object from topology
  rpc Delete (DeleteRequest) returns (DeleteResponse) {
  }

  // List gets a stream of requested objects
  rpc List (ListRequest) returns (ListResponse) {
  }

  // Watch returns a stream of topo change notifications
  rpc Watch (WatchRequest) returns (stream WatchResponse) {
  }
}

// EventType is a topo operation event type
enum EventType {
  NONE = 0;
  ADDED = 1;
  UPDATED = 2;
  REMOVED = 3;
}

// Event is a topo operation event
message Event {
  EventType type = 1;
  Object object = 2 [(gogoproto.nullable) = false];
}


message CreateRequest {
  Object object = 1;
}

message CreateResponse {
  Object object = 1;
}

message GetRequest {
  string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
}

message GetResponse {
  Object object = 1;
}

message UpdateRequest {
  Object object = 1;
}

message UpdateResponse {
  Object object = 1;
}

message DeleteRequest {
  string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
  uint64 revision = 2 [(gogoproto.casttype) = "Revision"];
}

message DeleteResponse {
}

message Filter {
  oneof filter {
    EqualFilter equal = 1;
    NotFilter not = 2;
    InFilter in = 3;
  }
  string key = 4; // optional key
}
message EqualFilter {
  string value = 1;
}
message InFilter {
  repeated string values = 1;
}
message NotFilter {
  Filter inner = 1;
}

// Filter for targets of given relation kinds and given source ids; optionally, filters by specified target kind
message RelationFilter {
  string src_id = 1;
  string relation_kind = 2;
  string target_kind = 3;
  RelationFilterScope scope = 4;
  string target_id = 5;
}

enum RelationFilterScope {
  TARGETS_ONLY = 0;          // Indicates only the target entities are desired when searching by src_id, or source entities when searching by target_id
  ALL = 1;                   // Indicated source, target entities and all relations are desired
  SOURCE_AND_TARGETS = 2;    // Indicates only source and target entities are desired, regardless of search criteria
  RELATIONS_ONLY = 3;        // Indicates only relations are desired; no entities
  RELATIONS_AND_TARGETS = 4; // Indicates only relations and target entities desired when searching by src_id, or relations and source entities when searching by target_id
}

message Filters {
  Filter kind_filter = 1;
  repeated Filter label_filters = 2;
  RelationFilter relation_filter = 3;
  repeated Object.Type object_types = 4;
  repeated string with_aspects = 6;
}

enum SortOrder {
  UNORDERED = 0;
  ASCENDING = 1;
  DESCENDING = 2;
}

message ListRequest {
  Filters filters = 1;
  SortOrder sort_order = 2;
}

message ListResponse {
  repeated Object objects = 1 [(gogoproto.nullable) = false];
}

message WatchRequest {
  Filters filters = 1;
  bool noreplay = 2;
}

message WatchResponse {
  Event event = 1 [(gogoproto.nullable) = false];
}

// Object is an one of the following: a kind (archetype of entity or relation), an entity, a relation
message Object {
  string uuid = 9 [(gogoproto.customname) = "UUID", (gogoproto.casttype) = "UUID"];
  string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];
  uint64 revision = 2 [(gogoproto.casttype) = "Revision"];

  enum Type {
    UNSPECIFIED = 0;
    ENTITY = 1;
    RELATION = 2;
    KIND = 3;
  }
  Type type = 3;

  oneof obj {
    Entity entity = 4;
    Relation relation = 5;
    Kind kind = 6;
  }

  // Map of aspects as typed values; for kind, these represent expected aspects and their default values
  map<string, google.protobuf.Any> aspects = 7;

  // Arbitrary labels for classification/search
  map<string, string> labels = 8;
}

// Entity represents any "thing" that is represented in the topology
message Entity {
  // user-defined entity kind
  string kind_id = 1 [(gogoproto.customname) = "KindID", (gogoproto.casttype) = "ID"];

  // these lists are maintained by the system and are provided as read-only values for clients
  repeated string src_relation_ids = 2 [(gogoproto.customname) = "SrcRelationIDs", (gogoproto.casttype) = "ID"];
  repeated string tgt_relation_ids = 3 [(gogoproto.customname) = "TgtRelationIDs", (gogoproto.casttype) = "ID"];
}

// Relation represents any "relation" between two entitites in the topology.
message Relation {
  // user defined relation kind
  string kind_id = 1 [(gogoproto.customname) = "KindID", (gogoproto.casttype) = "ID"];

  string src_entity_id = 2 [(gogoproto.customname) = "SrcEntityID", (gogoproto.casttype) = "ID"];
  string tgt_entity_id = 3 [(gogoproto.customname) = "TgtEntityID", (gogoproto.casttype) = "ID"];
}

// Kind represents an archetype of an object, i.e. entity or relation
message Kind {
  string name = 1;  // Friendly name of the kind
}


