/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package onos.topo;

import "google/protobuf/any.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

// TODO: Deprecate! Use language specific constant definitions instead.
// Kinds of RAN entities
enum RANEntityKinds {
    E2NODE = 0;
    E2CELL = 1;
    E2T = 3;
}

// TODO: Deprecate! Use language specific constant definitions instead.
// Kinds of RAN relations
enum RANRelationKinds {
    CONTROLS = 0;
    CONTAINS = 1;
    NEIGHBORS = 2;
}

enum CellGlobalIDType {
    NRCGI = 0; // 5G cell ID
    ECGI = 1; // 4G cell ID
}

// NodeType is for use in encoding node type in topo Entity URI identifier; see section 9.2.6 of ORAN E2AP v02.00 spec
enum NodeType {
    NT_NONE = 0;
    NT_GNB = 1;
    NT_EN_GNB = 2;
    NT_NG_ENB = 3;
    NT_ENB = 4;
    // Add new types here. DO NOT change ordinals of existing values.
}

// ComponentType is for use in encoding node component type in topo Entity URI identifier; see section 9.2.6 of ORAN E2AP v02.00 spec
enum ComponentType {
    CT_NONE = 0;
    CT_CU = 1;
    CT_CU_UP = 2;
    CT_DU = 3;
    CT_ENB = 4;
    // Add new types here. DO NOT change ordinals of existing values.
}

message Location {
    // Legacy Geographical location; expected value type of "location" aspect
    double lat = 1 [deprecated=true];
    double lng = 2 [deprecated=true];
    oneof ext {
        Wgs84Location wgs84 = 3;
        CartesianLocation cartesian = 4;
    }
}

message Wgs84Location {
    // Latitude in degrees, between +/- 90.
    double latitude_deg = 1;

    // Longitude in degrees, between +/- 180.
    double longitude_deg = 2;

    // Altitude in meters, from the surface of the WGS-84 ellipsoid.
    double altitude_m = 3;
}

// ECEF-compatible cartesian coordinates.
message CartesianLocation {
    // X, Y, and Z coordinates in meters.
    double x_m = 1;
    double y_m = 2;
    double z_m = 3;
}

message AzElOrientation {
    // Azimuth angle in degrees.
    double azimuth_deg = 1;
    // Elevation angle in degrees.
    double elevation_deg = 2;
    // Rotation around boresight in degrees.
    double rotation_deg = 3;
}

message YprOrientation {
    // Yaw angle around z-axis.
    double yaw_deg = 1;
    // Pitch angle around y-axix.
    double pitch_deg = 2;
    // Roll angle around x-axis.
    double roll_deg = 3;
}

message Orientation {
  oneof orientation {
    AzElOrientation azel = 1;
    YprOrientation ypr = 2;
  }
}

message Waypoint {
    google.protobuf.Timestamp time = 1;
    Location location = 2;
}

// A set of waypoints that can be interpolated.
message Waypoints {
    repeated Waypoint waypoint = 1;
}

// Minimal satellite orbit data, e.g. from a TLE, that can be propagated.
message OrbitData {
    google.protobuf.Timestamp epoch = 1;

    // Orbit inclination in degrees.
    double inclination_deg = 2;
    // Right ascension of the ascending node in degrees.
    double raan_deg = 3;
    // Orbit eccentricity.
    double e = 4;
    // Argument of perigee in degrees.
    double argument_deg = 5;
    // Mean anomaly in degrees.
    double anomaly_deg = 6;
    // Mean motion in revolutions per day.
    double mean_motion = 7;
}

message Motion {
    oneof motion {
        Location fixed_location = 1;
        Waypoints waypoints = 2;
        OrbitData orbit = 3;
    }
}

// Area of coverage; expected value type of "coverage" aspect
message Coverage {
    int32 height = 1;
    int32 arc_width = 2;
    int32 azimuth = 3;
    int32 tilt = 4;
}

// E2Node aspect; expected value type of "E2NODE" aspect and expected on entities of "E2NODE" kind
message E2Node {
    map<string, ServiceModelInfo> service_models = 1; // map of oid to service model info
}

// E2NodeConfig aspect tracks the managed configuration for an E2 node
message E2NodeConfig {
    repeated Interface connections = 1 [(gogoproto.nullable) = false];
    uint64 version = 2;
}

// Lease aspect with an expiration timestamp for RAN entities
message Lease {
    google.protobuf.Timestamp expiration = 1 [(gogoproto.stdtime) = true];
}

// Interface determines address and type of an endpoint interface
message Interface {
    Type type = 1;
    string ip = 2 [(gogoproto.customname) = "IP"];
    uint32 port = 3;

    enum Type {
        INTERFACE_UNKNOWN = 0;
        INTERFACE_E2T = 1;
        INTERFACE_E2AP101 = 2;
        INTERFACE_E2AP200 = 3;
    }
}




// E2TInfo E2T aspect;
message E2TInfo {
    repeated Interface interfaces = 1;
}


message CellGlobalID {
    string value = 1;
    CellGlobalIDType type = 2;
}

message NeighborCellID {
    CellGlobalID cell_global_id = 1 [(gogoproto.customname) = "CellGlobalID"];
    string plmn_id = 2 [(gogoproto.customname) = "PlmnID"];
}

// E2Cell aspect; expected value type of "E2CELL" aspect and expected on entities of "E2CELL" kind
message E2Cell {
    string cell_object_id = 1 [(gogoproto.customname) = "CellObjectID"];
    CellGlobalID cell_global_id = 2 [(gogoproto.customname) = "CellGlobalID"];
    uint32 antenna_count = 3;
    uint32 earfcn = 4 [(gogoproto.customname) = "EARFCN"];
    string cell_type = 5;
    uint32 pci = 6  [(gogoproto.customname) = "PCI"];
    map<string, uint32> kpi_reports = 7 [(gogoproto.customname) = "KpiReports"];
    repeated NeighborCellID neighbor_cell_ids = 8 [(gogoproto.customname) = "NeighborCellIDs"];
}

// Each entity with an E2Cell persona is expected to be a target of one and only one "CONTROLS" relation with a node
// that has an E2Node persona.

// Each entity with an E2Cell persona is expected to be the source of zero or more "NEIGHBORS" relations with target
// of another entity with an E2Node persona.

message ServiceModelInfo {
    string oid = 1 [(gogoproto.customname) = "OID"];
    string name = 2;
    repeated google.protobuf.Any ran_functions = 3;
    repeated uint32 ranFunctionIDs = 4;
}

message RCRanFunction {
    string id = 1 [(gogoproto.customname) = "ID"];
    repeated RCReportStyle report_styles = 2;
}

message MHORanFunction {
    string id = 1 [(gogoproto.customname) = "ID"];
    repeated MHOReportStyle report_styles = 2;
}

message KPMRanFunction {
    string id = 1 [(gogoproto.customname) = "ID"];
    repeated KPMReportStyle report_styles = 2;
}

message RSMRanFunction {
    string id = 1 [(gogoproto.customname) = "ID"];
    repeated RSMNodeSlicingCapabilityItem ric_slicing_node_capability_list = 2;
}

message RSMNodeSlicingCapabilityItem {
    int32 max_number_of_slices_dl = 1;
    int32 max_number_of_slices_ul = 2;
    RSMSlicingType slicing_type = 3;
    int32 max_number_of_ues_per_slice = 4;
    repeated RSMSupportedSlicingConfigItem supported_config = 5;
}

message RSMSupportedSlicingConfigItem {
    E2SmRsmCommand slicing_config_type = 1;
};

enum E2SmRsmCommand {
    E2_SM_RSM_COMMAND_SLICE_CREATE = 0;
    E2_SM_RSM_COMMAND_SLICE_UPDATE = 1;
    E2_SM_RSM_COMMAND_SLICE_DELETE = 2;
    E2_SM_RSM_COMMAND_UE_ASSOCIATE = 3;
    E2_SM_RSM_COMMAND_EVENT_TRIGGERS = 4;
};

enum RSMSlicingType {
    SLICING_TYPE_STATIC = 0;
    SLICING_TYPE_DYNAMIC = 1;
};


message RCReportStyle {
    string name = 1;
    int32 type = 2;
}

message KPMReportStyle {
    string name = 1;
    int32 type = 2;
    repeated KPMMeasurement measurements = 3;

}

message MHOReportStyle {
    string name = 1;
    int32 type = 2;
}

message KPMMeasurement {
    string id = 1 [(gogoproto.customname) = "ID"];
    string name = 2;
}

