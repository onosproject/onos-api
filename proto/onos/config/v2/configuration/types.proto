/*
Copyright 2021-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package onos.config.v2.configuration;

import "gogoproto/gogo.proto";
import "onos/config/v2/types.proto";

// Configuration represents complete desired target configuration
message Configuration {
  // 'id' is a unique configuration identifier
  string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ID"];

  // 'target_id' is the target to which the desired target configuration applies
  string target_id = 2 [(gogoproto.customname) = "TargetID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2/target.ID"];

  // 'target_version' is the version to which desired target configuration applies
  string target_version = 3 [(gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2/target.Version"];

  // 'target_type' is an optional target type to which to apply this desired target configuration
  string target_type = 4 [(gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2/target.Type"];

  // 'values' is a list of path/values to set
  repeated onos.config.v2.PathValue values = 7;

}

// State is the state of a phase
enum State {
  // PENDING indicates the phase is pending
  PENDING = 0;

  // COMPLETE indicates the phase is complete
  COMPLETE = 2;

  // FAILED indicates the phase failed
  FAILED = 3;
}
