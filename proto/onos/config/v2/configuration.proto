/*
Copyright 2021-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package onos.config.v2;

import "gogoproto/gogo.proto";
import "onos/config/v2/types.proto";

// Configuration represents complete desired target configuration
message Configuration {
  // 'id' is a unique configuration identifier
  string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ConfigurationID"];

  // 'target_id' is the target to which the desired target configuration applies
  string target_id = 2 [(gogoproto.customname) = "TargetID", (gogoproto.casttype) = "TargetID"];

  // 'target_version' is the version to which desired target configuration applies
  string target_version = 3 [(gogoproto.casttype) = "TargetVersion"];

  // 'target_type' is an optional target type to which to apply this desired target configuration
  string target_type = 4 [(gogoproto.casttype) = "TargetType"];

  // 'values' is a list of path/values to set
  repeated onos.config.v2.PathValue values = 5;

  // 'ConfigurationStatus' is the current lifecycle status of the configuration
  ConfigurationStatus status = 6 [(gogoproto.nullable) = false];

}

// ConfigurationStatus is the status of a Configuration
message ConfigurationStatus {
  // 'state' is the state of the transaction within a Phase
  ConfigurationState state = 2;

  // message is a result message
  string message = 4;

  // mastershipState mastership info
  MastershipState mastershipState = 5;
}


// Mastership state
message MastershipState {
  uint64 term = 1;
}

// ConfigurationState is the configuration state of a configuration phase
enum ConfigurationState {
  // CONFIGURATION_PENDING indicates the configuration is PENDING
  CONFIGURATION_PENDING = 0;

  // COMPLETE indicates the configuration is COMPLETE
  CONFIGURATION_COMPLETE = 2;

}

