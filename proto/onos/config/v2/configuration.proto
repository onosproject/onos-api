/*
Copyright 2021-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package onos.config.v2;

import "gogoproto/gogo.proto";
import "onos/config/v2/object.proto";
import "onos/config/v2/value.proto";
import "onos/config/v2/failure.proto";

// Configuration represents complete desired target configuration
message Configuration {
    ObjectMeta meta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

    // 'id' is a unique configuration identifier
    string id = 2 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ConfigurationID"];

    // 'target_id' is the target to which the desired target configuration applies
    string target_id = 3 [(gogoproto.customname) = "TargetID", (gogoproto.casttype) = "TargetID"];

    // 'target_version' is the version to which desired target configuration applies
    string target_version = 4 [(gogoproto.casttype) = "TargetVersion"];

    // 'target_type' is an optional target type to which to apply this desired target configuration
    string target_type = 5 [(gogoproto.casttype) = "TargetType"];

    // 'values' is a map of path/values to set
    map<string, PathValue> values = 6;

    // 'ConfigurationStatus' is the current lifecycle status of the configuration
    ConfigurationStatus status = 7 [(gogoproto.nullable) = false];
}

// ConfigurationStatus is the status of a Configuration
message ConfigurationStatus {
    // revision is the highest revision number that's been reconciled
    uint64 revision = 1 [(gogoproto.casttype) = "Revision"];

    // 'state' is the state of the transaction within a Phase
    ConfigurationState state = 2;

    // mastershipState mastership info
    MastershipState mastership_state = 3 [(gogoproto.nullable) = false];

    // paths a set of path statuses
    map<string, PathStatus> paths = 4;

    // failure configuration failure type and description
    Failure failure = 5;
}

// PathStatus is the status of a Configuration path
message PathStatus {
    uint64 index = 1 [(gogoproto.casttype) = "Index"];
}

// Mastership state
message MastershipState {
    uint64 term = 1 [(gogoproto.casttype) = "MastershipTerm"];
}

// ConfigurationState is the configuration state of a configuration phase
enum ConfigurationState {
    // CONFIGURATION_PENDING indicates the configuration is PENDING
    CONFIGURATION_PENDING = 0;

    // CONFIGURATION_INITIALIZING indicates the configuration is being initialized from the target
    CONFIGURATION_INITIALIZING = 1;

    // CONFIGURATION_UPDATING indicates the configuration is being updated
    CONFIGURATION_UPDATING = 2;

    // CONFIGURATION_COMPLETE indicates the configuration is complete
    CONFIGURATION_COMPLETE = 3;

    // CONFIGURATION_FAILED indicates the configuration is failed
    CONFIGURATION_FAILED = 4;

    // CONFIGURATION_STALE indicated the configuration is in the stale state
    CONFIGURATION_STALE = 5;
}

// ConfigurationEvent configuration store event
message ConfigurationEvent {
    // ConfigurationEventType configuration event types for configuration store
    enum ConfigurationEventType {
        // CONFIGURATION_EVENT_UNKNOWN indicates unknown configuration store event
        CONFIGURATION_EVENT_UNKNOWN = 0;
        // CONFIGURATION_CREATED indicates the configuration entry in the store is created
        CONFIGURATION_CREATED = 1;
        // CONFIGURATION_UPDATED indicates the configuration entry in the store is updated
        CONFIGURATION_UPDATED = 2;
        // CONFIGURATION_DELETED indicates the configuration entry in the store is deleted
        CONFIGURATION_DELETED = 3;
        // CONFIGURATION_REPLAYED
        CONFIGURATION_REPLAYED = 4;
    }

    // ConfigurationEventType configuration event type
    ConfigurationEventType type = 1;
    Configuration configuration = 2 [(gogoproto.nullable) = false];
}