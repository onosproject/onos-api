// SPDX-FileCopyrightText: 2021-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package onos.config.v2;

import "gogoproto/gogo.proto";
import "onos/config/v2/object.proto";
import "onos/config/v2/value.proto";
import "onos/config/v2/failure.proto";
import "google/protobuf/timestamp.proto";

message Proposal {
    ObjectMeta meta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

    // 'id' is the unique identifier of the proposal
    string id = 2 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ProposalID"];

    // 'target_id' is the proposal's target identifier
    string target_id = 3 [(gogoproto.customname) = "TargetID", (gogoproto.casttype) = "TargetID"];

    // 'transaction_index' is the unique index of the transaction
    uint64 transaction_index = 4 [(gogoproto.casttype) = "Index"];

    // 'details' is the proposal details
    oneof details {
        ChangeProposal change = 5;
        RollbackProposal rollback = 6;
    }

    // 'status' is the current lifecycle status of the proposal
    ProposalStatus status = 7 [(gogoproto.nullable) = false];
}

message ChangeProposal {
    // 'changes' is the proposed change values
    map<string, PathValue> values = 1;
}

message RollbackProposal {
    // 'rollback_index' is the index of the transaction to roll back
    uint64 rollback_index = 1 [(gogoproto.casttype) = "Index"];
}

// ProposalStatus is the status of a Proposal
message ProposalStatus {
    // 'phases' is the proposal phases
    ProposalPhases phases = 1 [(gogoproto.nullable) = false];

    // 'prev_index' is the index of the previous proposal associated with this target
    uint64 prev_index = 2 [(gogoproto.casttype) = "Index"];

    // 'next_index' is the index of the next proposal associated with this target
    uint64 next_index = 3 [(gogoproto.casttype) = "Index"];

    // 'rollback_index' is a reference to the index to which to roll back
    uint64 rollback_index = 4 [(gogoproto.casttype) = "Index"];

    // 'rollback_values' is the set of values to use to roll back the proposal
    map<string, PathValue> rollback_values = 5;
}

message ProposalPhases {
    // 'initialize' is the proposal initialization phase status
    ProposalInitializePhase initialize = 1;

    // 'validate' is the proposal validation phase status
    ProposalValidatePhase validate = 2;

    // 'commit' is the proposal commit phase status
    ProposalCommitPhase commit = 3;

    // 'apply' is the proposal apply phase status
    ProposalApplyPhase apply = 4;

    // 'abort' is the proposal abort phase status
    ProposalAbortPhase abort = 5;
}

message ProposalPhaseStatus {
    google.protobuf.Timestamp start = 1 [(gogoproto.stdtime) = true];
    google.protobuf.Timestamp end = 2 [(gogoproto.stdtime) = true];
}

message ProposalInitializePhase {
    ProposalPhaseStatus status = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    State state = 2;

    enum State {
        INITIALIZING = 0;
        INITIALIZED = 1;
    }
}

message ProposalValidatePhase {
    ProposalPhaseStatus status = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    State state = 2;
    Failure failure = 3;

    enum State {
        VALIDATING = 0;
        VALIDATED = 1;
        FAILED = 2;
    }
}

message ProposalCommitPhase {
    ProposalPhaseStatus status = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    State state = 2;

    enum State {
        COMMITTING = 0;
        COMMITTED = 1;
    }
}

message ProposalApplyPhase {
    ProposalPhaseStatus status = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    State state = 2;
    uint64 term = 3 [(gogoproto.casttype) = "MastershipTerm"];
    Failure failure = 4;

    enum State {
        APPLYING = 0;
        APPLIED = 1;
        FAILED = 2;
    }
}

message ProposalAbortPhase {
    ProposalPhaseStatus status = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    State state = 2;
    enum State {
        ABORTING = 0;
        ABORTED = 1;
    }
}

// ProposalEvent proposal store event
message ProposalEvent {
    // EventType proposal event types for proposal store
    enum EventType {
        UNKNOWN = 0;
        CREATED = 1;
        UPDATED = 2;
        DELETED = 3;
        REPLAYED = 4;
    }

    EventType type = 1;
    Proposal proposal = 2 [(gogoproto.nullable) = false];
}
