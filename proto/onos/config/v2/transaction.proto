/*
Copyright 2021-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package onos.config.v2;

import "gogoproto/gogo.proto";
import "onos/config/v2/object.proto";
import "onos/config/v2/value.proto";
import "onos/config/v2/failure.proto";
import "google/protobuf/timestamp.proto";

// Transaction refers to a transaction change or transaction rollback
message Transaction {
    ObjectMeta meta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];

    // 'id' is the unique identifier of the transaction
    // This field should be set prior to persisting the object.
    string id = 2 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "TransactionID"];

    // 'index' is a monotonically increasing, globally unique index of the change
    // The index is provided by the store, is static and unique for each unique change identifier,
    // and should not be modified by client code.
    uint64 index = 3 [(gogoproto.casttype) = "Index"];

    // 'username' is the name of the user that made the transaction
    string username = 4;

    // 'atomic' indicates whether the transaction is atomic
    bool atomic = 5;

    // 'details' is the transaction details
    oneof details {
        ChangeTransaction change = 6;
        RollbackTransaction rollback = 7;
    }

    // 'status' is the current lifecycle status of the transaction
    TransactionStatus status = 8 [(gogoproto.nullable) = false];
}

message ChangeTransaction {
    // 'values' is a set of changes to apply to targets
    map<string, PathValues> values = 1 [(gogoproto.castkey) = "TargetID"];
}

message RollbackTransaction {
    // 'rollback_index' is the index of the transaction to roll back
    uint64 rollback_index = 1 [(gogoproto.casttype) = "Index"];
}

message TransactionStatus {
    // 'phases' is the transaction phases
    TransactionPhases phases = 1 [(gogoproto.nullable) = false];

    // 'proposals' is the set of proposals managed by the transaction
    repeated string proposals = 2 [(gogoproto.casttype) = "ProposalID"];

    // 'state' is the overall transaction state
    State state = 3;

    // 'failure' is the transaction failure (if any)
    Failure failure = 4;

    enum State {
        PENDING = 0;
        VALIDATED = 1;
        COMMITTED = 2;
        APPLIED = 3;
        FAILED = 4;
    }
}

message TransactionPhases {
    // 'initialize' is the proposal initialization phase status
    TransactionInitializePhase initialize = 1;

    // 'validate' is the proposal validation phase status
    TransactionValidatePhase validate = 2;

    // 'commit' is the proposal commit phase status
    TransactionCommitPhase commit = 3;

    // 'apply' is the proposal apply phase status
    TransactionApplyPhase apply = 4;
}

message TransactionPhaseStatus {
    google.protobuf.Timestamp start = 1 [(gogoproto.stdtime) = true];
    google.protobuf.Timestamp end = 2 [(gogoproto.stdtime) = true];
}

message TransactionInitializePhase {
    TransactionPhaseStatus status = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    State state = 2;
    Failure failure = 3;

    enum State {
        INITIALIZING = 0;
        INITIALIZED = 1;
        FAILED = 2;
    }
}

message TransactionValidatePhase {
    TransactionPhaseStatus status = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    State state = 2;
    Failure failure = 3;

    enum State {
        VALIDATING = 0;
        VALIDATED = 1;
        FAILED = 2;
    }
}

message TransactionCommitPhase {
    TransactionPhaseStatus status = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    State state = 2;

    enum State {
        COMMITTING = 0;
        COMMITTED = 1;
    }
}

message TransactionApplyPhase {
    TransactionPhaseStatus status = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    State state = 2;

    enum State {
        APPLYING = 0;
        APPLIED = 1;
    }
}

// TransactionEvent transaction store event
message TransactionEvent {
    // EventType transaction event types for transaction store
    enum EventType {
        UNKNOWN = 0;
        CREATED = 1;
        UPDATED = 2;
        DELETED = 3;
        REPLAYED = 4;
    }

    EventType type = 1;
    Transaction transaction = 2 [(gogoproto.nullable) = false];
}
