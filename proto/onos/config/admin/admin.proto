// SPDX-FileCopyrightText: 2019-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

// Package admin defines the administrative gRPC interfaces.
package onos.config.admin;

import "gogoproto/gogo.proto";
import "github.com/openconfig/gnmi/proto/gnmi/gnmi.proto";
import "onos/config/v2/value.proto";
import "onos/config/v2/transaction.proto";
import "onos/config/v2/configuration.proto";

// ReadOnlySubPath is an extension to the ReadOnlyPath to define the datatype of
// the subpath
message ReadOnlySubPath {
    // sub_path is the relative path of a child object e.g. /list2b/index
    string sub_path = 1;
    // value_type is the datatype of the read only path
    onos.config.v2.ValueType value_type = 2;

    repeated uint64 type_opts = 3;
    string description = 4;
    string units = 5;
    bool IsAKey = 6;
    string AttrName = 7;
}

// ReadOnlyPath extracted from the model plugin as the definition of a tree of read only items.
// In YANG models items are defined as ReadOnly with the `config false` keyword.
// This can be applied to single items (leafs) or collections (containers or lists).
// When this `config false` is applied to an object every item beneath it will
// also become readonly - here these are shown as subpaths.
// The complete read only path then will be a concatenation of both e.g.
// /cont1a/cont1b-state/list2b/index and the type is defined in the SubPath as UInt8.
message ReadOnlyPath {
    // path of the topmost `config false` object e.g. /cont1a/cont1b-state
    string path = 1;
    // ReadOnlySubPath is a set of children of the path including an entry for the
    // type of the topmost object with subpath `/`
    // An example is /list2b/index
    repeated ReadOnlySubPath sub_path = 2;
}

// ReadWritePath is extracted from the model plugin as the definition of a writeable attributes.
// In YANG models items are writable by default unless they are specified as `config false` or
// have an item with `config false` as a parent.
// Each configurable item has metadata with meanings taken from the YANG specification RFC 6020.
message ReadWritePath {
    // path is the full path to the attribute (leaf or leaf-list)
    string path = 1;
    // value_type is the data type of the attribute
    onos.config.v2.ValueType value_type = 2;
    // units is the unit of measurement e.g. dB, mV
    string units = 3;
    // description is an explaination of the meaning of the attribute
    string description = 4;
    // mandatory shows whether the attribute is optional (false) or required (true)
    bool mandatory = 5;
    // default is a default value used with optional attributes. Replaced by 'defaults' below
    string default = 6 [ deprecated=true ];
    // range is definition of the range of values a value is allowed
    repeated string range = 7;
    // length is a defintion of the length restrictions for the attribute
    repeated string length = 8;

    repeated uint64 type_opts = 9;
    bool IsAKey = 10;
    string AttrName = 11;
    // defaults is a default value(s) used with optional attributes. For leaf-list can have repeated values
    // replaces the 'default' attribute above
    repeated string defaults = 12;
}

// Namespace is a mapping between a module name and its shorthand prefix
message Namespace {
    string module = 1;
    string prefix = 2;
}

// ModelInfo is general information about a model plugin.
message ModelInfo {
    // name is the name given to the model plugin - no spaces and title case.
    string name = 1;
    // version is the semantic version of the Plugin e.g. 1.0.0.
    string version = 2;
    // model_data is a set of metadata about the YANG files that went in to
    // generating the model plugin. It includes name, version and organization for
    // each YANG file, similar to how they are represented in gNMI Capabilities.
    repeated gnmi.ModelData model_data = 3;
    // module is no longer used
    string module = 4 [ deprecated=true ];
    // getStateMode is flag that defines how the "get state" operation works.
    //  0) means that no retrieval of state is attempted
    //  1) means that the synchronizer will make 2 requests to the device - one for
    //      Get with State and another for Get with Operational.
    //  2) means that the synchronizer will do a Get request comprising of each
    //      one of the ReadOnlyPaths and their sub paths. If there is a `list`
    //      in any one of these paths it will be sent down as is, expecting the
    //      devices implementation of gNMI will be able to expand wildcards.
    //  3) means that the synchronizer will do a Get request comprising of each
    //      one of the ReadOnlyPaths and their sub paths. If there is a `list`
    //      in any one of these paths, a separate call will be made first to find
    //      all the instances in the list and a Get including these expanded wildcards
    //      will be sent down to the device.
    uint32 getStateMode = 5;
    // read_only_path is all of the read only paths for the model plugin.
    repeated ReadOnlyPath read_only_path = 7;
    // read_write_path is all of the read write paths for the model plugin.
    repeated ReadWritePath read_write_path = 8;

    repeated gnmi.Encoding supported_encodings = 9;

    // namespace_mappings is a set of all prefix to module name mapping in the model
    repeated Namespace namespace_mappings = 10;

    // southboundUsePrefix indicates that the southbound should add prefixes in gNMI paths
    bool southboundUsePrefix = 11;
}

message ModelPlugin {
    string id = 1;
    string endpoint = 2;
    ModelInfo info = 3;
    string status = 10;
    string error = 11;
}

// ListModelsRequest carries data for querying registered model plugins.
message ListModelsRequest {
    // verbose option causes all of the ReadWrite and ReadOnly paths to be included.
    bool verbose = 1;
    // An optional filter on the name of the model plugins to list.
    string model_name = 2;
    // An optional filter on the version of the model plugins to list
    string model_version = 3;
}

// RollbackRequest carries the index of the configuration change transaction to rollback.
message RollbackRequest {
    // index of the transaction that should be rolled back
    uint64 index = 1 [(gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.Index"];
}

// RollbackResponse carries the response of the rollback operation
message RollbackResponse {
    // ID of the rollback transaction
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.TransactionID"];
    // index of the rollback transaction
    uint64 index = 2 [(gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.Index"];
}

// ConfigAdminService provides means for enhanced interactions with the configuration subsystem.
service ConfigAdminService {
    // ListRegisteredModels returns a stream of registered models.
    rpc ListRegisteredModels(ListModelsRequest) returns (stream ModelPlugin);

    // RollbackTransaction rolls back the specified configuration change transaction.
    rpc RollbackTransaction(RollbackRequest) returns (RollbackResponse);

    // LeafSelectionQuery selects values allowable for leaf.
    // It supports the ROC GUI by supplying a list of valid leaf values based off an
    // XPath query defined in a 'leaf-selection' YANG extension
    // Calls on GetValueSelection RPC on Model Plugin
    rpc LeafSelectionQuery(LeafSelectionQueryRequest) returns (LeafSelectionQueryResponse);
}

// LeafSelectionQueryRequest carries request for the selection of leaf values
message LeafSelectionQueryRequest {
    // target is the name of the target (device) to perform the query on
    string target = 1;

    // type of model plugin to perform the query on
    string type = 2;

    // version of model plugin to perform the query on
    string version = 3;

    // selectionPath is a configuration path to a leaf in the format:
    // /a/b[key1=index][key2=index2]/c/d where d is a leaf node
    string selectionPath = 4;

    // changeContext is the set of changes (e.g. from the GUI form) that have to be superimposed
    // on the current configuration before the leaf selection can be made
    // All the changes in this request should match the target given above
    // optional
    gnmi.SetRequest changeContext = 5;
}

// LeafSelectionQueryResponse carries response for the model information query
message LeafSelectionQueryResponse {
    // selection is an array of string values
    repeated string selection = 1;
}

// Plugins --------------------------------------------

// ModelPluginService is to be implemented by model plugin sidecar
service ModelPluginService {
    // GetModelInfo provides information about the model
    rpc GetModelInfo(ModelInfoRequest) returns (ModelInfoResponse);

    // ValidateConfig validates the provided configuration data against the model
    rpc ValidateConfig(ValidateConfigRequest) returns (ValidateConfigResponse);

    // GetPathValues produces list of typed path value entries from the specified configuration change JSON tree
    rpc GetPathValues(PathValuesRequest) returns (PathValuesResponse);

    // GetValueSelection gets a list of valid options for a leaf by applying selection rules in YANG.
    // The selection rules should be defined as an XPath expression, as an argument
    // to a `leaf-selection` extension in the YANG model
    // (Used to support the ROC GUI)
    rpc GetValueSelection(ValueSelectionRequest) returns (ValueSelectionResponse);
}

// ModelInfoRequest carries request for the model information
message ModelInfoRequest {
}

// ModelInfoResponse carries response for the model information query
message ModelInfoResponse {
    ModelInfo modelInfo = 1;
}

// ValidateConfigRequest carries configuration data to be validated as a JSON blob
message ValidateConfigRequest {
    bytes json = 1;
}

// ValidateConfigResponse carries the result of the validation
message ValidateConfigResponse {
    bool valid = 1;
    string message = 2;
}

// PathValuesRequest carries configuration change as a JSON blob
message PathValuesRequest {
    string pathPrefix = 1;
    bytes json = 2;
}

// PathValuesResponse carries a list of typed path values
message PathValuesResponse {
    repeated onos.config.v2.PathValue pathValues = 1;
}

// ValueSelectionRequest carries the necessary parts to form a selection context
message ValueSelectionRequest {

    // selectionPath is a configuration path to a leaf in the format:
    // /a/b[key1=index][key2=index2]/c/d where d is a leaf node
    string selectionPath = 1;

    // configJson is a JSON tree view of the complete Configuration for a Target
    bytes configJson = 2;
}

// ValueSelectionResponse returns the result of applying the selection rules to the selection context
message ValueSelectionResponse {

    // selection is an array of string values
    repeated string selection = 1;
}

// Transactions ---------------------------------------


// TransactionService provides means to inspect the contents of the internal transactions store.
service TransactionService {
    // Get transaction by its ID or index
    rpc GetTransaction (GetTransactionRequest) returns (GetTransactionResponse) {
    }

    // List returns all configuration transactions
    rpc ListTransactions (ListTransactionsRequest) returns (stream ListTransactionsResponse) {
    }

    // Watch returns a stream of configuration transaction change notifications
    rpc WatchTransactions (WatchTransactionsRequest) returns (stream WatchTransactionsResponse) {
    }
}

message GetTransactionRequest {
    // ID of transaction to get
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.TransactionID"];

    // index of transaction to get; leave 0 for lookup by ID; if specified takes precedence
    uint64 index = 2 [(gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.Index"];
}

message GetTransactionResponse {
    onos.config.v2.Transaction transaction = 1;
}

message ListTransactionsRequest {
}

message ListTransactionsResponse {
    onos.config.v2.Transaction transaction = 1;
}

message WatchTransactionsRequest {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.TransactionID"];
    bool noreplay = 2;
}

message WatchTransactionsResponse {
    onos.config.v2.TransactionEvent event = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
}

// Configurations -------------------------------------

// ConfigurationService provides means to inspect the contents of the internal configurations store.
service ConfigurationService {
    // Get configuration by its target ID
    rpc GetConfiguration (GetConfigurationRequest) returns (GetConfigurationResponse) {
    }

    // List returns all target configurations
    rpc ListConfigurations (ListConfigurationsRequest) returns (stream ListConfigurationsResponse) {
    }

    // Watch returns a stream of configuration change notifications
    rpc WatchConfigurations (WatchConfigurationsRequest) returns (stream WatchConfigurationsResponse) {
    }
}

message GetConfigurationRequest {
    string configuration_id = 1 [(gogoproto.customname) = "ConfigurationID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.ConfigurationID"];
}

message GetConfigurationResponse {
    onos.config.v2.Configuration configuration = 1;
}

message ListConfigurationsRequest {
}

message ListConfigurationsResponse {
    onos.config.v2.Configuration configuration = 1;
}

message WatchConfigurationsRequest {
    string configuration_id = 1 [(gogoproto.customname) = "ConfigurationID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.ConfigurationID"];
    bool noreplay = 2;
}

message WatchConfigurationsResponse {
    onos.config.v2.ConfigurationEvent event = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
}
