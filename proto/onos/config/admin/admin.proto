/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

// Package admin defines the administrative gRPC interfaces.
package onos.config.admin;

import "google/protobuf/duration.proto";
import "gogoproto/gogo.proto";
import "github.com/openconfig/gnmi/proto/gnmi/gnmi.proto";
import "onos/config/snapshot/device/types.proto";
import "onos/config/v2/value.proto";

// Streaming event type
enum Type {
    // NONE indicates this response does not represent a state change
    NONE = 0;

    // ADDED is an event which occurs when an item is added
    ADDED = 1;

    // UPDATED is an event which occurs when an item is updated
    UPDATED = 2;

    // REMOVED is an event which occurs when an item is removed
    REMOVED = 3;
}

// ReadOnlySubPath is an extension to the ReadOnlyPath to define the datatype of
// the subpath
message ReadOnlySubPath {
    // sub_path is the relative path of a child object e.g. /list2b/index
    string sub_path = 1;
    // value_type is the datatype of the read only path
    onos.config.v2.ValueType value_type = 2;

    repeated uint64 type_opts = 3;
    string description = 4;
    string units = 5;
    bool IsAKey = 6;
    string AttrName = 7;
}

// ReadOnlyPath extracted from the model plugin as the definition of a tree of read only items.
// In YANG models items are defined as ReadOnly with the `config false` keyword.
// This can be applied to single items (leafs) or collections (containers or lists).
// When this `config false` is applied to an object every item beneath it will
// also become readonly - here these are shown as subpaths.
// The complete read only path then will be a concatenation of both e.g.
// /cont1a/cont1b-state/list2b/index and the type is defined in the SubPath as UInt8.
message ReadOnlyPath {
    // path of the topmost `config false` object e.g. /cont1a/cont1b-state
    string path = 1;
    // ReadOnlySubPath is a set of children of the path including an entry for the
    // type of the topmost object with subpath `/`
    // An example is /list2b/index
    repeated ReadOnlySubPath sub_path = 2;
}

// ReadWritePath is extracted from the model plugin as the definition of a writeable attributes.
// In YANG models items are writable by default unless they are specified as `config false` or
// have an item with `config false` as a parent.
// Each configurable item has metadata with meanings taken from the YANG specification RFC 6020.
message ReadWritePath {
    // path is the full path to the attribute (leaf or leaf-list)
    string path = 1;
    // value_type is the data type of the attribute
    onos.config.v2.ValueType value_type = 2;
    // units is the unit of measurement e.g. dB, mV
    string units = 3;
    // description is an explaination of the meaning of the attribute
    string description = 4;
    // mandatory shows whether the attribute is optional (false) or required (true)
    bool mandatory = 5;
    // default is a default value used with optional attributes
    string default = 6;
    // range is definition of the range of values a value is allowed
    repeated string range = 7;
    // length is a defintion of the length restrictions for the attribute
    repeated string length = 8;

    repeated uint64 type_opts = 9;
    bool IsAKey = 10;
    string AttrName = 11;
}

// ModelInfo is general information about a model plugin.
message ModelInfo {
    // name is the name given to the model plugin - no spaces and title case.
    string name = 1;
    // version is the semantic version of the Plugin e.g. 1.0.0.
    string version = 2;
    // model_data is a set of metadata about the YANG files that went in to
    // generating the model plugin. It includes name, version and organization for
    // each YANG file, similar to how they are represented in gNMI Capabilities.
    repeated gnmi.ModelData model_data = 3;
    // module is the name of the Model Plugin on the file system - usually ending in .so.<version>.
    string module = 4;
    // getStateMode is flag that defines how the "get state" operation works.
    //  0) means that no retrieval of state is attempted
    //  1) means that the synchronizer will make 2 requests to the device - one for
    //      Get with State and another for Get with Operational.
    //  2) means that the synchronizer will do a Get request comprising of each
    //      one of the ReadOnlyPaths and their sub paths. If there is a `list`
    //      in any one of these paths it will be sent down as is, expecting the
    //      devices implementation of gNMI will be able to expand wildcards.
    //  3) means that the synchronizer will do a Get request comprising of each
    //      one of the ReadOnlyPaths and their sub paths. If there is a `list`
    //      in any one of these paths, a separate call will be made first to find
    //      all the instances in the list and a Get including these expanded wildcards
    //      will be sent down to the device.
    uint32 getStateMode = 5;
    // read_only_path is all of the read only paths for the model plugin.
    repeated ReadOnlyPath read_only_path = 7;
    // read_write_path is all of the read write paths for the model plugin.
    repeated ReadWritePath read_write_path = 8;

    repeated gnmi.Encoding supported_encodings = 9;
}

// Chunk is for streaming a model plugin file to the server.
// There is a built in limit in gRPC of 4MB - plugin is usually around 20MB
// so break in to chunks of approx 1-2MB.
message Chunk {
    // so_file is the name being streamed.
    string so_file = 1;
    // content is the bytes content.
    bytes content = 2;
}

// RegisterResponse carries status of model plugin registration.
message RegisterResponse {
    // name is name of the model plugin.
    string name = 1;
    // version is the semantic version of the model plugin.
    string version = 2;
}

// ListModelsRequest carries data for querying registered model plugins.
message ListModelsRequest {
    // verbose option causes all of the ReadWrite and ReadOnly paths to be included.
    bool verbose = 1;
    // An optional filter on the name of the model plugins to list.
    string model_name = 2;
    // An optional filter on the version of the model plugins to list
    string model_version = 3;
}

// RollbackRequest carries the name of a network config to rollback. If there
// are subsequent changes to any of the devices in that config, the rollback will
// be rejected.
message RollbackRequest {
    // name is an optional name of a Network Change to rollback.
    // If no name is given the last network change will be rolled back.
    // If the name given is not of the last network change and error will be given.
    string name = 1;
    // On optional comment to leave on the rollback.
    string comment = 2;
}

// RollbackResponse carries the response of the rollback operation
message RollbackResponse {
    // A message showing the result of the rollback.
    string message = 1;
}

// ListSnapshotsRequest requests a list of snapshots for all devices and versions.
message ListSnapshotsRequest {
    // subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
    // after all devices have been streamed to the client
    bool subscribe = 1;

    // option to specify a specific device - if blank or '*' then select all
    // Can support `*` (match many chars) or '?' (match one char) as wildcard
    string id = 2 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/snapshot/device.ID"];
}

// CompactChangesRequest requests a compaction of the Network Change and Device Change stores
message CompactChangesRequest {
    // retention_period is an optional duration of time counting back from the present moment
    // Network changes that were created during this period should not be compacted
    // Any network changes that are older should be compacted
    // If not specified the duration is 0
    google.protobuf.Duration retention_period = 1 [(gogoproto.stdduration) = true];
}

// CompactChangesResponse is a response to the Compact Changes command
message CompactChangesResponse {
}

// ConfigAdminService provides means for enhanced interactions with the configuration subsystem.
service ConfigAdminService {
    // ListRegisteredModels returns a stream of registered models.
    rpc ListRegisteredModels(ListModelsRequest) returns (stream ModelInfo);

    // RollbackNetworkChange rolls back the specified network change (or the latest one).
    rpc RollbackNetworkChange(RollbackRequest) returns (RollbackResponse);

    // ListSnapshots gets a list of snapshots across all devices and versions,
    // and streams them back to the caller.
    rpc ListSnapshots(ListSnapshotsRequest) returns (stream onos.config.snapshot.device.Snapshot);

    // CompactChanges requests a snapshot of NetworkChange and DeviceChange stores.
    // This will take all of the Network Changes older than the retention period and
    // flatten them down to just one snapshot (replacing any older snapshot).
    // This will act as a baseline for those changes within the retention period and any future changes.
    // DeviceChanges will be snapshotted to correspond to these NetworkChange compactions
    // leaving an individual snapshot perv device and version combination.
    rpc CompactChanges(CompactChangesRequest) returns (CompactChangesResponse);
}
