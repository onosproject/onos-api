/*
Copyright 2022-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

// Package admin defines the administrative gRPC interfaces.
package onos.config.admin;

import "gogoproto/gogo.proto";
import "onos/config/admin/admin.proto";
import "onos/config/v2/configuration.proto";

// ConfigurationService provides means to inspect the contents of the internal configurations store.
service ConfigurationService {
    // Get configuration by its target ID
    rpc Get (GetConfigurationRequest) returns (GetConfigurationResponse) {
    }

    // List returns all target configurations
    rpc List (ListConfigurationsRequest) returns (stream ListConfigurationsResponse) {
    }

    // Watch returns a stream of configuration change notifications
    rpc Watch (WatchConfigurationsRequest) returns (stream WatchConfigurationsResponse) {
    }
}

message GetConfigurationRequest {
    string id = 1 [(gogoproto.customname) = "ID", (gogoproto.casttype) = "ConfigurationID"];
}

message GetConfigurationResponse {
    onos.config.v2.Configuration transaction = 1;
}

message ListConfigurationsRequest {
}

message ListConfigurationsResponse {
    onos.config.v2.Configuration transaction = 1;
}

message WatchConfigurationsRequest {
}

// Event is a topo operation event
message ConfigurationEvent {
    Type type = 1;
    onos.config.v2.Configuration configuration = 2 [(gogoproto.nullable) = false];
}

message WatchConfigurationsResponse {
    ConfigurationEvent event = 1 [(gogoproto.nullable) = false];
}
