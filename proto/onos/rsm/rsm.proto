/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package onos.rsm;

service Rsm {
  // Slice management
  rpc CreateSlice (CreateSliceRequest) returns (CreateSliceResponse);
  rpc UpdateSlice (UpdateSliceRequest) returns (UpdateSliceResponse);
  rpc DeleteSlice (DeleteSliceRequest) returns (DeleteSliceResponse);

  // UE-Slice association
  rpc SetUeSliceAssociation (SetUeSliceAssociationRequest) returns (SetUeSliceAssociationResponse);
}

message SliceItem {
  string e2_node_id = 1;
  repeated string slice_ids = 2;
}

message Ack {
  bool success = 1;
  string cause = 2;
}

enum SliceType {
  SLICE_TYPE_DL_SLICE = 0;
  SLICE_TYPE_UL_SLICE = 1;
}

message CreateSliceRequest {
  string e2_node_id = 1;
  string slice_id = 2;
  SchedulerType scheduler_type = 3;
  string weight = 4;
  SliceType sliceType = 5;
}

enum SchedulerType {
  SCHEDULER_TYPE_ROUND_ROBIN = 0;
  SCHEDULER_TYPE_PROPORTIONALLY_FAIR = 1;
  SCHEDULER_TYPE_QOS_BASED = 2;
};

message CreateSliceResponse {
  Ack ack = 1;
}

message UpdateSliceRequest {
  string e2_node_id = 1;
  string slice_id = 2;
  SchedulerType scheduler_type = 3;
  string weight = 4;
  SliceType sliceType = 5;
}

message UpdateSliceResponse {
  Ack ack = 1;
}

message DeleteSliceRequest {
  string e2_node_id = 1;
  string slice_id = 2;
  SliceType sliceType = 3;
}

message DeleteSliceResponse {
  Ack ack = 1;
}

message SliceAssocItem {
  string ue_slice_assoc_id = 1;
  string e2_node_id = 2;
  repeated UeIdType ue_id = 3;
  string slice_id = 4;
}

message UeId {
  string ue_id = 1;
  UeIdType type = 2;
}

enum UeIdType {
  UE_ID_TYPE_CU_UE_F1_AP_ID = 0;
  UE_ID_TYPE_DU_UE_F1_AP_ID = 1;
  UE_ID_TYPE_RAN_UE_NGAP_ID = 2;
  UE_ID_TYPE_AMF_UE_NGAP_ID = 3;
  UE_ID_TYPE_ENB_UE_S1_AP_ID = 4;
};

message SetUeSliceAssociationRequest {
  string e2_node_id = 1;
  repeated UeId ue_id = 2;
  string dl_slice_id = 3;
  string ul_slice_id = 4;
  string drb_id = 5;
}

message SetUeSliceAssociationResponse {
  Ack ack = 1;
  string assigned_ue_slice_assoc_id = 2;
}