
/*
Copyright 2020-present Open Networking Foundation.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

// Package onos.pci defines interfaces to monitor PCI
package onos.pci;

service Pci {
  rpc GetNumConflicts(GetNumConflictsRequest) returns (GetNumConflictsReponse) {}
  rpc GetNeighbors(GetNeigborsRequest) returns (GetNeigborsResponse) {}
  rpc GetMetric(GetMetricRequest) returns (GetMetricResponse) {}
  rpc GetPci(GetPciPoolRequest) returns (GetPciPoolResponse) {}
}

// if cell id is not specified, will return total number of conflicts
message GetNumConflictsRequest {
  uint64 cell_id = 1;
}

message GetNumConflictsReponse {
  uint64 count = 1;
}

// must specify cell id: will only return a single cell's neigbors
message GetNeigborsRequest {
  uint64 cell_id = 1;
}

message GetNeigborsResponse {
  repeated uint64 neigbor_ids = 1;
}

// if cell id is not specified, will return all metrics 
message GetMetricRequest {
  uint64 cell_id = 1;
}

message GetMetricResponse {
  map<uint64,Metrics> metrics = 1;
}

// if cell id is not specified, will return all
message GetPciPoolRequest {
  uint64 cell_id = 1;
}

message GetPciPoolResponse {
  map<uint64,PciRange> pools = 1;
}

// metrics for a cell
message Metrics {
  uint32 dlearfcn = 1;
  CellType cell_type = 2;
  uint32 pci = 3;
}

enum CellType {
  FEMTO = 0;
  ENTERPRISE = 1;
  OUTDOOR_SMALL = 2;
  MACRO = 3;
}

message PciRange {
  uint32 min = 1;
  uint32 max = 2;
}